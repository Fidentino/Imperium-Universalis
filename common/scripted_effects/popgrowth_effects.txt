


##########
#	MIGRATION EFFECTS, the cornerstone of these mechanics. Hard to understand, but does wonders
##########

PG_update_inforange = {
	# Set main province's value, and compare
	export_to_variable = { which = tp_base value = province_trade_power } set_variable = { which = tp_compare which = tp_base }
	export_to_variable = { which = tp_infomod value = modifier:local_institution_spread } change_variable = { tp_infomod = 0.5 } # info: base -50%
	if = { limit = { check_variable = { tp_infomod = 0.9 } } set_variable = { which = tp_infomod value = 0.9 } } # max 90%, at least 10% attrition
	
	# Look at each of the neighbours values, and "compare" while updating
	every_neighbor_province = {
		export_to_variable = { which = tp_compare value = province_trade_power }  
		set_variable = { which = tp_infomod which = PREV } multiply_variable = { which = tp_compare which = tp_infomod } # use info % from base prov
		if = { limit = { check_variable = { which = tp_old which = tp_compare } } set_variable = { which = tp_compare which = tp_old } }
		if = {
			limit = { check_variable = { which = tp_compare which = PREV } }	# here which prev = the original province
			PREV = { set_variable = { which = tp_compare which = PREV } } 		# here which prev = the neighbor, so, moving the neighbors to you
		}
	}
	set_variable = { which = PG_info_range which = tp_compare } set_variable = { which = tp_old which = tp_compare }
	set_variable = { which = tp_infodisp which = tp_infomod } 	multiply_variable = { which = tp_old which = tp_infomod }
	# compare after passing all neighboring values (highest possible value). Final will be used for travel; old to check later on
	
}

PG_find_target_province = {
	if = {
		limit = { 
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 2	# very high CoT
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 2
			}
			save_event_target_as = PG_target
		}
	}
	else_if = {
		limit = { 
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 1	# "normal" CoT
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } }	check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop }					province_has_center_of_trade_of_level = 1
			}
			save_event_target_as = PG_target
		}
	}
	else_if = {
		limit = { 
			any_province = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { has_province_modifier = PG_new_pop } # any other place
				OR = { check_variable = { rural_growth = 1.2 } check_variable = { urban_growth = 1.2 } }
			}
		}
		random_province = {
			limit = {
				NOT = { province_distance = { who = PREV distance = $range$ } } NOT = { has_province_modifier = PG_new_pop }
				OR = { check_variable = { rural_growth = 1.2 } check_variable = { urban_growth = 1.2 } }			
			}
			save_event_target_as = PG_target
		}
	}
	else = { 	# nowhere to go -> starvation! 
		set_province_flag = PG_starvation_start
	}

}

mig_dist_cost = {
	if = { 		limit = { province_distance = { who = PREV distance = 1200 } } 	PREV = { owner = { add_treasury = -100 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 750 } } 	PREV = { owner = { add_treasury = -70 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 500 } } 	PREV = { owner = { add_treasury = -60 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 400 } } 	PREV = { owner = { add_treasury = -50 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 300 } } 	PREV = { owner = { add_treasury = -40 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 200 } } 	PREV = { owner = { add_treasury = -30 } } }
	else_if = { limit = { province_distance = { who = PREV distance = 120 } } 	PREV = { owner = { add_treasury = -20 } } }
	else = { 																	PREV = { owner = { add_treasury = -10 } } }
	
}

mig_rural_to_urban = {
	# Origin province
	PREV = { 
		subtract_variable = { which = mig_size value = $no$ } 
		add_base_manpower = -$no$ 	change_variable = { PS_rur_emig = $no$ } 
	
	}
	# Destination province
	add_base_production = $no$ 	add_province_modifier = { name = PG_new_pop duration = 365 }	change_variable = { PS_urb_imig = $no$ }
	set_variable = { which = PG_newpop value = $no$ } 			set_variable = { which = PG_provid which = PREV }
	set_variable = { which = PG_idorigin which = PG_provid } 	set_variable = { which = PG_provid value = 0 }
}

mig_rural_to_rural = {
	# Origin province
	PREV = { 
		subtract_variable = { which = mig_size value = $no$ } 
		add_base_manpower = -$no$  	change_variable = { PS_rur_emig = $no$ } 
	}
	# Destination province
	add_base_manpower = $no$ 	add_province_modifier = { name = PG_new_pop duration = 365 }	change_variable = { PS_rur_imig = $no$ }
	set_variable = { which = PG_newpop value = $no$ } 			set_variable = { which = PG_provid which = PREV }
	set_variable = { which = PG_idorigin which = PG_provid } 	set_variable = { which = PG_provid value = 0 }
}

PG_inland_navalsize = {
	# cleanup previous modifiers
	if = { limit = { has_province_modifier = PG_navsize_16 } 	remove_province_modifier = PG_navsize_16 }
	if = { limit = { has_province_modifier = PG_navsize_8 } 	remove_province_modifier = PG_navsize_8 }
	if = { limit = { has_province_modifier = PG_navsize_4 } 	remove_province_modifier = PG_navsize_4 }
	if = { limit = { has_province_modifier = PG_navsize_2 } 	remove_province_modifier = PG_navsize_2 }
	if = { limit = { has_province_modifier = PG_navsize_1 } 	remove_province_modifier = PG_navsize_1 }
	if = { limit = { has_province_modifier = PG_navsize_0.5 } 	remove_province_modifier = PG_navsize_0.5 }
	if = { limit = { has_province_modifier = PG_navsize_0.25 } 	remove_province_modifier = PG_navsize_0.25 }
	if = { limit = { has_province_modifier = PG_navsize_0.125 } remove_province_modifier = PG_navsize_0.125 }
	
	# calculate
	export_to_variable = { which = PG_nav value = base_manpower } 		multiply_variable = { PG_nav = 0.05 }
	export_to_variable = { which = PG_cnav value = base_production } 	multiply_variable = { PG_cnav = 0.10 }
	export_to_variable = { which = PG_unav value = base_tax } 			multiply_variable = { PG_unav = 0.50 }
	change_variable = { which = PG_nav which = PG_cnav } change_variable = { which = PG_nav which = PG_unav } 
	set_variable = { which = PG_cnav value = 0 } set_variable = { which = PG_unav value = 0 } 
	
	# Now we have the amount of ships to be deducted
	if = { limit = { check_variable = { PG_nav = 16 } } 	PG_reduce_navalsize = { amt = 16 } } 
	if = { limit = { check_variable = { PG_nav = 8 } } 		PG_reduce_navalsize = { amt = 8 } } 
	if = { limit = { check_variable = { PG_nav = 4 } } 		PG_reduce_navalsize = { amt = 4 } } 
	if = { limit = { check_variable = { PG_nav = 2 } } 		PG_reduce_navalsize = { amt = 2 } } 
	if = { limit = { check_variable = { PG_nav = 1 } } 		PG_reduce_navalsize = { amt = 1 } } 
	if = { limit = { check_variable = { PG_nav = 0.5 } } 	PG_reduce_navalsize = { amt = 0.5 } } 
	if = { limit = { check_variable = { PG_nav = 0.25 } } 	PG_reduce_navalsize = { amt = 0.25 } } 
	if = { limit = { check_variable = { PG_nav = 0.125 } } 	PG_reduce_navalsize = { amt = 0.125 } } 
	set_variable = { which = PG_nav value = 0 }
	
}

PG_riverport_navalsize = {
	# cleanup previous modifiers
	if = { limit = { has_province_modifier = PG_riversize_16 } 		remove_province_modifier = PG_riversize_16 }
	if = { limit = { has_province_modifier = PG_riversize_8 } 		remove_province_modifier = PG_riversize_8 }
	if = { limit = { has_province_modifier = PG_riversize_4 } 		remove_province_modifier = PG_riversize_4 }
	if = { limit = { has_province_modifier = PG_riversize_2 } 		remove_province_modifier = PG_riversize_2 }
	if = { limit = { has_province_modifier = PG_riversize_1 } 		remove_province_modifier = PG_riversize_1 }
	if = { limit = { has_province_modifier = PG_riversize_0.5 } 	remove_province_modifier = PG_riversize_0.5 }
	if = { limit = { has_province_modifier = PG_riversize_0.25 } 	remove_province_modifier = PG_riversize_0.25 }
	if = { limit = { has_province_modifier = PG_riversize_0.125 } 	remove_province_modifier = PG_riversize_0.125 }
	
	# calculate
		# different from before: buildings also affected
	set_variable = { which = PG_nav value = 0 }
	
	trigger_switch = {
		on_trigger = has_building
		small_harbor = { change_variable = { PG_nav = 2 } }
		big_harbor = { change_variable = { PG_nav = 3 } }
		harbor_district = { change_variable = { PG_nav = 4 } }
	}
	if = { 		limit = { province_has_center_of_trade_of_level = 3 } change_variable = { PG_nav = 5 } }
	else_if = { limit = { province_has_center_of_trade_of_level = 2 } change_variable = { PG_nav = 3 } }
	else_if = { limit = { province_has_center_of_trade_of_level = 1 } change_variable = { PG_nav = 1 } }
	
	export_to_variable = { which = PG_tnav value = base_manpower } 		multiply_variable = { PG_tnav = 0.05 }
	export_to_variable = { which = PG_cnav value = base_production } 	multiply_variable = { PG_cnav = 0.10 }
	export_to_variable = { which = PG_unav value = base_tax } 			multiply_variable = { PG_unav = 0.50 }
	change_variable = { which = PG_nav which = PG_tnav }
	change_variable = { which = PG_nav which = PG_cnav }
	change_variable = { which = PG_nav which = PG_unav }
	
	# River port effect: -50% naval forcelimit
	multiply_variable = { PG_nav = 0.5 }
	set_variable = { which = PG_tnav value = 0 } set_variable = { which = PG_cnav value = 0 } set_variable = { which = PG_unav value = 0 } 
	
	# Now we have the amount of ships to be deducted
	if = { limit = { check_variable = { PG_nav = 16 } } 	PG_reduce_riversize = { amt = 16 } } 
	if = { limit = { check_variable = { PG_nav = 8 } } 		PG_reduce_riversize = { amt = 8 } } 
	if = { limit = { check_variable = { PG_nav = 4 } } 		PG_reduce_riversize = { amt = 4 } } 
	if = { limit = { check_variable = { PG_nav = 2 } } 		PG_reduce_riversize = { amt = 2 } } 
	if = { limit = { check_variable = { PG_nav = 1 } } 		PG_reduce_riversize = { amt = 1 } } 
	if = { limit = { check_variable = { PG_nav = 0.5 } } 	PG_reduce_riversize = { amt = 0.5 } } 
	if = { limit = { check_variable = { PG_nav = 0.25 } } 	PG_reduce_riversize = { amt = 0.25 } } 
	if = { limit = { check_variable = { PG_nav = 0.125 } } 	PG_reduce_riversize = { amt = 0.125 } } 
	set_variable = { which = PG_nav value = 0 }
	
}


PG_reduce_navalsize = {
	subtract_variable = { which = PG_nav value = $amt$ }
	add_province_modifier = { name = PG_navsize_$amt$ duration = -1 hidden = yes }

}
PG_reduce_riversize = {
	subtract_variable = { which = PG_nav value = $amt$ }
	add_province_modifier = { name = PG_riversize_$amt$ duration = -1 hidden = yes }

}




