#When adding effects directly in on_actions always consider if it would be best to do so through a scripted effect. on_actions with a lot of script in them are harder to get an overview of.

# country
on_startup = {
	iu_initialize_schools_effect = yes
	initialize_chinese_schools_effect = yes
	initialize_polis_modifiers = yes
		
	random_country = {
		limit = {
			NOT = { ai = yes }
			# NOT = { has_global_flag = game_start_flag }	# no need, it is already added in the startup event
		}
		country_event = { id = startup.1 }
		country_event = { id = calc_year.2 }
	}
	
	events = {
		startup.1
		medo_assyrian_war.1
		lier_kings.1
		lier_kings.16
		cyrus_scenario.1
		chinese_school_events.1
		indian.50 #Starts indian religious schools
		danda_niti.13 #Danda Niti Mechanic
		rm.1
	}
}

# country
on_religion_change = {
	remove_country_modifier = christian_progroms
	remove_country_modifier = christians_welcomed
	remove_country_modifier = animal_sacrifices_banned
	remove_country_modifier = begger_quater_removed
	remove_country_modifier = bellona_temple
	remove_country_modifier = disrespect_other_gods_modifier
}

# country.
on_secondary_religion_change = {
	
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	
}

# country
on_colonial_reintegration = {
	
}

# country
on_peace_actor = {
	
}

# country
on_peace_recipient = {
	
}

# country
# root = winning country, from = loser country
on_war_won = {
	events = {
		elam.4
		elam.1
 		elam.24
		medo_assyrian_war.4
		medo_assyrian_war.6
		medo_assyrian_war.602
		lier_kings.15
		rome.1604
		urartu.3
		urartu.302
		urartu.4
		urartu.5
		cyrus_scenario.6
		alalia.7
		alalia.8
	}
	if = {
		limit = { has_ruler_flag = call_help_for_wang_flag }
		clr_ruler_flag = call_help_for_wang_flag
	}
	if = {
		limit = { has_ruler_flag = call_help_to_bazhu_flag }
		clr_ruler_flag = call_help_to_bazhu_flag
	}
	if = {
		limit = { has_ruler_flag = bazhu_refuse }
		clr_ruler_flag = bazhu_refuse
	}
}

# country
# root = loser country, from = winner country
on_war_lost = {
	events = {
		diplomacy.6
		elam.23
		indian.4
		lier_kings.13
		lier_kings.1301
		lier_kings.1302
		lier_kings.1303
		lier_kings.1304
		sukkal.1701
		rome.1602
	}
	if = {
		limit = { has_ruler_flag = call_help_for_wang_flag }
		clr_ruler_flag = call_help_for_wang_flag
	}
	if = {
		limit = { has_ruler_flag = call_help_to_bazhu_flag }
		clr_ruler_flag = call_help_to_bazhu_flag
	}
	if = {
		limit = { has_ruler_flag = bazhu_refuse }
		clr_ruler_flag = bazhu_refuse
	}
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	battle_chinese_cult_spreading_effect = yes
	events = {
		new_governments.6
	}	
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	battle_chinese_cult_spreading_effect = yes
	FROM = {
		country_event = {
			id = media.401
		}
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {
	FROM = {
		country_event = {
			id = media.401
		}
	}
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	# if = {
		# limit = {
			# unit_owner = { ai = no } #Scopes to Unit Owner from Unit Scope
			# general_with_steam_name = yes #Unit Scope Trigger
		# }
		# unit_owner = { set_country_flag = general_with_steam_name_won_battle }
	# }
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={

}

# province
# root = location, from = country doing it
on_removed_from_company ={

}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# province
# root = location, from = winner country
on_battle_lost_province = {
	
}

# country
# root = winning country, from = location
on_siege_won_country = {
	events = {
		sieges.1		# real event for sieges
		sieges.2		# simplified event, for low-dev places
		marduk.2
		marduk.3
		new_governments.20
	}
	
}

# country
# root = losing country, from = location
on_siege_lost_country = {
}

# province
# root = location, from = losing country
on_siege_won_province = {
}

# province
# root = location, from = winning country
on_siege_lost_province = {
	
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
}

# country 
on_new_monarch = {
	if = {
		limit = { has_ruler = "Alexander III the Great"}
		set_country_flag = alexander_is_ruler
	}

	events = {
		danda_niti.3
		elam.35
		new_governments.30
		new_governments.32
		monarchy.13
		maeotian.201
	}
}

on_new_consort = {
	
}

# country
on_monarch_death = {
	events = {
		epirus.2
		subject_event.1
		sukkal.21
		indian.37
		babylon.18
		danda_niti.30
		scythian.2
		corinth.2
		mission_events.24
	}
}

# country 
on_regent = {
	events = {
		
	}
}

# country 
on_new_term_election = {
	events = {
		elections.1
		indian.35
		greek_polis.400 # Democratic Polis Election	
		greek_polis.402 # Oligarchic Polis Election
		korean.11
		elections.6
	}
}

# country 
on_death_election = {
	events = {
		elections.2
		indian.35
		greek_polis.401 # Democratic Polis Election	
		greek_polis.403 # Oligarchic Polis Election	
		greek_polis.404 # Tyrannis Polis Election
		korean.1101
		elections.6
	}
}
# country 

# country
on_death_foreign_slave_ruler = {
	# events = {
		# mamluk_events.0 # Choose new ruler
	# }
}

on_replace_governor = {
	
}


# country
on_bankruptcy = {
}

# country (country annexing, root = target)		# (mrkcosta comment): ROOT = surviving country, FROM = annexed country
on_diplomatic_annex = {
	# transfer money
	export_to_variable = { which = cash_income value = treasury who = FROM }
	money_income = yes
	
	# transfer slaves
	FROM = { multiply_variable = { slaves = 0.75 } }
	change_variable = { which = slaves which = FROM }	# transfer slaves to annexing country

	events = {
		subject_event.10
	}
	
}

# country
on_heir_death = {
	remove_country_modifier = heir_is_coruler
	events = {
		elections.8
	}
}

# country
on_queen_death = {
}

# country
on_new_heir = {
}

# country 
on_weak_heir_claim = {
	
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	events = {
		elections.3
		sparta.1
		sparta.12
		custom_religion.28
		roman_kingdom.1
		indian.29
		elections.5
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	
}

# Called whenever a new emperor is elected
# FROM = Previous Emperor
# ROOT = New Emperor 
on_emperor_elected = {
	#every_elector = {
		#if = {
			#limit = {
				#preferred_emperor = root
			#}
			#change_variable = {
				#which = supported_successive_emperors
				#value = 1
			#}
		#}
		#else = {
			#set_variable = {
				#which = supported_successive_emperors
				#value = 0
			#}
		#}
	#}

	#emperor = {
		#save_global_event_target_as = Emperor
	#}
	#FROM = {
		#if = {
			#limit = { has_country_modifier = diet_occupied }
			#remove_country_modifier = diet_occupied
			#ROOT = {
				#add_country_modifier = { name = diet_occupied duration = -1 }
			#}
		#}
		#if = {
			#limit = {
				#any_country = {
					#reverse_has_opinion_modifier = {
						#modifier = opinion_imperial_diplomacy
						#who = prev
					#}
				#}
			#}
			#every_country = {
				#limit = {
					#reverse_has_opinion_modifier = {
						#modifier = opinion_imperial_diplomacy
						#who = prev
					#}
				#}
				#reverse_remove_opinion = {
					#modifier = opinion_imperial_diplomacy
					#who = prev
				#}
				#ROOT = {
					#add_opinion = {
						#modifier = opinion_imperial_diplomacy
						#who = prev
					#}
				#}
			#}
		#}
	#}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	events = {
	}
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	events = {
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	events = {
	}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	events = {
	}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	events = {
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	events = {
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	events = {
	}
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	events = {
	}
}

on_lock_hre_religion = {
	events = {
	}
}

on_change_hre_religion = {
	events = {
	}
}

on_hre_religion_white_peace = {
	events = {
	}
}

# When a non-native changes government type
on_government_change = {
	if = {
		limit = { TAG = ROM }
		country_event = {
			id = new_ideas.1
			days = 30
		}
	}
	if = {
	    limit = {
		    tag = V4N
			dynasty = "Kravets"
		}
		country_event = {
		    id = new_ideas.1
			days = 30
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
}

# Nation is integrated after being in union
on_integrate = {
	events = {
	}
}

# Nation annexed
# FROM is the nation being annexed
on_annexed = {
	events = {
		indian.65
		korean.7 #Fall of Gojoseon
		lucania.7 #Laus Battle
	}
	# transfer money
	export_to_variable = { which = cash_income value = treasury who = FROM }
	money_income = yes
	
	# transfer slaves
	FROM = { multiply_variable = { slaves = 0.75 } }
	change_variable = { which = slaves which = FROM }	# transfer slaves to annexing country
	
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	events = {
		
	}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {

}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {

}

on_embrace_revolution = {
	
}

# THIS = Revolutionary country being beaten, FROM = Country enforcing the peace treaty
on_dismantle_revolution = {
	
}

# province
on_adm_development = {
	add_base_tax = -1
}

# province
on_dip_development = {
	# Must add some limit in case there is only 0/0/1. If there is 0/0/2, it will transfer to commoner
	if = { 
		limit = { NOT = { base_production = 2 } base_manpower = 2 }		# 0/0/2+
		add_base_manpower = -1
		add_province_modifier = { name = PG_commoner002 duration = 1080 }
	}
	else_if = {
		limit = { NOT = { base_production = 2 } NOT = { base_manpower = 2 } }	# 0/0/1
		add_province_modifier = { name = PG_commoner001 duration = 1080 }
	}
	else = { add_base_production = -1 }
	
	events = {
		population_capacity.7
	}
}

# province
on_mil_development = {		# manpower. There is always one, so we don't risk on having zero value, as it probably happens in production. 
	add_base_manpower = -1
	events = {
		population_capacity.7
	}
}

on_overextension_pulse = {
	random_events = {
		100 = overextension.1
		100 = overextension.2
		100 = overextension.3
		100 = overextension.4
		100 = overextension.5
		100 = overextension.6
		100 = overextension.7
		100 = overextension.8
		100 = overextension.9
		100 = overextension.10
	}
}

on_colonial_pulse = {
	random_events = {
		
	}
}

on_siberian_pulse = {
}

# country random events
on_bi_yearly_pulse = {
	events = {
		population_capacity.2
		egypt.6
	}
}

on_bi_yearly_pulse_2 = {
	events = {
	    government.32
	}
}

on_bi_yearly_pulse_3 = {
}

on_bi_yearly_pulse_4 = {
	random_events = {
		10 = egypt.7

		500 = 0
	}
}

# country random events
on_thri_yearly_pulse = {
	random_events = {
		100 = randomprovince.12
		100 = randomprovince.13
	
		100 = culture.1
		100 = culture.2
		100 = culture.3
		100 = culture.4
		100 = culture.5
		100 = culture.6
		25 = culture.8	# wave of indian influence
		100 = culture.9
		100 = culture.10
		100 = culture.11
		75 = culture.14
		50 = elam.14
			
		50 = religion_romangreek.1
		75 = religion_romangreek.2
		75 = religion_romangreek.3
		75 = religion_romangreek.4
		75 = religion_romangreek.5
		75 = religion_romangreek.6
		75 = religion_romangreek.7
		50 = religion_romangreek.8
			
		100 = religion_persia.2
		100 = religion_persia.3
		100 = religion_persia.4
	
		25 = religion_indian.1 		# Ruler become ascet
		100 = religion_indian.2
		100 = religion_indian.6
		100 = religion_indian.8
				
		100 = religion_celtic.1
		100 = religion_celtic.2
		
		100 = religion.1
		100 = religion.2	
		100 = religion.3
		25 = religion.4 	# cybele cult
		100 = religion.8
		
		100 = rome.1
		100 = rome.2
		
		100 = sparta.2
		100 = sparta.3
		100 = sparta.4
		
		100 = arabia.1
		
		100 = carthage.6
		100 = carthage.9
		
		100 = egypt.1
		
		50 = china.2
		100 = china.3
		100 = china.4
		100 = china.5
		100 = china.6
		
		25 = greek.11
		50 = greek.12
		
		100 = india.6
		100 = india.7
		100 = india.8
		
		100 = babylon.5
		100 = babylon.6
		100 = babylon.7
		
		50 = slavic.1
		100 = slavic.31
		30 = slavic.2
		40 = slavic.3
		70 = slavic.4
		
		70 = religion.14
		60 = religion.15
		60 = religion.16
		
		1000 = 0
	}
}

on_thri_yearly_pulse_2 = {
		random_events = {
		
			100 = republic.1
			100 = republic.2
			100 = republic.4
			100 = republic.5
			25 = republic.6		# Ruler gets killed
			100 = republic.8
			100 = republic.9
			100 = republic.10
			100 = republic.11
			100 = republic.12
			50 = republic.14
			50 = elam.16
			50 = elam.17
			50 = government.1
			100 = government.2
			100 = government.3
			100 = government.4
			100 = government.5
			50 = government.6	# Ruler gets ill
			100 = government.7
			100 = government.8
			100 = government.9
			100 = government.10
			100 = government.11
			100 = government.12
			100 = government.13
			100 = government.16
			100 = government.18
			100 = government.26
			100 = government.27
			
			25 = monarchy.3 	# Heir gets killed
			100 = monarchy.4
			100 = monarchy.5
			100 = monarchy.6
			100 = monarchy.7
			100 = monarchy.8
			50 = monarchy.10
			
			100 = tribal.1
			100 = tribal.2
			100 = tribal.8
			100 = tribal.9
			100 = tribal.10
			100 = tribal.13
			100 = tribal.14
			100 = tribal.15
			100 = tribal.18
			100 = tribal.19
			100 = tribal.20
			100 = tribal.21
			100 = tribal.22
			100 = tribal.23
			100 = tribal.24
			
			50 = germania.2
			
			100 = greek_polis.6
			100 = greek_polis.7
			100 = greek_polis.8
			100 = greek_polis.9
			100 = greek_polis.10
			
			50 = advisor_event.1
			50 = advisor_event.2
			50 = advisor_event.3
			50 = advisor_event.4
			50 = advisor_event.5
			50 = advisor_event.6
			50 = advisor_event.7
			50 = advisor_event.8
			50 = advisor_event.9
			
			50 = reform.1
			50 = reform.2
			50 = reform.3
			
			100 = military.2
			100 = military.3
			100 = military.4
			100 = military.5
			100 = military.6
			100 = military.7
			100 = military.8
			50 = military.9
			100 = military.10
			
			1000 = 0
			
			100 = new_governments.16
			
	}
}

on_thri_yearly_pulse_3 = {
	# Rebellions & Estates
	random_events = {
			
			100 = elam.18
			
			50 = indian.6
			75 = indian.7
			75 = indian.701
			50 = indian.8
			50 = indian.9
			25 = indian.10
			50 = indian.14
			75 = hinduism.2
			100 = buddhism.4
			100 = jainism.4
			150 = hinduism.1
			250 = hinduism.1001
			100 = hinduism.1002
			
			1200 = 0
	}
}

on_thri_yearly_pulse_4 = {
	random_events = {
		100 = economy.2
		100 = economy.4
		60 = economy.5
		100 = economy.7
		100 = economy.8
		100 = economy.9
		100 = economy.10
		50 = economy.11
		100 = economy.12
		100 = economy.13
		100 = economy.14
			
		25 = diplomacy.3
		100 = diplomacy.5
		100 = diplomacy.7
		100 = diplomacy.9
			
		100 = subject_event.4
		
		100 = idea_event.1
		100 = idea_event.2
		100 = idea_event.3
		100 = idea_event.4
		100 = idea_event.5
		100 = idea_event.6
		100 = idea_event.7
		100 = idea_event.8
		100 = idea_event.9
		100 = idea_event.10
		100 = idea_event.11
			
		#30 = custom_religion.15
		50 = new_governments.4
		100 = new_governments.5
		100 = new_governments.1
			
		75 = new_governments.19

		#Elamite religion
		60 = elamite_religion.1
		60 = elamite_religion.2
		50 = elamite_religion.3
		100 = elamite_religion.4
		100 = elamite_religion.401
		70 = elamite_religion.402
		100 = elamite_religion.5
		100 = elamite_religion.501
		100 = elamite_religion.502
		100 = elamite_religion.6
		100 = elamite_religion.601
		100 = elamite_religion.602
		100 = elamite_religion.603
		100 = elamite_religion.604
		100 = elamite_religion.7
		100 = elamite_religion.8
		100 = elamite_religion.9
		100 = elamite_religion.10
		100 = elam.36

		1000 = 0
	}
}

on_four_year_pulse = {
	events = {
		olympia.1

		#Danda Niti Disaster Count Events
		danda_niti.1601
		danda_niti.1602
		danda_niti.17
		danda_niti.1701
		danda_niti.1702
		danda_niti.1801
		danda_niti.1901
		danda_niti.1902
		danda_niti.2301
		danda_niti.2401
		danda_niti.2501
		danda_niti.2601
	}
	random_events = {
		50 = indian.5
		50 = new_governments.2
		50 = new_governments.3

		500 = 0
	}
}

on_four_year_pulse_2 = {
	events = {
	}
	random_events = {
		50 = building_events.1
		50 = building_events.2
		50 = building_events.3
		50 = building_events.4
		50 = building_events.5
		50 = building_events.6

		600 = 0
	}
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {
}

on_five_year_pulse = {
	random_events = {
		25 = indian.11
		25 = hinduism.3
		50 = new_governments.11
		50 = new_governments.12
		50 = new_governments.17
		50 = new_governments.18
		10 = randomprovince.23
		25 = randomprovince.24
		25 = randomprovince.25
		25 = randomprovince.26
		25 = randomprovince.27
		10 = randomprovince.28
		25 = randomprovince.29
		50 = new_governments.26
		50 = indian.58
		25 = indian.59
		25 = indian.60
		25 = indian.61
		25 = slavic.9
		25 = slavic.10
		25 = slavic.11
		25 = slavic.12
		25 = slavic.13
		25 = slavic.14
		25 = slavic.15
		25 = slavic.16
		25 = slavic.17
		25 = slavic.18
		25 = slavic.19
		25 = slavic.20
		25 = slavic.21
		25 = slavic.22
		25 = slavic.23
		25 = slavic.24
		25 = slavic.25

		1300 = 0
	}
	events = {
		babylon.1
		danda_niti.29
	}
}

on_five_year_pulse_2 = {
	random_events = {
		#45 = custom_religion.13
		#45 = custom_religion.14
		#30 = custom_religion.17
		#30 = custom_religion.18
		#30 = custom_religion.19
		#30 = custom_religion.20
		#30 = custom_religion.21
		#30 = custom_religion.22
		#25 = custom_religion.23
		#25 = custom_religion.24
	}
	events = {
		slaves.1
		
	}
}

on_five_year_pulse_3 = {
}

on_five_year_pulse_4 = {
	random_events = {
		#10 = custom_religion.16
		#15 = custom_religion.25
		10 = custom_religion.3

		500 = 0
	}
}

# El Dorado
on_explore_coast = {
	random_events = {
		
	}
}
on_conquistador_empty = {
	random_events = {
		
	}
}

on_conquistador_native = {
	random_events = {
		
	}
}

on_buy_religious_reform = {
	events = {
		korean.1001
		korean.1
	}
}

on_circumnavigation = {
	events = {
		
	}
}

on_become_free_city = {
	events = {
		
	}
}

on_remove_free_city = {
	events = {
		
	}
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
	
}

on_revoke_estate_land = {
	
}

on_revoke_estate_land_ai_post = {
}
on_revoke_estate_land_post = {
}

on_grant_estate_land = {
}

on_death_has_harem = {
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
	
}

# country
on_gain_great_power_status = {
}

# country
on_lose_great_power_status = {
}

# province
on_province_religion_converted = {
	owner = { add_patriarch_authority = 0.01 }
}

# province
on_province_culture_converted = {
	province_event = { 
		id = syncretized_culture.2
	}
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
	# if = {
		# limit = {
			# trade_company_region = trade_company_moluccas
		# }
		# FROM = {	
			# if = {
				# limit = {
					# ai = no
					# NOT = { check_variable = { which = religion_propagated_in_moluccas value = 1 } }
				# }
				# set_variable = {
					# which = religion_propagated_in_moluccas value = 1
				# }
			# }
			# else_if = {
				# limit = {
					# ai = no
					# check_variable = { which = religion_propagated_in_moluccas value = 1 }
					# NOT = { check_variable = { which = religion_propagated_in_moluccas value = 6 } }
				# }
				# change_variable = {
					# which = religion_propagated_in_moluccas value = 1
				# }
			# }
		# }
	# }
}

# province
# FROM = old owner
on_province_owner_change = {
	events = {
		new_governments.7
		#new_governments.21
	}
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

# country 
# you can add some "on_harmonized_<religion_name>" for the mod's religions

# country
on_russian_subednik = {
	
}

# country
on_russian_oprichnina = {
	add_stability = 1
}

# country
on_russian_streltsy = {
	add_army_tradition = 1
}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
	add_army_professionalism = 0.01
	events = {
		#military.10
	}
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
	
}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
}

# THIS = Province
on_janissaries_raised = {
}

on_cawa_raised = {
}

on_revolutionary_guard_raised = {
}

on_reform_enacted = {
}

on_reform_changed = {
	if = {
		limit = {
			NOT = { has_reform = greek_polis_reform }
			OR = {
				has_country_modifier = polis_tyrannis_modifier
				has_country_modifier = polis_oligarchy_modifier
				has_country_modifier = polis_democracy_modifier
			}
		}
		remove_country_modifier = polis_tyrannis_modifier
		remove_country_modifier = polis_oligarchy_modifier
		remove_country_modifier = polis_democracy_modifier
	}
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {

}

on_center_of_trade_downgrade = {

}

on_culture_promoted = {

}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	events = {
	}
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	
}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	country_event = {
		id = elam.31
	}
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {

}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	change_variable = { slaves = 0.5 }
	
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
}

# this = Released country, FROM = Releasing country
on_country_released = {
	THIS = {
		add_legitimacy = 100
		add_republican_tradition = 100
		add_devotion = 100
		add_horde_unity = 100
		add_meritocracy = 100
	}
}

# ROOT = province, FROM = country
on_trade_good_changed = {
}

# this = country
on_loan_repaid = {
}

# this = country
on_rebels_break_country = {
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
}

# this = country
on_pre_dip_advisor_fired = {
}

# this = country
on_pre_mil_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {
}

# this = country
on_post_dip_advisor_fired = {
}

# this = country
on_post_mil_advisor_fired = {
}

# this = new client state, from = parent country
on_create_client_state = {
    country_event = {
		id = government.36
	}
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	events = {
		lucania.5
		korean.10
		tribal.31
		athen.8
		lucania.11
		indian.64
		korean.14
		greek.102
	}
}

on_country_creation = {
}

#1.31

on_great_project_constructed = {
}

on_extend_regency = {
}

on_federation_leader_change = {
	if = {
		limit = { tag = FROM }
		disband_federation = THIS
	}
	else = {
		# New strongest member becomes the new federation leader
		set_federation_leader = THIS
	}
}

#FROM = country pillaged, ROOT = country doing the pillaging
on_pillaged_capital = {
}

#FROM = country dev was transferred from, ROOT = country doing the transferring
on_transfer_development = {
}

on_colonial_type_change = {
}

on_estate_led_regency = {
}

on_estate_led_regency_surpassed = {
}

on_extended_regency = {
}

on_estate_removed = {
}

on_colonist_boosting_colony = {
	hidden_effect = {
		if = {
			limit = {
				OR = {
					religion = noreligion
					#test if colonists outnumber natives
					variable_arithmetic_trigger = {
						custom_tooltip = colonysize_is_larger_than_nativesize_tt
						export_to_variable = {
							which = vab_colonysize
							value = trigger_value:colonysize
						}
						export_to_variable = {
							which = vab_nativesize
							value = trigger_value:native_size
						}
						check_variable = {
							which = vab_colonysize
							which = vab_nativesize
						}
					}
					is_in_capital_area = yes
					NOT = {
						OR = {
							has_dlc = "Dharma"
							has_dlc = "Wealth of Nations"
						}
					}
				}
			}
			change_religion = FROM
		}
		if = {
			limit = {
				OR = {
					culture = noculture
					#test if colonists outnumber natives
					variable_arithmetic_trigger = {
						custom_tooltip = colonysize_is_larger_than_nativesize_tt
						export_to_variable = {
							which = vab_colonysize
							value = trigger_value:colonysize
						}
						export_to_variable = {
							which = vab_nativesize
							value = trigger_value:native_size
						}
						check_variable = {
							which = vab_colonysize
							which = vab_nativesize
						}
					}
					is_in_capital_area = yes
					NOT = {
						OR = {
							has_dlc = "Dharma"
							has_dlc = "Wealth of Nations"
						}
					}
				}
			}
			change_culture = FROM
			change_original_culture = FROM
		}
	}
}
