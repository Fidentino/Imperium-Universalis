namespace = population_capacity

########################################################################################
# PROVINCE CAPACITY - Rural, Urban and Upper
########################################################################################
province_event = {
	id = population_capacity.1		# This is the OLD version (october'21). NEW version (march'22) is number 23. Will be moved later
	title = "population_capacity.1.t"
	desc = "population_capacity.1.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	# will fire after what may have changed population, every two years
	
	
	immediate = {
		# HARD BASE, province size. Basically the natural limit to sustain people in this province
		set_variable = { which = rural_capacity which = prov_size }
		multiply_variable = { which = rural_capacity value = 2 } # aprox will be 20.000 farmers for a plot of 1.500 sqkm (40x40km, two days travel by foot)
		
		##### MODIFIERS
		## Weather, winters, etc. Winters will have the option to be "avoidable" if enough Institutions / technology is used in this province. 
		# 	- siege_engineering_institution / cast_iron_institution: mitigates Mild Winter
		# 	- blast_furnace_institution / advanced_hydraulics_institution: mitigates Normal Winter
		#	- engineering_architecture_institution: mitigates most of Several
		
		# Winters
		trigger_switch = {
			on_trigger = has_winter
			mild_winter = {
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { rural_capacity = 0.9 } 
				}
				else = { multiply_variable = { rural_capacity = 0.6 } }
			}
			normal_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { rural_capacity = 0.7 }
				}
				else = { multiply_variable = { rural_capacity = 0.35 } }
			}
			severe_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					multiply_variable = { rural_capacity = 0.8 }
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { rural_capacity = 0.5 } 
				}
				else = { multiply_variable = { rural_capacity = 0.25 } }
			}
		}
		
		
		# arid
		if = { limit = { has_climate = arid } 		multiply_variable = { rural_capacity = 0.6 } }
		# tropical
		if = { limit = { has_climate = tropical } 	multiply_variable = { rural_capacity = 0.8 } }
		# Monsoons: reduces total capacity (less places to securely farm), but provides extra growth (more humidity). 
		trigger_switch = {
			on_trigger = has_province_flag
			flag_mild_monsoon = { multiply_variable = { rural_capacity = 0.80 } }	# but +10% growth
			flag_normal_monsoon = { multiply_variable = { rural_capacity = 0.60 } }	# 20% growth
			flag_severe_monsoon = { multiply_variable = { rural_capacity = 0.40 } }	# 30% growth
		}
		
		## TERRAINS
		# As in climates, there will be an "improvement" be it either with buildings, or technology. This way some province that may not be fully exploited until an initial investment has been done to it
		
		trigger_switch = {
			on_trigger = has_terrain
			# Farmlands
			farmlands = {
				if = { 		limit = { has_building = hospital } 	multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } 		multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } 	multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { 											multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			rome_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			carthage_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			athen_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			neapel_t = {
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			byzantion_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			syracuse_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			milet_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			ephesus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			corinth_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			sardis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			tyros_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			halicarnassus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			argos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			# Grasslands
			grasslands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.20 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.10 } }
				# else, 1.00
			}
			steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			savannah = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			# Drier lands
			mediterranean = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			drylands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			ninive_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			# Coastals
			coastline = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			naxos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			steep_coast = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			patara_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			coastal_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.65 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			
			# Forests
			woods = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.65 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			forest = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			forest_steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			mangrove = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			jungle = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.50 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.45 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			
			# Mountains
			hills = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			jerusalem_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.15 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.90 } }
				else = { multiply_variable = { which = rural_capacity value = 0.75 } }
			}
			mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			glacier = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			fertile_highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			parsa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			
			# Rivers and oasis
			oasis = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			siwa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			wetlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			marsh = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.45 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			floodplains = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			alluvial_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.6 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.3 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			susa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.6 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.3 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			mesopotamian_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			babil_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			uruk_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			nile_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			memphis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.4 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 2.1 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.8 } }
				else = { multiply_variable = { which = rural_capacity value = 1.5 } }
			}
			waset_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			elephantine_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			desert_river = {
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.20 } }
				# else 1.00
			}
			assur_t = {
			
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.20 } }
				# else 1.00
			}
			# Deserts
			desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			salt_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			desert_mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			arctic = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			
			
		}
		
		
		# BUILDINGS - now the only buildings that can increase "by itself" is agri infastructure (terrain) and land development
		#	New for 3.0.2: land reclamation % effect is now read through the modifier local_development_cost, as is any other modifier. Easier!
		
		if = {		limit = { has_province_modifier = land_reclamation_5 } change_variable = { rural_capacity = 5 } }
		else_if = { limit = { has_province_modifier = land_reclamation_4 } change_variable = { rural_capacity = 4 } }
		else_if = { limit = { has_province_modifier = land_reclamation_3 } change_variable = { rural_capacity = 3 } }
		else_if = { limit = { has_province_modifier = land_reclamation_2 } change_variable = { rural_capacity = 2 } }
		else_if = { limit = { has_province_modifier = land_reclamation_1 } change_variable = { rural_capacity = 1 } }
		
		export_to_variable = { which = PG_dev_extra value = modifier:local_development_cost }		# as 0.2 for +20%
		change_variable = { PG_dev_extra = 1 }														# now 1.2, will modify things
		multiply_variable = { which = rural_capacity which = PG_dev_extra }							# rural pop raised
		
		# FISHING BLOCK - depending on province size (and coastal), and coastal buildings
		# Fishing done after land reclamation, as land reclamation should affect only agricultural activities, not fishing
		if = {		
			limit = { has_port = yes check_variable = { prov_size = 7 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 3 } 
		}
		else_if = {	
			limit = { has_port = yes check_variable = { prov_size = 4 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 2 } 
		}
		else_if = {	
			limit = { has_port = yes check_variable = { prov_size = 1 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 1 } 
		}
		if = {
			limit = { OR = { has_terrain = coastline has_terrain = naxos_t 
				has_terrain = steep_coast has_terrain = patara_t has_terrain = coastal_desert } } 
			change_variable = { rural_fishermen = 1.5 }
		}
		trigger_switch = {	
			on_trigger = has_building
			harbor_district = { change_variable = { rural_fishermen = 2 } multiply_variable = { rural_fishermen = 1.35 } }
			big_harbor = { 		change_variable = { rural_fishermen = 2 } multiply_variable = { rural_fishermen = 1.15 } }
			small_harbor = { 	change_variable = { rural_fishermen = 1 } }
		}
		if = { limit = { has_province_flag = PG_river_port } multiply_variable = { rural_fishermen = 0.50 }	}	# River ports, -50% effect
		
		change_variable = { which = rural_capacity which = rural_fishermen }
		set_variable = { which = rural_fishermen value = 0 }
		
		
		# TRANSFER TO "URBAN" POPULATION - where Urban means "connected" enough to the normal markets, like exports, cash-crops, etc
		set_variable = { which = rural_transfer value = 0 }	# reset, in case no buildings available
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	set_variable = { which = rural_transfer value = 0.1 } }
			big_bath = { 	set_variable = { which = rural_transfer value = 0.3 } }
		}
		trigger_switch = {
			on_trigger = has_building		
			small_water_irrigation = { 	change_variable = { rural_transfer = 0.1 } }
			big_water_irrigation = { 	change_variable = { rural_transfer = 0.2 } }
			big_estate = { 		change_variable = { rural_transfer = 0.5 } }
			
			craftsman = { 		change_variable = { rural_transfer = 0.1 } }
			small_workshop = { 	change_variable = { rural_transfer = 0.2 } }
			artisan_district = { change_variable = { rural_transfer = 0.5 } }
			
			quarry = { 			change_variable = { rural_transfer = 0.1 } }
			small_mine = { 		change_variable = { rural_transfer = 0.2 } }
			big_mine = { 		change_variable = { rural_transfer = 0.5 } }
		}
		# Transfer rural population to "urbanized" pops, that work in export-oriented products, and counted as commoners
		set_variable = { which = rural_exports which = rural_capacity }
		multiply_variable = { which = rural_exports which = rural_transfer }	# moved initial population to urban
		set_variable = { which = rural_transfer which = rural_capacity }		# rural transfer will be used later, based on the pre-transfer rural pop
		subtract_variable = { which = rural_capacity which = rural_exports }	# aaand they are gone from the fields
		
		
		
		# Special province modifiers
			# Nothing added so far
		
		# In case a province does not count at least 1; usually deserts and such
		if = { limit = { NOT = { check_variable = { rural_capacity = 1 } } } 		set_variable = { which = rural_capacity value = 1 } }
		
		######
		# 	RURAL GROWTH RATIO
		######
		export_to_variable = { which = rural_pop value = base_manpower }
		set_variable = { which = rural_growth which = rural_capacity }
		divide_variable = { which = rural_growth which = rural_pop }
		
		# MODIFIERS that apply at the end
		
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = rural_growth value = 0.20 } }	# this will (probably) offset the growth ++ due to pop loss
			60 = { multiply_variable = { which = rural_growth value = 0.35 } }
			40 = { multiply_variable = { which = rural_growth value = 0.50 } }
			15 = { multiply_variable = { which = rural_growth value = 0.75 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = rural_growth value = 1.15 } }
			50 = { multiply_variable = { which = rural_growth value = 1.10 } }
			25 = { multiply_variable = { which = rural_growth value = 1.05 } }
		}
		# Stability increases total growth, flat bonus
		if = { 		limit = { owner = { stability = 3 } } change_variable = { which = rural_growth value = 0.20 } }
		else_if = { limit = { owner = { stability = 2 } } change_variable = { which = rural_growth value = 0.15 } }
		else_if = { limit = { owner = { stability = 1 } } change_variable = { which = rural_growth value = 0.10 } }
		
		# Monsoons both reduces capacity but increases growth
		trigger_switch = {
			on_trigger = has_province_flag
			flag_severe_monsoon = { multiply_variable = { rural_growth = 1.2 } }
			flag_normal_monsoon = { multiply_variable = { rural_growth = 1.175 } }
			flag_mild_monsoon = { multiply_variable = { rural_growth = 1.15 } }
		}
		
		# Weather effects
		if = { 		limit = { has_province_modifier = pg_food_surplus } multiply_variable = { rural_growth = 1.30 } }
		else_if = { limit = { has_province_modifier = pg_food_shortage } multiply_variable = { rural_growth = 0.80 } }
		
		
	######################
	## URBAN CAPACITY
	######################
	
			set_variable = { which = urban_capacity value = 0 }	# Cleanup
			# Remember: we already have the urban capacity from the transferred ones, before. Stored as "rural exports"
		
		## BUILDINGS
		# A "basic" flat bonus is granted, and then certain prov_types are better (to be added later on).
		
		trigger_switch = {
			on_trigger = has_building
			small_harbor = { 	change_variable = { which = urban_capacity value = 0.1 } }
			big_harbor = { 		change_variable = { which = urban_capacity value = 0.3 } }
			harbor_district = { change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_shipyard = { change_variable = { which = urban_capacity value = 0.3 } }
			big_shipyard = { change_variable = { which = urban_capacity value = 0.7 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_market = { 	change_variable = { which = urban_capacity value = 0.1 } }
			medium_market = { 	change_variable = { which = urban_capacity value = 0.3 } }
			great_market = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_army_camp = { 			change_variable = { which = urban_capacity value = 0.2 } }
			small_military_settlement = { 	change_variable = { which = urban_capacity value = 0.5 } }
			big_military_settlement = { 	change_variable = { which = urban_capacity value = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			gravel_road = { 	change_variable = { which = urban_capacity value = 0.1 } }
			paved_road = { 		change_variable = { which = urban_capacity value = 0.3 } }
			imperial_road = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			shrine = { 			change_variable = { which = urban_capacity value = 0.2 } }
			small_temple = { 	change_variable = { which = urban_capacity value = 0.5 } }
			great_temple = { 	change_variable = { which = urban_capacity value = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_theater = { 	change_variable = { which = urban_capacity value = 0.3 } }
			great_theater = { 	change_variable = { which = urban_capacity value = 0.6 } }
			huge_theater = { 	change_variable = { which = urban_capacity value = 1.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			taxman = { 			change_variable = { which = urban_capacity value = 0.2 } }
			tax_collector = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = urban_capacity value = 0.2 } }
			government_palace = { 	change_variable = { which = urban_capacity value = 0.4 } }
			government_district = { change_variable = { which = urban_capacity value = 0.6 } }
		}
		trigger_switch = {						# Soldiers live somewhere, don't you think?
			on_trigger = has_building
			small_city_walls = { change_variable = { which = urban_capacity value = 0.4 } }
			large_city_walls = { change_variable = { which = urban_capacity value = 1.0 } }
			fortress_building = { change_variable = { which = urban_capacity value = 1.8 } }
			border_garrison = { change_variable = { which = urban_capacity value = 0.2 } }
		}
		
		trigger_switch = {
			on_trigger = has_building
			great_library = { 		change_variable = { which = urban_capacity value = 1.5 } }
			imperial_palace = { 	change_variable = { which = urban_capacity value = 1.0 } }
			mathematician_academy = { change_variable = { which = urban_capacity value = 1.0 } }
			philosophers_academy = { change_variable = { which = urban_capacity value = 1.0 } }
			military_academy = { 	change_variable = { which = urban_capacity value = 1.0 } }
			palace_garden = { 		change_variable = { which = urban_capacity value = 0.5 } }
			library = { 			change_variable = { which = urban_capacity value = 0.3 } }
			
		}
		
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = urban_capacity value = 1 } # +1 urban and +1 upper, for all capitals
		}
		
		
		# END OF BUILDINGS and other "flat" capacity increases
		
		################################
		## THE TRADE POWER MULTIPLIER ##
		################################
		
		# We will have a multiplier depending on how profitable trade is, depending the prov_type
		export_to_variable = { which = urban_trade_power value = province_trade_power }
		
		# correction: remove Mercantilism effect
		
		# Trade power points are less effective later on. A quick chart looks like this:
			# 1-10 	: 3.3 each (up to 3 pops)
			# 10-22 : 4 each (+3 pops)
			# 22-42 : 5 each (+4 pops)
			# 42-60 : 6 each (+3 pops)
			# >60 	: 10 each
			# So a trade power of 30 will be: 10/3.3 + 12/4 + 6/5 = 3 + 3 + 1.2 = 7.2
			# Trade 120: 10/3.3 + 12/4 + 20/5 + 18/6 + (120-10-12-20-18)/10 = 3 + 3 + 4 + 3 + 60/10 = 19
		if = {
			limit = { check_variable = { urban_trade_power = 60 } }
			change_variable = { urban_capacity = 13 }
			subtract_variable = { urban_trade_power = 60 } 
			divide_variable = { urban_trade_power = 10 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 42 } }
			change_variable = { urban_capacity = 10 } 
			subtract_variable = { urban_trade_power = 42 } 
			divide_variable = { urban_trade_power = 6 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 22 } }
			change_variable = { urban_capacity = 6 } 
			subtract_variable = { urban_trade_power = 22 } 
			divide_variable = { urban_trade_power = 5 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 10 } }
			change_variable = { urban_capacity = 3 } 
			subtract_variable = { urban_trade_power = 10 } 
			divide_variable = { urban_trade_power = 4 } 
		}
		else_if = { limit = { NOT = { check_variable = { urban_trade_power = 0.1 } } } set_variable = { which = urban_trade_power value = 0.1 } }
		else = { divide_variable = { urban_trade_power = 3.3 } }
		
		change_variable = { which = urban_capacity which = urban_trade_power }	# add the remaining trade power (applies to all)
		set_variable = { which = urban_trade_power value = 0 }
		
		#####
		#	RELATIVE % MODIFIERS
		#####
		
		multiply_variable = { which = urban_capacity which = PG_dev_extra }			# urban pop raised. Done before coming values from rural
		
		
		# COMMONER POPULATION COMING FROM RURAL
		
		# The formula that will link BASE rural population (prior to the transfer to urban. So, everyone living off the fields). Basically a proportion of rural to urban, depending of the available farming technology. The more food the rural population create, the more "surplus" population that can dedicate to do anything else and is less dragged to the land - the mod definition of commoner or urban population. 
		
		if = { 	
			limit = { engineering_architecture_institution = 100 }
			divide_variable = { which = rural_transfer 	value = 3 } 	# +33% food surplus
		}
		else_if = { 	
			limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 4 } 	# +25% food surplus
		}
		else_if = {
			limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 5 } 	# +20% food surplus
		}
		else = { divide_variable = { which = rural_transfer 	value = 10 } }	# +10% food surplus (very low)
		change_variable = { which = urban_capacity which = rural_transfer } set_variable = { which = rural_transfer value = 0 }
		
		# Rural Exports (that % of rural population working as if they were commoners, in export-oriented goods. Think of villas, latifundiae, etc). 
		change_variable = { which = urban_capacity which = rural_exports } set_variable = { which = rural_exports value = 0 }
		
		
		
		# Other province modifiers
			# (nothing)
		
		# 	URBAN GROWTH RATIO
		export_to_variable = { which = urban_pop value = base_production }
			# if no pop. It will grow very fast, unless there is not enough room for the first one. 
		if = {
			limit = { NOT = { check_variable = { urban_capacity = 1 } } }	
			set_variable = { which = urban_pop value = 1.0 } 
		}
		else_if = {
			limit = { NOT = { check_variable = { urban_pop = 1 } } }	
			set_variable = { which = urban_pop value = 0.25 }
		}
		set_variable = { which = urban_growth which = urban_capacity } divide_variable = { which = urban_growth which = urban_pop }
		
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = urban_growth value = 0.10 } }
			60 = { multiply_variable = { which = urban_growth value = 0.25 } }
			40 = { multiply_variable = { which = urban_growth value = 0.50 } }
			15 = { multiply_variable = { which = urban_growth value = 0.70 } }
			
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = urban_growth value = 1.15 } }
			50 = { multiply_variable = { which = urban_growth value = 1.10 } }
			25 = { multiply_variable = { which = urban_growth value = 1.05 } }
		}
		
		# Stability increases total growth
		if = { 		limit = { owner = { stability = 3 } } change_variable = { which = urban_growth value = 0.20 } }
		else_if = { limit = { owner = { stability = 2 } } change_variable = { which = urban_growth value = 0.15 } }
		else_if = { limit = { owner = { stability = 1 } } change_variable = { which = urban_growth value = 0.10 } }
		
		#########
		# 	UPPER CAPACITY
		#########
		
		# Add the 10% of previous population. Basically the exported rural and urban pops. 
		
		set_variable = { which = upper_capacity which = rural_pop } change_variable = { which = upper_capacity which = urban_pop }
		set_variable = { which = rural_pop value = 0 } 				set_variable = { which = urban_pop value = 0 }
		divide_variable = { which = upper_capacity value = 10 }
			# This block will create at least a 10% uppers out of the total CURRENT population (so that it never gets much higher than the underlying population). Remember that high amount of upper pops without commoners will not sustain by itself, as uppers consume trade power generated by commoners, and the same for rural populations. Without enough support, they may hinder a province severily, despite the increased trade %. 
		
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = upper_capacity value = 0.2 } }
			government_palace = { 	change_variable = { which = upper_capacity value = 0.4 } }
			government_district = { change_variable = { which = upper_capacity value = 1.0 } }
		}
		trigger_switch = {
			on_trigger = has_building
			library = { 				change_variable = { which = upper_capacity value = 0.2 } }
			great_library = { 			change_variable = { which = upper_capacity value = 1.0 } }
			mathematician_academy = { 	change_variable = { which = upper_capacity value = 1.0 } }
			philosophers_academy = { 	change_variable = { which = upper_capacity value = 1.0 } }
			military_academy = { 		change_variable = { which = upper_capacity value = 1.0 } }
			palace_garden = { 			change_variable = { which = upper_capacity value = 0.5 } }
			imperial_palace = { 		change_variable = { which = upper_capacity value = 1.5 } }
		}
		
		trigger_switch = {
			on_trigger = has_building
			shrine = { 			change_variable = { which = upper_capacity value = 0.2 } }
			small_temple = { 	change_variable = { which = upper_capacity value = 0.4 } }
			great_temple = { 	change_variable = { which = upper_capacity value = 1.0 } }
		}
		
		# IMPERIAL CAPITAL
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = upper_capacity value = 1 } # +1 urban and +1 upper, for all capitals
		}
		
		# IMPERIAL CAPITAL
		# Will be affected by 1) rank, 2) total development
		# % by rank are added here as well, as they are needed to be done AFTER the other flat bonuses. May be too high, could be changed in the future
		if = { 		limit = { is_capital = yes owner = { total_development = 5000 } } change_variable = { upper_capacity = 7 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 3500 } } change_variable = { upper_capacity = 6 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 2500 } } change_variable = { upper_capacity = 5 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 2000 } } change_variable = { upper_capacity = 4 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 1500 } } change_variable = { upper_capacity = 3 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 1000 } } change_variable = { upper_capacity = 2 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 500 } }  change_variable = { upper_capacity = 1.5 } }
		
		
		#########################
		#	MODIFIERS			#
		#########################
		# The effect that affect ALL capacity, added at the bottom
		
		# Urban amenities (small flat bonus to urban, but quite big effect on upper population)
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	multiply_variable = { which = upper_capacity value = 1.10 } }
			big_bath = { 	multiply_variable = { which = upper_capacity value = 1.25 } }
		}
		
		# Devastation, will reduce as a simple scale 1 to 99% malus. Prosperity increases up to 15%
		
		# 	UPPER GROWTH RATIO
		export_to_variable = { which = upper_pop value = base_tax }
		if = { 
			limit = { NOT = { check_variable = { which = upper_pop value = 1 } } }
			set_variable = { which = upper_pop value = 0.2 } 
			# bigger maximum ratio than urban pop. Also notice that most events of employment or upper promotion will need a modifier of 5, which means at least a 1 "healthy" upper pop capacity is needed to have a place here
		}
		set_variable = { which = upper_growth which = upper_capacity } divide_variable = { which = upper_growth which = upper_pop }
		set_variable = { which = upper_pop value = 0 }
		
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = upper_growth value = 0.10 } }
			60 = { multiply_variable = { which = upper_growth value = 0.25 } }
			40 = { multiply_variable = { which = upper_growth value = 0.50 } }
			15 = { multiply_variable = { which = upper_growth value = 0.70 } }
			5 = {  multiply_variable = { which = upper_growth value = 0.80 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = upper_growth value = 1.15 } }
			50 = { multiply_variable = { which = upper_growth value = 1.10 } }
			25 = { multiply_variable = { which = upper_growth value = 1.05 } }
		}
		
		# Stability increases total growth
		if = { 		limit = { owner = { stability = 3 } } change_variable = { upper_growth = 0.20 } }
		else_if = { limit = { owner = { stability = 2 } } change_variable = { upper_growth = 0.15 } }
		else_if = { limit = { owner = { stability = 1 } } change_variable = { upper_growth = 0.10 } }
		
		###
		#	OTHER EFFECTS, outside upper capacity
		###
		# check whether max capacity has increased and no further need for the "Pause" modifier (added at startup event, to avoid losing the initial population)
		if = { limit = { check_variable = { which = rural_capacity which = initial_rural } } remove_province_modifier = rural_pause }
		if = { limit = { check_variable = { which = urban_capacity which = initial_urban } } remove_province_modifier = urban_pause }
		
		# Find how much information is flowing to this province. Will allow for long-range migration
		PG_update_inforange = yes		
		
		# Clean variables and leave only one decimal place
		divide_variable = { rural_capacity = 100 } multiply_variable = { rural_capacity = 100 }		# 4.567 / 100 = 4.5 x 100 = 4.500. Max 3 decimals
		divide_variable = { urban_capacity = 100 } multiply_variable = { urban_capacity = 100 }
		divide_variable = { upper_capacity = 100 } multiply_variable = { upper_capacity = 100 }
		divide_variable = { rural_growth = 100 } multiply_variable = { rural_growth = 100 }
		divide_variable = { urban_growth = 100 } multiply_variable = { urban_growth = 100 }
		divide_variable = { upper_growth = 100 } multiply_variable = { upper_growth = 100 }
		export_to_variable = { which = PS_rur_now value = base_manpower }
		export_to_variable = { which = PS_urb_now value = base_production }
		export_to_variable = { which = PS_upp_now value = base_tax }
		
		
		
	}
	
	
	option = {
		name = "population_capacity.1.a"
			# ok, all done inside the immediate
	}
	
}
# population_capacity.X is empty. It will contain the "simplified" pop capacity calculation, for horde countries once it is back to the mod. 


country_event = {				# BI-YEARLY EVENT, UPDATES ESSENTIAL POPGROWTH VALUES
	id = population_capacity.2
	title = "population_capacity.2.t"
	desc = "population_capacity.2.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes		# Happens ALWAYS, either having Popgrowth turned or on off. It does many other things
	
	immediate = {
		hidden_effect = {
			every_owned_province = {
				if = {
					limit = { has_global_flag = popgrowth_running }
					# PG: Pop Growth (capacities)
					province_event = { id = population_capacity.23 }	# Pop capacities for rural, urban, upper
					if = {
						limit = {
							OR = { has_province_modifier = PG_commoner001 has_province_modifier = PG_commoner002 }
							check_variable = { PG_com_cap = 1 }
						}
						remove_province_modifier = PG_commoner001 remove_province_modifier = PG_commoner002
					}
				}
				# SS: Sieges and repairs
				if = { limit = { has_building = building_ruins } SS_cleanup_old_ruins = yes } # checks if any is older than 5 years, deletes it
				
				# DE Dynamic Economy
				# Postponed to after 3.0 release
				#if = { limit = { had_province_flag = { flag = DR_2years days = 700 } } DR_run_extractions = yes DR_update_wildlife = yes }
				
				# other corrective things
				trigger_switch = {
					on_trigger = has_province_modifier 
					land_reclamtion_5 = { 
						add_permanent_province_modifier = { name = land_reclamation_5 duration = -1 }
						remove_province_modifier = land_reclamtion_5
					}
					land_reclamtion_4 = { 
						add_permanent_province_modifier = { name = land_reclamation_4 duration = -1 }
						remove_province_modifier = land_reclamtion_4
					}
					land_reclamtion_3 = { 
						add_permanent_province_modifier = { name = land_reclamation_3 duration = -1 }
						remove_province_modifier = land_reclamtion_3
					}
					land_reclamtion_2 = { 
						add_permanent_province_modifier = { name = land_reclamation_2 duration = -1 }
						remove_province_modifier = land_reclamtion_2
					}
					land_reclamtion_1 = { 
						add_permanent_province_modifier = { name = land_reclamation_1 duration = -1 }
						remove_province_modifier = land_reclamtion_1
					}
				
				
				}
				
				# Update naval forcelimit nerfs, in inland and river ports
				if = { 		limit = { has_port = no }									 PG_inland_navalsize = yes }
				else_if = { limit = { has_port = yes has_province_flag = PG_river_port } PG_riverport_navalsize = yes }
				
			}
		}
	
	
	}
	option = {
		name = "population_capacity.2.a"
		
	}
	
}

# SUBMOD Menu
country_event = {
	id = population_capacity.3
	title = "population_capacity.3.t"
	desc = "population_capacity.3.d"
	picture = celebration_priestess
	
	is_triggered_only = yes

	option = {								
		name = "population_capacity.3.1"	# Initiate for first time. Adds flag "initiated", startup.2 sets flag "running". Init + running
		ai_chance = { factor = 100 }
		trigger = { has_global_flag = popgrowth_vanilla }
		country_event = { id = startup.2 }
	}
	option = {								
		name = "population_capacity.3.2"	# Apply the submod again
		ai_chance = { factor = 100 }
		trigger = { has_global_flag = popgrowth_initiated 	has_global_flag = popgrowth_vanilla }
		set_global_flag = popgrowth_running
		clr_global_flag = popgrowth_vanilla
	}
	option = {								
		name = "population_capacity.3.3"	# Disable the submod
		trigger = {  has_global_flag = popgrowth_initiated has_global_flag = popgrowth_running }
		clr_global_flag = popgrowth_running
		set_global_flag = popgrowth_vanilla
	}
	option = {
		name = "population_capacity.3.4"	# Update all pop capacity values for my country
		trigger = { has_global_flag = popgrowth_running }
		country_event = { id = population_capacity.2 }
	}
	option = {
		name = "population_capacity.3.5"	# Open the Analysis and Statistics menu
		trigger = { has_global_flag = popgrowth_initiated }
		country_event = { id = popgrowth_stats.1 }
	}
	
	option = {
		name = "population_capacity.3.6"	# Keep playing with vanilla mechanics
		trigger = { has_global_flag = popgrowth_vanilla }
		
	}
	option = {
		name = "population_capacity.3.6"	# Show menu for automated migration options and variables
		trigger = { has_global_flag = popgrowth_running }
		country_event = { id = population_capacity.8 }
	}
	option = {
		name = "population_capacity.3.7"	# Nothing, go back
		ai_chance = { factor = 100 }
		trigger = { has_global_flag = popgrowth_running }
		
	}
	option = {
		name = "population_capacity.3.7"	# I don't know if it may happen, but there is a possible lack of options, this should work
		ai_chance = { factor = 100 }
		trigger = { 
			NOT = { has_global_flag = popgrowth_running }
			NOT = { has_global_flag = popgrowth_vanilla }
			
		}
		
	}
	
}

######
#	MIGRATION event, rural to X
######
province_event = {
	id = population_capacity.4
	title = "population_capacity.4.t"
	desc = "population_capacity.4.d"
	picture = peasant_woman
	#hidden = no
	
	trigger = {
		base_manpower = 2 												# does not let the last rural pop to leave, obviously
		has_global_flag = popgrowth_running								# to only affect if the popgrowth mechanic is active
		NOT = { check_variable = { which = rural_growth value = 100 } }	# negative growth, anything under 1.00 (100%)
		NOT = { has_province_modifier = rural_pause }					# that condition that initial values are kept for 100 years
		owner = { has_country_flag = PG_migration_manual }				# new, to allow the automatic event happening
	}
	
	
	mean_time_to_happen = {
		months = 240 	# twenty years to move for a stabilized population, will be affected by modifiers
		
		# Reasons to leave. Devastation will NOT appear here, since it already influences rural_growth. 
		modifier = {
			factor = 4.0
			check_variable = { which = urban_growth which = PG_trb_grow }	# is not supposed to fire if there is still work in the city, same province
		}
		modifier = {	factor = 0.65	check_variable = { PG_trb_grow = 60 }	NOT = { check_variable = { PG_trb_grow = 80 } }	}
		modifier = {	factor = 0.40	check_variable = { PG_trb_grow = 50 }	NOT = { check_variable = { PG_trb_grow = 60 } }	}
		modifier = {	factor = 0.25	check_variable = { PG_trb_grow = 40 }	NOT = { check_variable = { PG_trb_grow = 50 } }	}
		modifier = {
			factor = 0.05 				# one year
			NOT = { check_variable = { PG_trb_grow = 40 } }	# they must be really miserable...
		}
		
	}
	
	immediate = {
		hidden_effect = {
			# BLOCK 1: define migration size. 
			# Roughly 20% of rural pops, enough to change the rural_capacity. 1 if under 5, 2 up to 10, 3 after 10. 
			if = { 		limit = { base_manpower = 10 }	set_variable = { which = mig_size value = 3 } }
			else_if = { limit = { base_manpower = 5 } 	set_variable = { which = mig_size value = 2 } }
			else = {									set_variable = { which = mig_size value = 1 } }
			
			# BLOCK 2: Discover which provinces it may go. 
			# Priorities; everything within travel distance for this province (travel distance = function of direct or indirect trade power)
			#	A very high center of trade (lv4 or higher), then a regional one (lv2), then any other province with rural place. 
			
			if = { 		limit = { check_variable = { PG_info_range = 50 } } PG_find_target_province = { range = 2000 } }
			else_if = { limit = { check_variable = { PG_info_range = 30 } } PG_find_target_province = { range = 1200 } }
			else_if = { limit = { check_variable = { PG_info_range = 20 } } PG_find_target_province = { range = 800 } }
			else_if = { limit = { check_variable = { PG_info_range = 10 } } PG_find_target_province = { range = 500 } }
			else_if = { limit = { check_variable = { PG_info_range = 5 } }  PG_find_target_province = { range = 300 } }
			else_if = { limit = { check_variable = { PG_info_range = 2 } }  PG_find_target_province = { range = 150 } }
			else = { 														PG_find_target_province = { range = 75 } }
			
			set_variable = { which = PG_provid which = prov_id }
		}
	}
	
	#####
	#	OPTIONS - BY DEFAULT (with no money cost for the player. AI will choose them)
	#####
	
	# 1: the simplest one: LET THEM LEAVE to the province targeted before. 
	option = {
		name = "population_capacity.4.1"
		trigger = { NOT = { has_province_flag = PG_starvation_start } }
		ai_chance = { 
			factor = 50 
			modifier = { factor = 1.2 owner = { check_variable = { var_slaves_pop_ratio = 20 } } }	# AI: enough slaves
			modifier = { factor = 1.3 owner = { NOT = { adm_power = 300 } } }
		}
		event_target:PG_target = { 		# move pops and recalculate capacity in the target province
			# not using the while sintax, so that in the option values it can be seen
			if = {
				limit = { check_variable = { urban_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_urban = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_urban = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_urban = { no = 1 } }
			}
			else_if = {
				limit = { check_variable = { rural_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_rural = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_rural = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_rural = { no = 1 } }
			}
			province_event = { id = population_capacity.1 }
		}
		province_event = { id = population_capacity.1 }		# recalculate in the origin province
		owner = { change_variable = { PG_migr_auto = 1 } }	# counter to allow automation. After three times it will allow it
		# If someone modifies the code, remember to copy it in the following option as well!
	}
	option = {	# Same, but activates the automatic
		name = "population_capacity.4.1"
		highlight = yes
		trigger = { NOT = { has_province_flag = PG_starvation_start } owner = { check_variable = { PG_migr_auto = 3 } } }
		ai_chance = { factor = 0 }
		event_target:PG_target = { 		# move pops and recalculate capacity in the target province
										# not using the while sintax, so that values can be seen by the player
			if = {
				limit = { check_variable = { urban_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_urban = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_urban = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_urban = { no = 1 } }
			}
			else_if = {
				limit = { check_variable = { rural_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_rural = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_rural = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_rural = { no = 1 } }
			}
			province_event = { id = population_capacity.1 }
		}
		province_event = { id = population_capacity.1 }		# recalculate in the origin province
		owner = { set_variable = { which = PG_migr_auto value = 0 } set_country_flag = PG_migration_automated set_country_flag = PG_migr_leave }
	}
	
	# 2: Convince them to stay, mana loss due to issuing of new laws. (spend dip points)
	option = {
		name = "population_capacity.4.2" 
		trigger = { NOT = { has_province_flag = PG_starvation_start } }
		ai_chance = { 
			factor = 30 
			modifier = { factor = 0.5	owner = { check_variable = { which = var_slaves_pop_ratio value = 20 } } }
			modifier = { factor = 2.0	owner = { adm_power = 300 } }
		}
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_dip_power = -15 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_dip_power = -10 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_dip_power = -5 } }
		owner = { change_variable = { PG_migr_auto = 1 } }	# counter to allow automation. After three times it will allow it
	}
	option = {
		name = "population_capacity.4.2" 
		highlight = yes
		trigger = { NOT = { has_province_flag = PG_starvation_start } owner = { check_variable = { PG_migr_auto = 3 } } }
		ai_chance = { factor = 0 }
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_dip_power = -15 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_dip_power = -10 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_dip_power = -5 } }
		owner = { set_variable = { which = PG_migr_auto value = 0 } set_country_flag = PG_migration_automated set_country_flag = PG_migr_stay }
	}
	# 3. Nasty option: spend military but risk a revolt of the population being-converted to slaves (spend mil points)
	option = {
		name = "population_capacity.4.3" # enslave them. Expect much unrest, but may be necessary in money-hungry countries
		ai_chance = {
			factor = 20 
			modifier = { factor = 0.5	owner = { NOT = { mil_power = 100 } } }
			modifier = { factor = 0 	devastation = 10 }
			modifier = { factor = 2.5 	owner = { NOT = { check_variable = { var_slaves_pop_ratio = 20 } } } }
		}
		add_province_modifier = { name = PG_pop_enslaved duration = 730 } 	# +4 unrest
		add_nationalism = 5		add_devastation = 5							# 5 nationalism for the resistence; 5 devastation due to risk of famine
		
		# not using the while sintax, so that values can be seen by the player
		if = {
			limit = { check_variable = { mig_size = 3 } }
			add_base_manpower = -3 change_variable = { PS_rur_imp = 3 } 	# PS = "pop growth statistics", will appear in the province interaction
			owner = { add_mil_power = -15 change_variable = { slaves = 30 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 2 } }
			add_base_manpower = -2 change_variable = { PS_rur_imp = 2 } 
			owner = { add_mil_power = -10 change_variable = { slaves = 20 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 1 } }
			add_base_manpower = -1 change_variable = { PS_rur_imp = 1 } 
			owner = { add_mil_power = -5 change_variable = { slaves = 10 } }
		}
		province_event = { id = population_capacity.1 }
		owner = { change_variable = { PG_migr_auto = 1 } }	# counter to allow automation. After three times it will allow it
	}
	option = {
		name = "population_capacity.4.3" # enslave them. Expect much unrest, but may be necessary in money-hungry countries
		highlight = yes
		trigger = { owner = { check_variable = { PG_migr_auto = 3 } } }
		ai_chance = { factor = 0 }
		add_province_modifier = { name = PG_pop_enslaved duration = 730 } 	# +4 unrest
		add_nationalism = 5		add_devastation = 5							# 5 nationalism for the resistence; 5 devastation due to risk of famine
		
		# not using the while sintax, so that values can be seen by the player
		if = {
			limit = { check_variable = { mig_size = 3 } }
			add_base_manpower = -3 change_variable = { PS_rur_imp = 3 } 	# PS = "pop growth statistics", will appear in the province interaction
			owner = { add_mil_power = -15 change_variable = { slaves = 30 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 2 } }
			add_base_manpower = -2 change_variable = { PS_rur_imp = 2 } 
			owner = { add_mil_power = -10 change_variable = { slaves = 20 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 1 } }
			add_base_manpower = -1 change_variable = { PS_rur_imp = 1 } 
			owner = { add_mil_power = -5 change_variable = { slaves = 10 } }
		}
		province_event = { id = population_capacity.1 }
		owner = { set_variable = { which = PG_migr_auto value = 0 } set_country_flag = PG_migration_automated set_country_flag = PG_migr_imprison }
	}
	
	# 4. Starving: there is nothing we can do. It can snowball very fast!!
	option = {
		name = "population_capacity.4.4"
		trigger = { has_province_flag = PG_starvation_start }
		ai_chance = {   factor = 30 	 modifier = { factor = 2.5	NOT = { owner = { treasury = 30 } } } }
		
		# not using the while sintax, so that values can be seen by the player
		if = { 		limit = { check_variable = { mig_size = 3 } } add_base_manpower = -3 change_variable = { PS_rur_strv = 3 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } add_base_manpower = -2 change_variable = { PS_rur_strv = 2 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } add_base_manpower = -1 change_variable = { PS_rur_strv = 1 } }
		
		# get ready for trouble
		add_devastation = 20	add_province_modifier = { name = PG_pop_starved duration = 730 } 	# +4 unrest
		every_neighbor_province = { add_devastation = 5 }
		province_event = { id = population_capacity.1 }
		# This one will never be automatable, it is very hard..
	}
	
	# 5. Pay for more food. Lose money and mana (adm power), and no devastation happened
	option = {
		name = "population_capacity.4.5" 
		trigger = { has_province_flag = PG_starvation_start }
		ai_chance = {  factor = 50 	modifier = { factor = 2.0	owner = { treasury = 30 } } }
		
		# not using the while sintax, so that values can be seen by the player
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_adm_power = -12 add_treasury = -30 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_adm_power = -8  add_treasury = -20 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_adm_power = -4  add_treasury = -10 } }
		owner = { change_variable = { PG_migr_auto = 1 } }	# counter to allow automation. After three times it will allow it
	}
	option = {
		name = "population_capacity.4.5" 
		highlight = yes
		trigger = { has_province_flag = PG_starvation_start 	owner = { check_variable = { PG_migr_auto = 3 } } }
		ai_chance = { factor = 0 }
		
		# not using the while sintax, so that values can be seen by the player
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_adm_power = -12 add_treasury = -30 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_adm_power = -8  add_treasury = -20 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_adm_power = -4  add_treasury = -10 } }
		owner = { set_variable = { which = PG_migr_auto value = 0 } set_country_flag = PG_migration_automated set_country_flag = PG_migr_pay }
	}
	
	
	####
	#	PLAYER-DIRECTED OPTIONS (resettle, to capital, etc). This movement will be paid!! Up to 100 gold, it's a lot
	####
	# 6. Move them to our capital (if there is space). First urban, then rural
	option = {
		name = "population_capacity.4.6"		
		trigger = { owner = { capital_scope = { OR = { check_variable = { urban_growth = 1.2 } check_variable = { rural_growth = 1.2 } } } } }
		ai_chance = { factor = 0 }
		
		random_province = {
			limit = {
				owned_by = PREV		is_capital = yes		NOT = { has_province_modifier = PG_new_pop }
				OR = { check_variable = { urban_growth = 1.2 } check_variable = { rural_growth = 1.2 } }
			}
			mig_dist_cost = yes
			if = {
				limit = { check_variable = { urban_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_urban = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_urban = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_urban = { no = 1 } }
			}
			else_if = {
				limit = { check_variable = { rural_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_rural = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_rural = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_rural = { no = 1 } }
			}
			province_event = { id = population_capacity.1 } 
		}
		province_event = { id = population_capacity.1 } 
		# no automation
	}
	
	# 7. Move them to another prosperous city (urban growth >1.2 + center of trade lv1 at least)
	option = {
		name = "population_capacity.4.7"		
		ai_chance = { factor = 0 }
		trigger = {  
			any_province = {
				owned_by = PREV 								check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop } 	province_has_center_of_trade_of_level = 1
			}
		}
		random_province = {
			limit = {
				owned_by = PREV 								check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = PG_new_pop } 	province_has_center_of_trade_of_level = 1
			}
			mig_dist_cost = yes
			if = {
				limit = { check_variable = { urban_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_urban = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_urban = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_urban = { no = 1 } }
			}
			province_event = { id = population_capacity.1 }
		}
		province_event = { id = population_capacity.1 }
		# no automation
	}
	
	# 8. Move them to other agricultural lands
	option = {
		name = "population_capacity.4.8"		
		trigger = {  
			any_province = {
				owned_by = PREV 								check_variable = { rural_growth = 2.0 }
				NOT = { has_province_modifier = PG_new_pop } 	
			}
		}
		random_province = {
			limit = {
				owned_by = PREV 								check_variable = { rural_growth = 2.0 }
				NOT = { has_province_modifier = PG_new_pop } 	
			}
			mig_dist_cost = yes
			if = {
				limit = { check_variable = { rural_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_rural = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_rural = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_rural = { no = 1 } }
			}
			province_event = { id = population_capacity.1 }
		}
		province_event = { id = population_capacity.1 }
		# no automation
	}
	
	
	after = {
		# clean up
		set_variable = { which = mig_size value = 0 }
		clr_province_flag = PG_starvation_start
		
		# Has the country flag really been added? Check general flag, and specific flags (there must be only one)
		if = { limit = { owner = { has_country_flag = PG_migration_automated } } owner = { clr_country_flag = PG_migration_manual } }
		if = { 
			limit = { owner = { has_country_flag = PG_migr_leave } } 
			owner = { clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_imprison clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_pay } } 
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_imprison clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_imprison } } 
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_stay } } 
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_imprison } 
		}
		
	}
	
}
# The automatic event for migration. Same MTTH, trigger adds the automated flag, but simplified options and only one will fire. 
province_event = {
	id = population_capacity.5
	title = "population_capacity.5.t"
	desc = "population_capacity.5.d"
	picture = peasant_woman
	#hidden = no
	
	trigger = {
		base_manpower = 2 												# does not let the last rural pop to leave, obviously
		has_global_flag = popgrowth_running								# to only affect if the popgrowth mechanic is active
		NOT = { check_variable = { which = rural_growth value = 1 } }	# negative growth, anything under 1.00
		NOT = { has_province_modifier = rural_pause }					# that condition that initial values are kept for 100 years
		owner = { has_country_flag = PG_migration_automated }			# new, to allow the automatic event happening
	}
	
	
	mean_time_to_happen = {
		months = 240 	# twenty years to move for a stabilized population, will be affected by modifiers
		
		# Reasons to leave. Devastation will NOT appear here, since it already influences rural_growth. 
		modifier = {
			factor = 3.0
			check_variable = { which = urban_growth which = rural_growth }	# is not supposed to fire if there is still work in the city, same province
		}
		modifier = {	factor = 0.65	check_variable = { rural_growth = 0.60 }	NOT = { check_variable = { rural_growth = 0.80 } }	}
		modifier = {	factor = 0.40	check_variable = { rural_growth = 0.50 }	NOT = { check_variable = { rural_growth = 0.60 } }	}
		modifier = {	factor = 0.25	check_variable = { rural_growth = 0.40 }	NOT = { check_variable = { rural_growth = 0.50 } }	}
		modifier = {
			factor = 0.05 				# one year
			NOT = { check_variable = { rural_growth = 0.40 } }	# they must be really miserable...
		}
		
	}
	
	immediate = {
			# BLOCK 1: define migration size. 
			# Roughly 20% of rural pops, enough to change the rural_capacity. 1 if under 5, 2 up to 10, 3 after 10. 
			if = { 		limit = { base_manpower = 10 }	set_variable = { which = mig_size value = 3 } }
			else_if = { limit = { base_manpower = 5 } 	set_variable = { which = mig_size value = 2 } }
			else = {									set_variable = { which = mig_size value = 1 } }
			
			# BLOCK 2: Discover which provinces it may go. 
			# Priorities; everything within travel distance for this province (travel distance = function of direct or indirect trade power)
			#	A very high center of trade (lv4 or higher), then a regional one (lv2), then any other province with rural place. 
			
			if = { 		limit = { check_variable = { PG_info_range = 50 } } PG_find_target_province = { range = 2000 } }
			else_if = { limit = { check_variable = { PG_info_range = 30 } } PG_find_target_province = { range = 1200 } }
			else_if = { limit = { check_variable = { PG_info_range = 20 } } PG_find_target_province = { range = 800 } }
			else_if = { limit = { check_variable = { PG_info_range = 10 } } PG_find_target_province = { range = 500 } }
			else_if = { limit = { check_variable = { PG_info_range = 5 } }  PG_find_target_province = { range = 300 } }
			else_if = { limit = { check_variable = { PG_info_range = 2 } }  PG_find_target_province = { range = 150 } }
			else = { 														PG_find_target_province = { range = 75 } }
			
		# Anti-CTD measure: make sure there is only ONE flag present. This is also added in the after of the manual event, but who knows. 
		if = { 
			limit = { owner = { has_country_flag = PG_migr_leave } has_province_flag = PG_starvation_start } 
			owner = { clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_imprison clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_pay } NOT = { has_province_flag = PG_starvation_start } } 
			owner = { set_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison }
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_leave } } 
			owner = { clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_imprison clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_pay } } 
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_imprison clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_imprison } } 
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay } 
		}
		else_if = { 
			limit = { owner = { has_country_flag = PG_migr_stay } }
			owner = { clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_imprison } 
		}
		else_if = { 
			limit = { has_province_flag = PG_starvation_start }
			owner = { set_country_flag = PG_migr_pay clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison }
		}
		else = { 
			owner = { set_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison }
		}
		
	}
	
	#####
	#	OPTIONS
	#####
	
	# 1: Leave the province
	option = {
		name = "population_capacity.5.1"
		trigger = { owner = { has_country_flag = PG_migr_leave } }
		ai_chance = { factor = 100 }
		event_target:PG_target = {
			if = {
				limit = { check_variable = { urban_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_urban = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_urban = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_urban = { no = 1 } }
			}
			else_if = {
				limit = { check_variable = { rural_growth = 1.2 } }
				if = { 		limit = { PREV = { check_variable = { mig_size = 3 } } } mig_rural_to_rural = { no = 3 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 2 } } } mig_rural_to_rural = { no = 2 } }
				else_if = { limit = { PREV = { check_variable = { mig_size = 1 } } } mig_rural_to_rural = { no = 1 } }
			}
			province_event = { id = population_capacity.1 }
		}
		province_event = { id = population_capacity.1 }		# recalculate in the origin province
		set_variable = { which = PG_var_leave which = mig_size } 
		owner = { change_variable = { which = PG_var_leave which = PREV } }  set_variable = { which = PG_var_leave value = 0 }
	}
	
	# 2: Convince them to stay (spend DIP points)
	option = {
		name = "population_capacity.5.2" 
		trigger = { owner = { has_country_flag = PG_migr_stay } }
		ai_chance = { factor = 100 }
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_dip_power = -15 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_dip_power = -10 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_dip_power = -5 } }
		set_variable = { which = PG_var_stay which = mig_size } 
		owner = { change_variable = { which = PG_var_stay which = PREV } }  set_variable = { which = PG_var_stay value = 0 }
	}
	# 3. Enslave (spend MIL points)
	option = {
		name = "population_capacity.5.3" 
		trigger = { owner = { has_country_flag = PG_migr_imprison } }
		ai_chance = { factor = 100 }
		add_province_modifier = { name = PG_pop_enslaved duration = 730 } 	
		add_nationalism = 5		add_devastation = 5							
		
		# not using the while sintax, so that values can be seen by the player
		if = {
			limit = { check_variable = { mig_size = 3 } }
			add_base_manpower = -3 change_variable = { PS_rur_imp = 3 } 	
			owner = { add_mil_power = -15 change_variable = { slaves = 30 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 2 } }
			add_base_manpower = -2 change_variable = { PS_rur_imp = 2 } 
			owner = { add_mil_power = -10 change_variable = { slaves = 20 } }
		}
		else_if = {
			limit = { check_variable = { mig_size = 1 } }
			add_base_manpower = -1 change_variable = { PS_rur_imp = 1 } 
			owner = { add_mil_power = -5 change_variable = { slaves = 10 } }
		}
		province_event = { id = population_capacity.1 }
		set_variable = { which = PG_var_imprison which = mig_size } 
		owner = { change_variable = { which = PG_var_imprison which = PREV } }  set_variable = { which = PG_var_imprison value = 0 }
	}
	
	# 4. Starving. Not in the automated event
	
	# 5. Pay for more food. Spend ADM points
	option = {
		name = "population_capacity.5.4" 
		trigger = { owner = { has_country_flag = PG_migr_pay } }
		ai_chance = { factor = 100 }
		# not using the while sintax, so that values can be seen by the player
		if = { 		limit = { check_variable = { mig_size = 3 } } owner = { add_adm_power = -12 add_treasury = -30 } }
		else_if = { limit = { check_variable = { mig_size = 2 } } owner = { add_adm_power = -8  add_treasury = -20 } }
		else_if = { limit = { check_variable = { mig_size = 1 } } owner = { add_adm_power = -4  add_treasury = -10 } }
		set_variable = { which = PG_var_pay which = mig_size } 
		owner = { change_variable = { which = PG_var_pay which = PREV } }  set_variable = { which = PG_var_pay value = 0 }
	}
	
	
	after = {
		# clean up
		set_variable = { which = mig_size value = 0 }
		clr_province_flag = PG_starvation_start
		if = { limit = { owner = { has_country_flag = PG_migration_automated } } owner = { clr_country_flag = PG_migration_manual } }
		
	}
	
}

##################################################
# POPULATION CAPACITY CALCULATION, DEBUG MODE
# 	Same as pop capacity.1, but shows a breakdown of what constitutes growth. Only activated if asked by the player
#	All information that is displayed is done one tab to the right, and starts by PGD_xxx (PopGrowth Display)
# 	Most code comments from the main event are gone, but I've added some numerical examples. 
##################################################
# Old version. See event 24 for the updated version
province_event = {			
	id = population_capacity.6
	title = "population_capacity.6.t"
	desc = "population_capacity.6.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	# will fire after what may have changed the rural population, every two years
	
	
	immediate = { 
		# Hard base, province size
		set_variable = { which = rural_capacity which = prov_size }
		multiply_variable = { which = rural_capacity value = 2 } 
			set_variable = { which = PGD_rur_base which = rural_capacity }							# Size 4 x 2 = 8 rurals
		
		##### MODIFIERS
		# Winters
		trigger_switch = {
			on_trigger = has_winter
			mild_winter = {
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.9 } 		set_variable = { which = PGD_rur_winter value = -0.1 } 
				}
				else = { multiply_variable = { which = rural_capacity value = 0.6 } set_variable = { which = PGD_rur_winter value = -0.4 } }
			}
			normal_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.7 } 		set_variable = { which = PGD_rur_winter value = -0.3 } 
				}
				else = { multiply_variable = { which = rural_capacity value = 0.35 } set_variable = { which = PGD_rur_winter value = -0.65 } }
			}
			severe_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.8 } 		set_variable = { which = PGD_rur_winter value = -0.2 } 
				}
				else_if = { 
					limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.5 } 		set_variable = { which = PGD_rur_winter value = -0.5 } 
				}
				else = { multiply_variable = { which = rural_capacity value = 0.25 } set_variable = { which = PGD_rur_winter value = -0.75 } }
			}
		}
			
			multiply_variable = { which = PGD_rur_winter which = rural_capacity }			# assume mild winter, -40%. 8 x 0,6 = 4.8, -3.2 loss
		
		# arid
		if = { 
			limit = { has_climate = arid } 
			multiply_variable = { which = rural_capacity value = 0.6 }
			set_variable = { which = PGD_rur_arid value = -0.4 } 
			multiply_variable = { which = PGD_rur_arid which = PGD_rur_base }			# If happens, -40%. 8 x 0,6 = 4.8, -3.2 loss
		}
		# tropical
		if = { 
			limit = { has_climate = tropical } 
			multiply_variable = { which = rural_capacity value = 0.8 }
			set_variable = { which = PGD_rur_tropical value = -0.2 } 
			multiply_variable = { which = PGD_rur_tropical which = PGD_rur_base }			# If happens, -20%. 8 x 0,8 = 6.4, -1.6 loss
		}
		# Monsoons. If it does not work (may only work once the monsoon is there), it will be done through province flat
		trigger_switch = {
			on_trigger = has_province_flag
			flag_mild_monsoon = { multiply_variable = { rural_capacity = 0.80 } set_variable = { which = PGD_rur_monsoon value = -0.2 } }
			flag_normal_monsoon = { multiply_variable = { rural_capacity = 0.60 } set_variable = { which = PGD_rur_monsoon value = -0.4 } }
			flag_severe_monsoon = { multiply_variable = { rural_capacity = 0.40 } set_variable = { which = PGD_rur_monsoon value = -0.6 } }
		}
		multiply_variable = { which = PGD_rur_monsoon which = PGD_rur_base }
		
		## TERRAINS
		
		set_variable = { which = PGD_rur_preterrain which = rural_capacity }			# Stick it again. 4.8 (8 - 3.2 winter)
		set_variable = { which = PGD_rur_terr_clean which = PGD_rur_base }				# In case no winter/arid effect is applied
		trigger_switch = {
			on_trigger = has_terrain
			# Farmlands
			farmlands = {
				if = { 		limit = { has_building = hospital } 	multiply_variable = { rural_capacity = 1.5 } }
				else_if = { limit = { has_building = medicus } 		multiply_variable = { rural_capacity = 1.4 } }
				else_if = { limit = { has_building = herbalist } 	multiply_variable = { rural_capacity = 1.2 } }
				else = { 											multiply_variable = { rural_capacity = 1.1 } }
			}
			rome_t = { 
				if = { 		limit = { has_building = hospital } 	multiply_variable = { rural_capacity = 1.5 } }
				else_if = { limit = { has_building = medicus } 		multiply_variable = { rural_capacity = 1.4 } }
				else_if = { limit = { has_building = herbalist } 	multiply_variable = { rural_capacity = 1.2 } }
				else = { 											multiply_variable = { rural_capacity = 1.1 } }
				
			}
			carthage_t = { 
				if = { 		limit = { has_building = hospital } 	multiply_variable = { rural_capacity = 1.5 } }
				else_if = { limit = { has_building = medicus } 		multiply_variable = { rural_capacity = 1.4 } }
				else_if = { limit = { has_building = herbalist } 	multiply_variable = { rural_capacity = 1.2 } }
				else = { 											multiply_variable = { rural_capacity = 1.1 } }
			}
			athen_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			neapel_t = {
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			byzantion_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			syracuse_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			milet_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			ephesus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			corinth_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			sardis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			tyros_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			halicarnassus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			argos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			# Grasslands
			grasslands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.20 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.10 } }
				# else, 1.00
			}
			steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			savannah = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			# Drier lands
			mediterranean = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			drylands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			ninive_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			# Coastals
			coastline = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			naxos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			steep_coast = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			patara_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			coastal_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.65 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			
			# Forests
			woods = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.65 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			forest = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			forest_steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			mangrove = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			jungle = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.50 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.45 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			
			# Mountains
			hills = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			jerusalem_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.15 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.90 } }
				else = { multiply_variable = { which = rural_capacity value = 0.75 } }
			}
			mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			glacier = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			fertile_highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			parsa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			
			# Rivers and oasis
			oasis = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			siwa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			wetlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			marsh = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.45 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			floodplains = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			alluvial_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.6 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.3 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			susa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.6 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.3 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			mesopotamian_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			babil_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			uruk_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			nile_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			memphis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.4 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 2.1 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.8 } }
				else = { multiply_variable = { which = rural_capacity value = 1.5 } }
			}
			waset_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			elephantine_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			desert_river = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.20 } }
				# else 1.00
			}
			assur_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.20 } }
				# else 1.00
			}
			# Deserts
			desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			salt_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			desert_mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			arctic = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			
			
		}
			
			# for the example, imagine effect = -20%. Current capacity: 4.8 x 0.8 = 3.84. (pre-winter = 8)
			
			set_variable = { which = PGD_rur_terrain which = rural_capacity }			# 3.84
			subtract_variable = { which = PGD_rur_terrain which = PGD_rur_preterrain }	# 3.84 - 4.8 = 0.96 due to terrain
			
			# effect of having the hospital (top building for irrigation/health, which improves capacity a lot)
			
			trigger_switch = {
				on_trigger = has_terrain
				farmlands = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				rome_t = { 				set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				carthage_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				athen_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				neapel_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				byzantion_t = { 		set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				syracuse_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				milet_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				ephesus_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				corinth_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				sardis_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				tyros_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				halicarnassus_t = { 	set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				argos_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				grasslands = { 			set_variable = { which = PGD_hosp_multiplier value = 1.25 } }
				steppe = { 				set_variable = { which = PGD_hosp_multiplier value = 0.95 } }
				savannah = { 			set_variable = { which = PGD_hosp_multiplier value = 0.95 } }
				mediterranean = { 		set_variable = { which = PGD_hosp_multiplier value = 1.10 } }
				drylands = { 			set_variable = { which = PGD_hosp_multiplier value = 1.1 } }
				ninive_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.1 } }
				coastline = { 			set_variable = { which = PGD_hosp_multiplier value = 0.95 } }
				naxos_t = { 			set_variable = { which = PGD_hosp_multiplier value = 0.95 } }
				steep_coast = { 		set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				patara_t = { 			set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				coastal_desert = { 		set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				woods = { 				set_variable = { which = PGD_hosp_multiplier value = 0.90 } }
				forest = { 				set_variable = { which = PGD_hosp_multiplier value = 0.90 } }
				forest_steppe = { 		set_variable = { which = PGD_hosp_multiplier value = 0.90 } }
				mangrove = { 			set_variable = { which = PGD_hosp_multiplier value = 0.90 } }
				jungle = { 				set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				hills = { 				set_variable = { which = PGD_hosp_multiplier value = 1.10 } }
				jerusalem_t = { 		set_variable = { which = PGD_hosp_multiplier value = 1.25 } }
				mountain = { 			set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				glacier = { 			set_variable = { which = PGD_hosp_multiplier value = 0.80 } }
				highlands = { 			set_variable = { which = PGD_hosp_multiplier value = 1.10 } }
				fertile_highlands = { 	set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				parsa_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				oasis = { 				set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				siwa_t = { 				set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				wetlands = { 			set_variable = { which = PGD_hosp_multiplier value = 0.95 } }
				marsh = { 				set_variable = { which = PGD_hosp_multiplier value = 1.05 } }
				floodplains = { 		set_variable = { which = PGD_hosp_multiplier value = 1.5 } }
				alluvial_plain = { 		set_variable = { which = PGD_hosp_multiplier value = 1.6 } }
				susa_t = { 				set_variable = { which = PGD_hosp_multiplier value = 1.6 } }
				mesopotamian_plain = { 	set_variable = { which = PGD_hosp_multiplier value = 1.8 } }
				babil_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.8 } }
				uruk_t = { 				set_variable = { which = PGD_hosp_multiplier value = 1.8 } }
				nile_plain = { 			set_variable = { which = PGD_hosp_multiplier value = 2.0 } }
				memphis_t = { 			set_variable = { which = PGD_hosp_multiplier value = 2.0 } }
				waset_t = { 			set_variable = { which = PGD_hosp_multiplier value = 2.0 } }
				elephantine_t = { 		set_variable = { which = PGD_hosp_multiplier value = 2.0 } }
				desert_river = { 		set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				assur_t = { 			set_variable = { which = PGD_hosp_multiplier value = 1.40 } }
				desert = { 				set_variable = { which = PGD_hosp_multiplier value = 0.60 } }
				salt_desert = { 		set_variable = { which = PGD_hosp_multiplier value = 0.60 } }
				desert_mountain = { 	set_variable = { which = PGD_hosp_multiplier value = 0.60 } }
				arctic = { 				set_variable = { which = PGD_hosp_multiplier value = 0.60 } }
			}
			set_variable = { which = PGD_rur_terr_max which = PGD_rur_base }
			multiply_variable = { which = PGD_rur_terr_max which = PGD_hosp_multiplier }
			subtract_variable = { which = PGD_rur_terr_max which = PGD_rur_base }			# The effect of maximum terrain building
		
		
			
		# BUILDINGS - now the only buildings that can increase "by itself" is agri infastructure (terrain) and land development
		
		if = {		
			limit = { has_province_modifier = land_reclamation_5 } 
			change_variable = { rural_capacity = 5 } 
			set_variable = { which = PGD_reclam_abs value = 5 } set_variable = { which = PGD_reclam_perc value = 0.25 }
		}
		else_if = { 
			limit = { has_province_modifier = land_reclamation_4 } 
			change_variable = { rural_capacity = 4 } 
			set_variable = { which = PGD_reclam_abs value = 4 } set_variable = { which = PGD_reclam_perc value = 0.20 }
		}
		else_if = { 
			limit = { has_province_modifier = land_reclamation_3 } 
			change_variable = { rural_capacity = 3 } 
			set_variable = { which = PGD_reclam_abs value = 3 } set_variable = { which = PGD_reclam_perc value = 0.15 }
		}
		else_if = { 
			limit = { has_province_modifier = land_reclamation_2 } 
			change_variable = { rural_capacity = 2 } 
			set_variable = { which = PGD_reclam_abs value = 2 } set_variable = { which = PGD_reclam_perc value = 0.10 }
		}
		else_if = { 
			limit = { has_province_modifier = land_reclamation_1 } 
			change_variable = { rural_capacity = 1 } 
			set_variable = { which = PGD_reclam_abs value = 1 } set_variable = { which = PGD_reclam_perc value = 0.05 }
		}
			# Prepare amount to be multiplied with total modifier
			set_variable = { which = PGD_rurmod_before which = rural_capacity }	
			
		export_to_variable = { which = PG_dev_extra value = modifier:local_development_cost } change_variable = { PG_dev_extra = 1 }
		multiply_variable = { which = rural_capacity which = PG_dev_extra }
			
			# Effect on population
			set_variable = { which = PGD_rurmod_after which = rural_capacity }
			subtract_variable = { which = PGD_rurmod_after which = PGD_rurmod_before }
			
			# Find the components of the percentage
			set_variable = { which = PGD_dev_other which = PG_dev_extra } 	subtract_variable = { PGD_dev_other = 1 }
			subtract_variable = { which = PGD_dev_other which = PGD_reclam_perc }
			multiply_variable = { PGD_dev_other = 100 } multiply_variable = { PGD_reclam_perc = 100 }
			
			
		# FISHING BLOCK - depending on province size (and coastal), and coastal buildings
		if = {		
			limit = { has_port = yes check_variable = { prov_size = 7 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 3 } 
		}
		else_if = {	
			limit = { has_port = yes check_variable = { prov_size = 4 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 2 } 
		}
		else_if = {	
			limit = { has_port = yes check_variable = { prov_size = 1 } NOT = { has_province_flag = coastal_river } } 
			set_variable = { which = rural_fishermen value = 1 } 
		}
			set_variable = { which = PGD_fishing_base which = rural_fishermen }
		
		if = {
			limit = { OR = { has_terrain = coastline has_terrain = naxos_t 
				has_terrain = steep_coast has_terrain = patara_t has_terrain = coastal_desert } } 
			change_variable = { rural_fishermen = 1.5 }		set_variable = { which = PGD_fishing_terrain value = 1.5 }
		}
		trigger_switch = {
			on_trigger = has_building
			harbor_district = { change_variable = { rural_fishermen = 2 } multiply_variable = { rural_fishermen = 1.35 } }
			big_harbor = { 		change_variable = { rural_fishermen = 2 } multiply_variable = { rural_fishermen = 1.15 } }
			small_harbor = { 	change_variable = { rural_fishermen = 1 } }
		}
		if = { 
			limit = { has_province_flag = PG_river_port } 
			multiply_variable = { rural_fishermen = 0.50 }		# River ports, -50% effect
			multiply_variable = { PGD_fishing_base = 0.50 }	
			multiply_variable = { PGD_fishing_terrain = 0.50 }
		}
		change_variable = { which = rural_capacity which = rural_fishermen }					# if size 4, terrain coastal and big harbor:
			set_variable = { which = PGD_fishing_buildings which = rural_fishermen }			# (2 + 1.5 + 2) x 1.35 = 7.425
			subtract_variable = { which = PGD_fishing_buildings which = PGD_fishing_terrain }	# of which, 2 due to base, 1.5 coastal, 3.9 buildings
			subtract_variable = { which = PGD_fishing_buildings which = PGD_fishing_base }	
		set_variable = { which = rural_fishermen value = 0 } 
		
			set_variable = { which = PGD_rural_subtotal which = rural_capacity }		
			
		# TRANSFER TO "URBAN" POPULATION - where Urban means "connected" enough to the normal markets, like exports, cash-crops, etc
		set_variable = { which = rural_transfer value = 0 }	# reset, in case no buildings available
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	set_variable = { which = rural_transfer value = 0.1 } }
			big_bath = { 	set_variable = { which = rural_transfer value = 0.3 } }
		}
		trigger_switch = {
			on_trigger = has_building		
			small_water_irrigation = { 	change_variable = { rural_transfer = 0.1 } }
			big_water_irrigation = { 	change_variable = { rural_transfer = 0.2 } }
			big_estate = { 		change_variable = { rural_transfer = 0.5 } }
			
			craftsman = { 		change_variable = { rural_transfer = 0.1 } }
			small_workshop = { 	change_variable = { rural_transfer = 0.2 } }
			artisan_district = { change_variable = { rural_transfer = 0.5 } }
			
			quarry = { 			change_variable = { rural_transfer = 0.1 } }
			small_mine = { 		change_variable = { rural_transfer = 0.2 } }
			big_mine = { 		change_variable = { rural_transfer = 0.5 } }
		}
		
			set_variable = { which = PGD_rural_transfer which = rural_transfer } multiply_variable = { PGD_rural_transfer = 100 }
		
		# Transfer rural population to "urbanized" pops
		set_variable = { which = rural_exports which = rural_capacity }
		multiply_variable = { which = rural_exports which = rural_transfer }	# moved initial population to urban
		set_variable = { which = rural_transfer which = rural_capacity }		# rural transfer will be used later, based on the pre-transfer rural pop
		subtract_variable = { which = rural_capacity which = rural_exports }	# aaand they are gone from the fields
			
			set_variable = { which = PGD_rural_total which = rural_capacity }	# if 50% -> 14.076 x 0.5 = 7.04
			set_variable = { which = PGD_urban_trans which = rural_exports }	# 7.04
		
		
		# In case a province does not count at least 1; usually deserts and such
		if = { limit = { NOT = { check_variable = { rural_capacity = 1 } } } 		set_variable = { which = rural_capacity value = 1 } }
		
		######
		# 	RURAL GROWTH RATIO
		######
		export_to_variable = { which = rural_pop value = base_manpower }
		set_variable = { which = rural_growth which = rural_capacity }
		divide_variable = { which = rural_growth which = rural_pop }		
		
			set_variable = { which = PGD_rur_growth_base which = rural_growth }
			
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { rural_growth = 0.20 } }	# this will (probably) offset the growth ++ due to pop loss
			60 = { multiply_variable = { rural_growth = 0.35 } }
			40 = { multiply_variable = { rural_growth = 0.50 } }
			15 = { multiply_variable = { rural_growth = 0.75 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { rural_growth = 1.15 } }
			50 = { multiply_variable = { rural_growth = 1.10 } }
			25 = { multiply_variable = { rural_growth = 1.05 } }
		}
			set_variable = { which = PGD_rur_growth_devastation which = rural_growth }
			subtract_variable = { which = PGD_rur_growth_devastation which = PGD_rur_growth_base }
			
		# Added to the mod as a mitigating option: Stability increased total growth
		if = { 		limit = { owner = { stability = 3 } } change_variable = { rural_growth = 0.20 } }
		else_if = { limit = { owner = { stability = 2 } } change_variable = { rural_growth = 0.15 } }
		else_if = { limit = { owner = { stability = 1 } } change_variable = { rural_growth = 0.10 } }
		
			set_variable = { which = PGD_rur_growth_stability which = rural_growth }
			subtract_variable = { which = PGD_rur_growth_stability which = PGD_rur_growth_base }
			subtract_variable = { which = PGD_rur_growth_stability which = PGD_rur_growth_devastation }
		
		trigger_switch = {
			on_trigger = has_province_flag
			flag_severe_monsoon = { multiply_variable = { rural_growth = 1.2 } }
			flag_normal_monsoon = { multiply_variable = { rural_growth = 1.175 } }
			flag_mild_monsoon = { 	multiply_variable = { rural_growth = 1.15 } }
		}
			set_variable = { which = PGD_rur_growth_monsoon which = rural_growth }
			subtract_variable = { which = PGD_rur_growth_monsoon which = PGD_rur_growth_base }
			subtract_variable = { which = PGD_rur_growth_monsoon which = PGD_rur_growth_devastation }
			subtract_variable = { which = PGD_rur_growth_monsoon which = PGD_rur_growth_stability }
		
		
		######################
		## URBAN CAPACITY
		######################
			set_variable = { which = urban_capacity value = 0 }
			
		## PRODUCTION BUILDINGS
		# Production buildings provice mostly % increase to production, and a quite good flat bonus. Usually this building will be one of the firsts to be built in a good prospective place. 
		# A "basic" flat bonus is granted, and then certain prov_types are better (productive agriculture, latifundiae, mining) and will provide a bigger flat bonus. Also these prov_types have got less powerful trade-to-urban multiplier (4 or 3.5 instead of 3)
		
		
		trigger_switch = {
			on_trigger = has_building
			small_harbor = { 	change_variable = { which = urban_capacity value = 0.1 } set_variable = { PGD_build_harbor = 0.1 } }
			big_harbor = { 		change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_harbor = 0.3 } }
			harbor_district = { change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_harbor = 0.5 } }
		}
			
			
		trigger_switch = {
			on_trigger = has_building
			small_shipyard = { change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_shipy = 0.3 } }
			big_shipyard = { change_variable = { which = urban_capacity value = 0.7 } set_variable = { PGD_build_shipy = 0.7 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_market = { 	change_variable = { which = urban_capacity value = 0.1 } set_variable = { PGD_build_market = 0.1 } }
			medium_market = { 	change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_market = 0.3 } }
			great_market = { 	change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_market = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_army_camp = { 			change_variable = { which = urban_capacity value = 0.2 } set_variable = { PGD_build_army = 0.2 } }
			small_military_settlement = { 	change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_army = 0.5 } }
			big_military_settlement = { 	change_variable = { which = urban_capacity value = 1.2 } set_variable = { PGD_build_army = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			gravel_road = { 	change_variable = { which = urban_capacity value = 0.1 } set_variable = { PGD_build_roads = 0.1 } }
			paved_road = { 		change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_roads = 0.3 } }
			imperial_road = { 	change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_roads = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			shrine = { 			change_variable = { which = urban_capacity value = 0.2 } set_variable = { PGD_build_temple = 0.2 } }
			small_temple = { 	change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_temple = 0.5 } }
			great_temple = { 	change_variable = { which = urban_capacity value = 1.2 } set_variable = { PGD_build_temple = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_theater = { 	change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_theater = 0.3 } }
			great_theater = { 	change_variable = { which = urban_capacity value = 0.6 } set_variable = { PGD_build_theater = 0.6 } }
			huge_theater = { 	change_variable = { which = urban_capacity value = 1.5 } set_variable = { PGD_build_theater = 1.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			taxman = { 			change_variable = { which = urban_capacity value = 0.2 } set_variable = { PGD_build_tax = 0.2 } }
			tax_collector = { 	change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_tax = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = urban_capacity value = 0.2 } set_variable = { PGD_build_hall = 0.2 } }
			government_palace = { 	change_variable = { which = urban_capacity value = 0.4 } set_variable = { PGD_build_hall = 0.4 } }
			government_district = { change_variable = { which = urban_capacity value = 0.6 } set_variable = { PGD_build_hall = 0.6 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_city_walls = { change_variable = { which = urban_capacity value = 0.4 } set_variable = { PGD_build_walls = 0.4 } }
			large_city_walls = { change_variable = { which = urban_capacity value = 1.0 } set_variable = { PGD_build_walls = 1.0 } }
			fortress_building = { change_variable = { which = urban_capacity value = 1.8 } set_variable = { PGD_build_walls = 1.8 } }
			border_garrison = { change_variable = { which = urban_capacity value = 0.2 } set_variable = { PGD_build_walls = 0.2 } }
		}
		
		trigger_switch = {
			on_trigger = has_building
			great_library = { 		change_variable = { which = urban_capacity value = 1.5 } set_variable = { PGD_build_monum = 1.5 } }
			imperial_palace = { 	change_variable = { which = urban_capacity value = 1.0 } set_variable = { PGD_build_monum = 1.0 } }
			mathematician_academy = { change_variable = { which = urban_capacity value = 1.0 } set_variable = { PGD_build_monum = 1.0 } }
			philosophers_academy = { change_variable = { which = urban_capacity value = 1.0 } set_variable = { PGD_build_monum = 1.0 } }
			military_academy = { 	change_variable = { which = urban_capacity value = 1.0 } set_variable = { PGD_build_monum = 1.0 } }
			palace_garden = { 		change_variable = { which = urban_capacity value = 0.5 } set_variable = { PGD_build_monum = 0.5 } }
			library = { 			change_variable = { which = urban_capacity value = 0.3 } set_variable = { PGD_build_monum = 0.3 } }
			
		}
			set_variable = { which = PGD_buildings_total which = 0 }
			change_variable = { which = PGD_buildings_total which = PGD_build_harbor }
			change_variable = { which = PGD_buildings_total which = PGD_build_shipy }
			change_variable = { which = PGD_buildings_total which = PGD_build_market }
			change_variable = { which = PGD_buildings_total which = PGD_build_army }
			change_variable = { which = PGD_buildings_total which = PGD_build_roads }
			change_variable = { which = PGD_buildings_total which = PGD_build_temple }
			change_variable = { which = PGD_buildings_total which = PGD_build_theater }
			change_variable = { which = PGD_buildings_total which = PGD_build_tax }
			change_variable = { which = PGD_buildings_total which = PGD_build_hall }
			change_variable = { which = PGD_buildings_total which = PGD_build_walls }
			change_variable = { which = PGD_buildings_total which = PGD_build_monum }
			
			
		
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = urban_capacity value = 1 } set_variable = { PGD_urb_capital = 1 } 
		}
		
		
		# END OF BUILDINGS and other "flat" capacity increases
		
		################################
		## THE TRADE POWER MULTIPLIER ##
		################################
		
		# We will have a multiplier depending on how profitable trade is, depending the prov_type
		export_to_variable = { which = urban_trade_power value = province_trade_power }
			set_variable = { which = PGD_eff_trade_power which = urban_trade_power }
			
		# correction: remove Mercantilism effect
			set_variable = { which = PGD_urb_trade value = 0 }
		
		if = {
			limit = { check_variable = { urban_trade_power = 60 } } # 3 more
			change_variable = { urban_capacity = 13 } 		change_variable = { PGD_urb_trade = 13 }
			subtract_variable = { urban_trade_power = 60 } 
			divide_variable = { urban_trade_power = 10 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 42 } } # 4 more
			change_variable = { urban_capacity = 10 } 		change_variable = { PGD_urb_trade = 10 }
			subtract_variable = { urban_trade_power = 42 } 
			divide_variable = { urban_trade_power = 6 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 22 } }	# 3 more
			change_variable = { urban_capacity = 6 } 		change_variable = { PGD_urb_trade = 6 }
			subtract_variable = { urban_trade_power = 22 } 
			divide_variable = { urban_trade_power = 5 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 10 } }	# base 3
			change_variable = { urban_capacity = 3 } 		change_variable = { PGD_urb_trade = 3 }
			subtract_variable = { urban_trade_power = 10 } 
			divide_variable = { urban_trade_power = 4 } 
		}
		else_if = { 
			limit = { NOT = { check_variable = { urban_trade_power = 0.1 } } } 
			set_variable = { which = urban_trade_power value = 0.1 } 
		}
		else = { divide_variable = { urban_trade_power = 3.3 } }
		
			change_variable = { which = PGD_urb_trade which = urban_trade_power }
		
		change_variable = { which = urban_capacity which = urban_trade_power }
		set_variable = { which = urban_trade_power value = 0 }
		
		#####
		#	RELATIVE % MODIFIERS
		#####
		
			set_variable = { which = PGD_urbmod_pre which = urban_capacity }
			
		multiply_variable = { which = urban_capacity which = PG_dev_extra }
			
			# Effect on population
			set_variable = { which = PGD_urbmod_after which = urban_capacity }
			subtract_variable = { which = PGD_urbmod_after which = PGD_urbmod_pre }
			
			
		
		# COMMONER POPULATION COMING FROM RURAL
		
		# The formula that will link BASE rural population (prior to the transfer to urban. So, everyone living off the fields). Basically a proportion of rural to urban, depending of the available farming technology. The more food the rural population create, the more "surplus" population that can dedicate to do anything else and is less dragged to the land - the mod definition of commoner or urban population. 
		
		if = { 	
			limit = { engineering_architecture_institution = 100 }
			divide_variable = { which = rural_transfer 	value = 3 } 	# +33% food surplus
		}
		else_if = { 	
			limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 4 } 	# +25% food surplus
		}
		else_if = {
			limit = { OR = { siege_engineering_institution = 100 cast_iron_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 5 } 	# +20% food surplus
		}
		else = { divide_variable = { which = rural_transfer 	value = 10 } }	# +10% food surplus (very low)
		
			set_variable = { which = PGD_urb_rursurplus which = rural_transfer }
		change_variable = { which = urban_capacity which = rural_transfer } set_variable = { which = rural_transfer value = 0 }
		
		# Rural Exports (that % of rural population working as if they were commoners, in export-oriented goods. Think of villas, latifundiae, etc). 
			set_variable = { which = PGD_urban_initial which = rural_exports }
		change_variable = { which = urban_capacity which = rural_exports } set_variable = { which = rural_exports value = 0 }
			
			
		# 	URBAN GROWTH RATIO
		export_to_variable = { which = urban_pop value = base_production }
		if = {
			limit = { NOT = { check_variable = { which = urban_pop value = 1 } } }
			set_variable = { which = urban_pop value = 0.25 }
		}
		set_variable = { which = urban_growth which = urban_capacity } divide_variable = { which = urban_growth which = urban_pop }
		
			set_variable = { which = PGD_urb_growth_base which = urban_growth }
			
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = urban_growth value = 0.10 } }
			60 = { multiply_variable = { which = urban_growth value = 0.25 } }
			40 = { multiply_variable = { which = urban_growth value = 0.50 } }
			15 = { multiply_variable = { which = urban_growth value = 0.70 } }
			
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = urban_growth value = 1.15 } }
			50 = { multiply_variable = { which = urban_growth value = 1.10 } }
			25 = { multiply_variable = { which = urban_growth value = 1.05 } }
		}
		
			set_variable = { which = PGD_urb_growth_devastation which = urban_growth }
			subtract_variable = { which = PGD_urb_growth_devastation which = PGD_urb_growth_base }
			
			
		# Stability increases total growth
		if = { 		limit = { owner = { stability = 3 } } change_variable = { which = urban_growth value = 0.20 } }
		else_if = { limit = { owner = { stability = 2 } } change_variable = { which = urban_growth value = 0.15 } }
		else_if = { limit = { owner = { stability = 1 } } change_variable = { which = urban_growth value = 0.10 } }
		
			set_variable = { which = PGD_urb_growth_stability which = urban_growth }
			subtract_variable = { which = PGD_urb_growth_stability which = PGD_urb_growth_base }
			subtract_variable = { which = PGD_urb_growth_stability which = PGD_urb_growth_devastation }
			
			
			
		
			
		
		
		#########
		# 	UPPER CAPACITY
		#########
		
		# Add the 10% of previous population. Basically the exported rural and urban pops. 
		
		set_variable = { which = upper_capacity which = rural_pop } change_variable = { which = upper_capacity which = urban_pop }
		set_variable = { which = rural_pop value = 0 } 				set_variable = { which = urban_pop value = 0 }
		
		divide_variable = { which = upper_capacity value = 10 }
			set_variable = { which = PGD_upper_base which = upper_capacity }
		
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = upper_capacity value = 0.2 } set_variable = { PGD_build_upphall = 0.2 } }
			government_palace = { 	change_variable = { which = upper_capacity value = 0.4 } set_variable = { PGD_build_upphall = 0.4 } }
			government_district = { change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_upphall = 1.0 } }
		}
		trigger_switch = {
			on_trigger = has_building
			shrine = { 			change_variable = { which = upper_capacity value = 0.2 } set_variable = { PGD_build_upptemple = 0.2 } }
			small_temple = { 	change_variable = { which = upper_capacity value = 0.4 } set_variable = { PGD_build_upptemple = 0.4 } }
			great_temple = { 	change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_upptemple = 1.0 } }
			
		}
		trigger_switch = {
			on_trigger = has_building
			imperial_palace = { 		change_variable = { which = upper_capacity value = 1.5 } set_variable = { PGD_build_uppother = 1.5 } }
			great_library = { 			change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_uppother = 1.0 } }
			mathematician_academy = { 	change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_uppother = 1.0 } }
			philosophers_academy = { 	change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_uppother = 1.0 } }
			military_academy = { 		change_variable = { which = upper_capacity value = 1.0 } set_variable = { PGD_build_uppother = 1.0 } }
			palace_garden = { 			change_variable = { which = upper_capacity value = 0.5 } set_variable = { PGD_build_uppother = 0.5 } }
			library = { 				change_variable = { which = upper_capacity value = 0.2 } set_variable = { PGD_build_uppother = 0.2 } }
			
		}
			set_variable = { which = PGD_builds_upper which = 0 }
			change_variable = { which = PGD_builds_upper which = PGD_build_upphall }
			change_variable = { which = PGD_builds_upper which = PGD_build_uppother }
			change_variable = { which = PGD_builds_upper which = PGD_build_upptemple }
		
		
		# IMPERIAL CAPITAL
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = upper_capacity value = 1 }
				set_variable = { which = PGD_upper_capbase value = 1 }
		}
		
		
		# IMPERIAL CAPITAL
		# Will be affected by 1) rank, 2) total development
		# % by rank are added here as well, as they are needed to be done AFTER the other flat bonuses. May be too high, could be changed in the future
		if = { 
			limit = { 	  is_capital = yes owner = { total_development = 5000 } } 
			change_variable = { upper_capacity = 7 } set_variable = { which = PGD_upper_capextra value = 7 }
		}
		else_if = { 
			limit = { is_capital = yes owner = { total_development = 3500 } } 
			change_variable = { upper_capacity = 6 } set_variable = { which = PGD_upper_capextra value = 6 }
		}
		else_if = { 
			limit = { is_capital = yes owner = { total_development = 2500 } } 
			change_variable = { upper_capacity = 5 } set_variable = { which = PGD_upper_capextra value = 5 }
		}
		else_if = { 
			limit = { is_capital = yes owner = { total_development = 2000 } } 
			change_variable = { upper_capacity = 4 } set_variable = { which = PGD_upper_capextra value = 4 }
		}
		else_if = { 
			limit = { is_capital = yes owner = { total_development = 1500 } } 
			change_variable = { upper_capacity = 3 } set_variable = { which = PGD_upper_capextra value = 3 }
		}
		else_if = { 
			limit = { is_capital = yes owner = { total_development = 1000 } } 
			change_variable = { upper_capacity = 2 } set_variable = { which = PGD_upper_capextra value = 2 }
		}
		else_if = {
			limit = { is_capital = yes owner = { total_development = 500 } }  
			change_variable = { upper_capacity = 1 } set_variable = { which = PGD_upper_capextra value = 1 }
		}
			
			set_variable = { which = PGD_uppersubtotal which = upper_capacity } 
		
		#########################
		#	MODIFIERS			#
		#########################
		# The effect that affect ALL capacity, added at the bottom
		
		# Urban amenities (small flat bonus to urban, but quite big effect on upper population)
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	multiply_variable = { upper_capacity = 1.10 } set_variable = { which = PGD_upperc value = 10 } }
			big_bath = { 	multiply_variable = { upper_capacity = 1.25 } set_variable = { which = PGD_upperc value = 25 } }
		}
			set_variable = { which = PGD_uppermodabs which = upper_capacity } 
			subtract_variable = { which = PGD_uppermodabs which = PGD_uppersubtotal }
		
		
		# 	UPPER GROWTH RATIO
		export_to_variable = { which = upper_pop value = base_tax }
		if = { 
			limit = { NOT = { check_variable = { which = upper_pop value = 1 } } }
			set_variable = { which = upper_pop value = 0.2 } 
			# bigger maximum ratio than urban pop. Also notice that most events of employment or upper promotion will need a modifier of 5, which means at least a 1 "healthy" upper pop capacity is needed to have a place here
		}
		set_variable = { which = upper_growth which = upper_capacity } divide_variable = { which = upper_growth which = upper_pop }
		set_variable = { which = upper_pop value = 0 }
			
			set_variable = { which = PGD_upp_growth_base which = upper_growth }
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { upper_growth = 0.10 } }
			60 = { multiply_variable = { upper_growth = 0.25 } }
			40 = { multiply_variable = { upper_growth = 0.50 } }
			15 = { multiply_variable = { upper_growth = 0.70 } }
			5 = {  multiply_variable = { upper_growth = 0.80 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { upper_growth = 1.15 } }
			50 = { multiply_variable = { upper_growth = 1.10 } }
			25 = { multiply_variable = { upper_growth = 1.05 } }
		}
			set_variable = { which = PGD_upp_growth_devastation which = upper_growth }
			subtract_variable = { which = PGD_upp_growth_devastation which = PGD_upp_growth_base }
			
		# Stability increases total growth
		if = { 		
			limit = { owner = { stability = 3 } } 
			change_variable = { upper_growth = 0.20 } set_variable = { which = PGD_upp_grow_stab value = 0.20 } 
		}
		else_if = { 
			limit = { owner = { stability = 2 } } 
			change_variable = { upper_growth = 0.15 } set_variable = { which = PGD_upp_grow_stab value = 0.15 } 
		}
		else_if = { 
			limit = { owner = { stability = 1 } } 
			change_variable = { upper_growth = 0.10 } set_variable = { which = PGD_upp_grow_stab value = 0.10 } 
		}
			
			
			
		# Other basic calculations
		export_to_variable = { which = PS_rur_now value = base_manpower }
		export_to_variable = { which = PS_urb_now value = base_production }
		export_to_variable = { which = PS_upp_now value = base_tax }
			
	}
	
	
	option = {
		name = "population_capacity.1.a"
		add_province_modifier = { name = PGD_debug_viewer duration = 30 }
	}
	
}


province_event = {				# PROVINCE INTERACTION MENU
	id = population_capacity.7
	title = "population_capacity.7.t"
	desc = "population_capacity.7.d"
	picture = forum_picture
	is_triggered_only = yes
	#hidden = yes
	#fire_only_once = yes
	
	#mean_time_to_happen = {
	#	months = 2	
	#}
	immediate = {
		hidden_effect = {
			export_to_variable = { which = PS_trb_now value = base_manpower }
			export_to_variable = { which = PS_com_now value = base_production }
			export_to_variable = { which = PS_upp_now value = base_tax }
			save_event_target_as = PGS_provtarget
		}
	}
	
	option = {
		name = "population_capacity.7.1"	# Show only detailed capacities in this province
		province_event = { id = population_capacity.24 }
		
	}
	option = {
		name = "population_capacity.7.2"	# Explain me the detailed Capacities, choose scope
		owner = { country_event = { id = popgrowth_stats.401 } }
		
	}
	option = {
		name = "population_capacity.7.3"	# Show population variations, only this province
		province_event = { id = popgrowth_stats.6 }
		
	}
	option = {
		name = "population_capacity.7.4"	# Show population variations, choose scope
		owner = { country_event = { id = popgrowth_stats.402 } }
		
	}
	option = {
		name = "population_capacity.7.5"	# Paint the map, based on this province
		owner = { country_event = { id = popgrowth_stats.5 } }
		
	}
	
	option = {
		name = "population_capacity.7.99"	# (nothing, close this)
		
	}
	
}

country_event = {				# MIGRATION AUTOMATION, OPTIONS
	id = population_capacity.8
	title = "population_capacity.8.t"
	desc = "population_capacity.8.d"
	picture = forum_picture
	is_triggered_only = yes
	#hidden = yes
	#fire_only_once = yes
	
	#mean_time_to_happen = {
	#	months = 2	
	#}
	immediate = {
		
	}
	
	option = {
		name = "population_capacity.8.1"	# Stop the automation
		trigger = { has_country_flag = PG_migration_automated }
		clr_country_flag = PG_migration_automated 	set_country_flag = PG_migration_manual
		clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison
	}
	option = {
		name = "population_capacity.8.2"	# Apply Leave
		clr_country_flag = PG_migration_automated 	clr_country_flag = PG_migration_manual set_country_flag = PG_migration_automated	# reset
		set_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison
	}
	option = {
		name = "population_capacity.8.3"	# Apply Stay
		clr_country_flag = PG_migration_automated 	clr_country_flag = PG_migration_manual set_country_flag = PG_migration_automated	# reset
		clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay set_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison
	}
	option = {
		name = "population_capacity.8.4"	# Apply Pay
		clr_country_flag = PG_migration_automated 	clr_country_flag = PG_migration_manual set_country_flag = PG_migration_automated	# reset
		clr_country_flag = PG_migr_leave set_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay clr_country_flag = PG_migr_imprison
	}
	option = {
		name = "population_capacity.8.5"	# Apply Imprison
		clr_country_flag = PG_migration_automated 	clr_country_flag = PG_migration_manual set_country_flag = PG_migration_automated	# reset
		clr_country_flag = PG_migr_leave clr_country_flag = PG_migr_pay clr_country_flag = PG_migr_stay set_country_flag = PG_migr_imprison
	}
	
	option = {
		name = "population_capacity.8.6"	# (nothing, close this)
		
	}
	
	after = {
		set_variable = { which = PG_var_leave value = 0 }		set_variable = { which = PG_var_stay value = 0 }	
		set_variable = { which = PG_var_imprison value = 0 }	set_variable = { which = PG_var_pay value = 0 }	
	}
	
}


province_event = {				# POP CAPACITY, EXPERIMENTAL THINGS
	id = population_capacity.99
	title = "population_capacity.99.t"
	desc = "population_capacity.99.d"
	picture = forum_picture
	is_triggered_only = yes
	#hidden = yes
	#fire_only_once = yes
	
	#mean_time_to_happen = {
	#	months = 2	
	#}
	immediate = {
		export_to_variable = { which = PG_nav value = base_manpower } 		multiply_variable = { PG_nav = 0.05 }
		export_to_variable = { which = PG_cnav value = base_production } 	multiply_variable = { PG_cnav = 0.10 }
		export_to_variable = { which = PG_unav value = base_tax } 			multiply_variable = { PG_unav = 0.50 }
		change_variable = { which = PG_nav which = PG_cnav } change_variable = { which = PG_nav which = PG_unav } 
		#set_variable = { which = PG_cnav value = 0 } set_variable = { which = PG_unav value = 0 } 
		
		# Now we have the amount of ships to be deducted
		if = { limit = { check_variable = { PG_nav = 16 } } 	PG_reduce_navalsize = { amt = 16 } } 
		if = { limit = { check_variable = { PG_nav = 8 } } 		PG_reduce_navalsize = { amt = 8 } } 
		if = { limit = { check_variable = { PG_nav = 4 } } 		PG_reduce_navalsize = { amt = 4 } } 
		if = { limit = { check_variable = { PG_nav = 2 } } 		PG_reduce_navalsize = { amt = 2 } } 
		if = { limit = { check_variable = { PG_nav = 1 } } 		PG_reduce_navalsize = { amt = 1 } } 
		if = { limit = { check_variable = { PG_nav = 0.5 } } 	PG_reduce_navalsize = { amt = 0.5 } } 
		if = { limit = { check_variable = { PG_nav = 0.25 } } 	PG_reduce_navalsize = { amt = 0.25 } } 
		if = { limit = { check_variable = { PG_nav = 0.125 } } 	PG_reduce_navalsize = { amt = 0.125 } } 
		set_variable = { which = PG_nav value = 0 }
		
	}
	
	option = {
		name = "population_capacity.99.1"
		add_province_modifier = { name = PG_dev_01 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.2"
		add_province_modifier = { name = PG_dev_02 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.3"
		add_province_modifier = { name = PG_dev_03 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.4"
		add_province_modifier = { name = PG_dev_04 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.5"
		add_province_modifier = { name = PG_dev_05 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.6"
		add_province_modifier = { name = PG_dev_06 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.7"
		add_province_modifier = { name = PG_dev_07 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.8"
		add_province_modifier = { name = PG_dev_08 duration = 20 }
		
	}
	option = {
		name = "population_capacity.99.9"
		owner = {
			every_owned_province = {
				export_to_variable = { which = PG_development_cost value = modifier:local_development_cost }
			}
		}
	}
	
	option = {
		name = "population_capacity.7.99"	# (nothing, close this)
		
	}
	
}





province_event = {
	id = population_capacity.23			# Population capacity heavily re-written. This is version 4, as of March 2022
	title = "population_capacity.23.t"	# v1 was Feb'19, v2 June'20, v3 (first in the public mod) Oct'21
	desc = "population_capacity.23.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	# will fire after what may have changed the rural population, every two years
	
	
	immediate = {
		# Remember that in the Popgrowth System, we start with the Rural / Urban divide, and then transform it into Tribal, Commoner and Upper population. This means that it could be that someone living in rural areas actually is working "as a commoner", because is exporting extra goods and is contributing to the state equally. 
		
		######################
		# RURAL CAPACITY, those living off the land. Will be assigned mostly to tribal pops, but also commoners. 10% to upper pops. 
		######################
		
		# HARD BASE, province size. Basically the natural limit to sustain people in this province
		set_variable = { which = rural_capacity which = prov_size }		# size into population
		
		# Rural population tend to the land in almost subsistence matter, with little to export. They are very affected by terrain type, winters (what food to grow) and weather. Terrain can be improved through buildings (rural infrastructure), winter can be mitigated somewhat (better seeds, animal husbandry, better plowing techniques -> institutions); but weather (arid and monsoons) can't be changed. 
		
		# Winters
		trigger_switch = {
			on_trigger = has_winter
			mild_winter = { 	PG_winter_rurcap = { tier3 = 1.00 tier2 = 0.90 tier1 = 0.60 } }	# tiers 1-2-3 are institutions
			normal_winter = { 	PG_winter_rurcap = { tier3 = 1.00 tier2 = 0.75 tier1 = 0.35 } }
			severe_winter = { 	PG_winter_rurcap = { tier3 = 0.75 tier2 = 0.50 tier1 = 0.35 } } # severe = normal, if no tech
		}
		if = { limit = { has_climate = arid } 		multiply_variable = { rural_capacity = 0.8 } }
		if = { limit = { has_climate = tropical } 	multiply_variable = { rural_capacity = 0.8 } }
		# Monsoons: reduces total capacity (less places to securely farm, due to flooding), but extra growth (more humidity). 
		trigger_switch = {
			on_trigger = has_province_flag
			PG_mild_monsoon = { 	multiply_variable = { rural_capacity = 0.80 } }	# but +10% growth
			PG_normal_monsoon = { 	multiply_variable = { rural_capacity = 0.60 } }	# 15% growth
			PG_severe_monsoon = { 	multiply_variable = { rural_capacity = 0.40 } }	# 20% growth
		}
		
		## Terrains
		trigger_switch = {
			on_trigger = has_terrain		# Here tiers = buildings present
			# Farmlands
			farmlands = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			rome_t = { 			PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			carthage_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			athen_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			neapel_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			byzantion_t = { 	PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			syracuse_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			milet_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			ephesus_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			corinth_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			sardis_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			tyros_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			halicarnassus_t = { PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			argos_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			# Grasslands
			grasslands = { 		PG_terrain_rurcap = { tier4 = 1.25 tier3 = 1.20 tier2 = 1.10 tier1 = 1.00 }	}
			steppe = { 			PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	}
			savannah = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	}
			# Drier lands
			mediterranean = { 	PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.95 tier1 = 0.80 }	}
			drylands = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	}
			ninive_t = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	}
			# Coastals
			coastline = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 }	}
			naxos_t = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 }	}
			steep_coast = { 	PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 }	}
			patara_t = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 }	}
			coastal_desert = { 	PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.65 tier2 = 0.40 tier1 = 0.35 }	}
			# Forests
			woods = { 			PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.65 tier1 = 0.50 }	}
			forest = { 			PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.55 tier1 = 0.40 }	}
			forest_steppe = { 	PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.60 tier2 = 0.40 tier1 = 0.35 }	}
			mangrove = { 		PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.50 tier1 = 0.40 }	}
			jungle = { 			PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.50 tier2 = 0.45 tier1 = 0.40 }	}
			# Mountains
			hills = { 			PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	}
			jerusalem_t = { 	PG_terrain_rurcap = { tier4 = 1.25 tier3 = 1.15 tier2 = 0.90 tier1 = 0.75 }	}
			mountain = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.55 tier1 = 0.50 }	}
			glacier = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.55 tier1 = 0.50 }	}
			highlands = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	}
			fertile_highlands = { PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 }	}
			parsa_t = { 		PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 }	}
			# Rivers and oasis
			oasis = { 			PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 }	}
			siwa_t = { 			PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 }	}
			susa_t = { 			PG_terrain_rurcap = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 }	}
			mesopotamian_plain = { PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 }	}
			babil_t = { 		PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 }	}
			uruk_t = { 			PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 }	}
			nile_plain = { 		PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	}
			memphis_t = { 		PG_terrain_rurcap = { tier4 = 2.40 tier3 = 2.10 tier2 = 1.80 tier1 = 1.50 }	}
			waset_t = { 		PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	}
			elephantine_t = { 	PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	}
			desert_river = { 	PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 }	}
			assur_t = { 		PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 }	}
			# 7/10 too much water
			wetlands = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	}
			marsh = { 			PG_terrain_rurcap = { tier4 = 1.05 tier3 = 0.80 tier2 = 0.45 tier1 = 0.35 }	}
			floodplains = { 	PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	}
			alluvial_plain = { 	PG_terrain_rurcap = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 }	}
			# Deserts
			desert = { 			PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	}
			salt_desert = { 	PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	}
			desert_mountain = { PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.60 tier1 = 0.40 }	}
			arctic = { 			PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	}
			
			
		}
		
		
		# BUILDINGS - now the only buildings that can increase "by itself" is health (terrain, above) and land development
		# New for 3.0.2: land reclamation % effect is now read through the modifier local_development_cost, as is any other modifier. Easier!
		
		if = {		limit = { has_province_modifier = land_reclamation_5 } change_variable = { rural_capacity = 5.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_4 } change_variable = { rural_capacity = 4.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_3 } change_variable = { rural_capacity = 3.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_2 } change_variable = { rural_capacity = 2.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_1 } change_variable = { rural_capacity = 1.00 } }
		
		# 5. FISHING BLOCK - depending on province size (and coastal), and coastal buildings
		if = {
			limit = { has_port = yes check_variable = { prov_size = 7 } } 
			set_variable = { which = PG_fishercap value = 2.5 } 
		}
		else_if = {
			limit = { has_port = yes check_variable = { prov_size = 4 } } 
			set_variable = { which = PG_fishercap value = 1.5 } 
		}
		else_if = {
			limit = { has_port = yes check_variable = { prov_size = 1 } } 
			set_variable = { which = PG_fishercap value = 0.5 } 
		}
		if = {
			limit = { OR = { has_terrain = coastline has_terrain = naxos_t 
				has_terrain = steep_coast has_terrain = patara_t has_terrain = coastal_desert } } 
			change_variable = { PG_fishercap = 1.0 }
		}
		trigger_switch = {
			on_trigger = has_building
			harbor_district = { change_variable = { PG_fishercap = 1.25 } multiply_variable = { PG_fishercap = 1.15 } }
			big_harbor = { 		change_variable = { PG_fishercap = 1.00 } }
			small_harbor = { 	change_variable = { PG_fishercap = 0.50 } }
		}
		if = { limit = { has_province_flag = PG_river_port } multiply_variable = { PG_fishercap = 0.50 }	} # River ports, -50%
		
		change_variable = { which = rural_capacity which = PG_fishercap }
		set_variable = { which = PG_fishercap value = 0 }
		
		
		
		# 6. MODIFIER %
		export_to_variable = { which = PG_dev_extra value = modifier:local_colonist_placement_chance  }	# as 0.2 for +20%
		change_variable = { PG_dev_extra = 1 }														# now 1.2, will modify things
		multiply_variable = { which = rural_capacity which = PG_dev_extra }							# rural cap raised. Also used in urban cap
		
		
		# EFFECT OF INSTITUTIONS
		
		# Percentage of rural people living like their peers at the cities (exporting goods, trade, conscripts to regular army, etc)
		# Each institution will raise the base limit, which can also be upped with production buildings, among others. 
		
				#	writing_system (100) -> upper % (the first 10%)
				#	coin_usage (150) -> urban %
				#	elephant_domestication (0)-> nothing
				#	siege_engineering_institution (200) -> military
				#	bureaucracy_institution (250) -> urban %
				#	cast_iron_institution (300) -> mitigate winters + (china, urban %)
				#	classical_philosophy_institution (350) -> upper class %
				#	civil_law_institution (400) -> politics, no effect to province level
				#	axiomatic_maths_institution (450) -> urban %
				#	blast_furnace_institution (500) -> (china, urban %)
				#	advanced_hydraulics_institution	(550) -> mitigate winters
				#	astronomy_institution (600) -> upper class %
				#	engineering_architecture_institution (650) -> urban %
				#	tactics_strategy_institution -> military
				#	monotheism_institution -> nope
				
		set_variable = { which = PG_urbtransfer value = 0.0 }
		if = { 		limit = { engineering_architecture_institution = 100 } 	change_variable = { PG_urbtransfer = 0.30 } }
		else_if = { limit = { axiomatic_maths_institution = 100 } 			change_variable = { PG_urbtransfer = 0.25 } }
		else_if = { limit = { blast_furnace_institution = 100 } 			change_variable = { PG_urbtransfer = 0.25 } }
		else_if = { limit = { bureaucracy_institution = 100 } 				change_variable = { PG_urbtransfer = 0.20 } }
		else_if = { limit = { cast_iron_institution = 100 } 				change_variable = { PG_urbtransfer = 0.20 } }
		else_if = { limit = { coin_usage = 100 } 							change_variable = { PG_urbtransfer = 0.10 } }
		else = { set_variable = { PG_urbtransfer = 0.0 } }
		
		# Several institutions will also affect, although just slightly, the % of URBANS that go to upper. Raised further with baths and other culture things
		
		set_variable = { which = PG_upptransfer value = 0.0 }
		if = { 		limit = { astronomy_institution = 100 } 			change_variable = { PG_upptransfer = 0.20 } }
		else_if = { limit = { classical_philosophy_institution = 100 } 	change_variable = { PG_upptransfer = 0.15 } }
		else_if = { limit = { writing_system = 100 } 					change_variable = { PG_upptransfer = 0.10 } }
			
			# initial 10% is with writing system, affects those in urban places. The rurals will keep promoting 10% to uppers (it's fixed). 
		
		# Buildings affecting transfer from Rural to Commoner population: Roads + Production
		trigger_switch = {		# For rural -> urban, changed from Baths to Roads. Baths will make urban -> uppers
			on_trigger = has_building
			gravel_road = { 	set_variable = { which = PG_urbtransfer value = 0.10 } }
			paved_road = { 		set_variable = { which = PG_urbtransfer value = 0.20 } }	# re-made values
			imperial_road = { 	set_variable = { which = PG_urbtransfer value = 0.20 } }	# same as road lv2, no further benefits
		}
		trigger_switch = {
			on_trigger = has_building		
			small_water_irrigation = { 	change_variable = { PG_urbtransfer = 0.15 } }
			big_water_irrigation = { 	change_variable = { PG_urbtransfer = 0.25 } }	# re-made values
			big_estate = { 		change_variable = { PG_urbtransfer = 0.40 } }
			
			craftsman = { 		change_variable = { PG_urbtransfer = 0.15 } }
			small_workshop = { 	change_variable = { PG_urbtransfer = 0.25 } }
			artisan_district = { change_variable = { PG_urbtransfer = 0.40 } }
			
			quarry = { 			change_variable = { PG_urbtransfer = 0.15 } }
			small_mine = { 		change_variable = { PG_urbtransfer = 0.25 } }
			big_mine = { 		change_variable = { PG_urbtransfer = 0.40 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	change_variable = { PG_upptransfer = 0.10 } }
			big_bath = { 	change_variable = { PG_upptransfer = 0.20 } }	# possible upper %: instits 20% + 20% here, FORTY % OF URBAN
		}
		
		
		# Special province modifiers
			# Nothing added so far, although any modifier can affect rural/urban population, with the local_development_cost modifier. 
		
		
		
		
		######################
		## URBAN CAPACITY; those living in the cities. Will then be assigned to Commoners and Upper pops
		######################
		
			set_variable = { which = urban_capacity value = 0 }	# Cleanup
		
		# BUILDINGS: A "basic" flat bonus is granted. Added in a scripted effect, to not take too much space
		PG_urban_buildings = yes
		
		# THE TRADE POWER MULTIPLIER
		
		# I forgot the excel with the new formula in the other pc. I'll change it later
		
		# More trade means more logistics, people employed in on-offloading ships, wealth coming from other places, etc. This will be the main source of commoner population for most of the game, until institutions and buildings kick in. 
		export_to_variable = { which = urban_trade_power value = province_trade_power }
		
			# Trade power points are less effective the bigger it is. In economics this is called "Diminishing marginal returns":
			# 1-10 	: 3.3 each (up to 3 pops)
			# 10-22 : 4 each (+3 pops)
			# 22-42 : 5 each (+4 pops)
			# 42-60 : 6 each (+3 pops)
			# >60 	: 10 each
			# So a trade power of 30 will be: 10/3.3 + 12/4 + 6/5 = 3 + 3 + 1.2 = 7.2
			# Trade 120: 10/3.3 + 12/4 + 20/5 + 18/6 + (120-10-12-20-18)/10 = 3 + 3 + 4 + 3 + 60/10 = 19
			if = {
				limit = { check_variable = { urban_trade_power = 60 } }	subtract_variable = { urban_trade_power = 60 } 
				change_variable = { urban_capacity = 13 } 				divide_variable = { urban_trade_power = 10 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 42 } } subtract_variable = { urban_trade_power = 42 } 
				change_variable = { urban_capacity = 10 } 				divide_variable = { urban_trade_power = 6 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 22 } } subtract_variable = { urban_trade_power = 22 } 
				change_variable = { urban_capacity = 6 } 				divide_variable = { urban_trade_power = 5 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 10 } } subtract_variable = { urban_trade_power = 10 } 
				change_variable = { urban_capacity = 3 } 				divide_variable = { urban_trade_power = 4 } 
			}
			else = { divide_variable = { urban_trade_power = 3.3 } }
			change_variable = { which = urban_capacity which = urban_trade_power }	# add the remaining trade power (applies to all)
			set_variable = { which = urban_trade_power value = 0 }
		
		
		# Maluses from primitive governments: natives (hordes, migrating ones) can't convert rurals to urban people and all those originally urban (buildings and trade power) only get 50%, which is MOVED TO RURAL. Tribal gov's (all the other tribals) do have -50% reduction, but it stays in commoners, and the rural transfer still works. 
		if = {
			limit = { owner = { has_reform = steppe_horde_reform } }	# Careful, conquered places's commoners will flee quickly!
			set_variable = { which = PG_urb_to_trib which = urban_capacity } multiply_variable = { PG_urb_to_trib = 0.5 }
			set_variable = { which = urban_capacity value = 0 }				 set_variable = { which = PG_urbtransfer value = 0 }
		}
		else_if = {
			limit = { owner = { government = tribal } } 
			set_variable = { which = PG_urb_to_trib which = urban_capacity } 	multiply_variable = { PG_urb_to_trib = 0.5 }
			subtract_variable = { which = urban_capacity which = PG_urb_to_trib }
		}
		
		# CAPITAL PALACE. +1 urban and +1 upper, for all capitals (shows +2 due to later being cut into upper. Now urban =/= commoner)
		if = { limit = { is_capital = yes } change_variable = { urban_capacity = 2 } }
		
		
		#	RELATIVE % MODIFIERS. The same modifier used in rural, as it will affect both. 
		multiply_variable = { which = urban_capacity which = PG_dev_extra }	
		
		
		
		######################
		# 	UPPER CAPACITY, coming from both rural and urban sources. It is roughly 10% of the above
		######################
		
		# Rural capacity to upper: always 10% of those. // Urban to upper: dependent on institutions, starting with writing systems 10%). 
		set_variable = { which = PG_ruralupper which = rural_capacity } multiply_variable = { PG_ruralupper = 0.1 }
		set_variable = { which = PG_urbanupper which = urban_capacity } multiply_variable = { which = PG_urbanupper which = PG_upptransfer }
		
		# What else: capital city (from urban), and buildings which take from rural if tribal or native (otherwise take from urban)
		if = { 	limit = { is_capital = yes } change_variable = { PG_urbanupper = 1 } }
		if = { 
			limit = { owner = { NOT = { government = tribal } NOT = { government = native } } }
			PG_urbanupper_capital = yes			# extra uppers for high total development only in non-tribals
		}
		if = { 
			limit = { owner = { OR = { government = tribal government = native } } }
					PG_ruralupper_buildings = yes
		}
		else = { 	PG_urbanupper_buildings = yes }
		PG_upper_buildings = yes 		# other buildings that are not dependent on the country's government
		
		######################
		# 	ASSIGN CAPACITIES to Tribal, Commoner and Upper pops
		######################
		
		# Tribal population capacity: Rural - transfer to urban - rural transfer to upper. Always minimum 1.00
		# Commoner population capacity: Urban + transfer to urban - urban transfer to upper
		# Upper population capacity: Rural to upper + Urban to upper
		
		set_variable = { which = PG_trb_cap which = rural_capacity } 
		change_variable = { which = PG_trb_cap which = PG_urb_to_trib }		# Commoners that count as tribal (tribal gov type)
		set_variable = { which = PG_com_cap which = PG_urbtransfer }		# Commoner cap will start being used to subtract rural transfer
		multiply_variable = { which = PG_com_cap which = rural_capacity }
		subtract_variable = { which = PG_trb_cap which = PG_com_cap }
		subtract_variable = { which = PG_trb_cap which = PG_ruralupper }
		if = { limit = { NOT = { check_variable = { PG_trb_cap = 1 } } } set_variable = { which = PG_trb_cap value = 1 } }	# at least 1 tribal
		
		change_variable = { which = PG_com_cap which = urban_capacity }		# Now commoner cap (was only % rur to urban) adds urban itself
		subtract_variable = { which = PG_com_cap which = PG_urbanupper }
		
		set_variable = { which = PG_upp_cap which = PG_ruralupper }	
		change_variable = { which = PG_upp_cap which = PG_urbanupper }
		
		
		# Conditions: if there is not enough upper capacity to get one, or not enough commoner cap, these are given back to rurals. 
		set_variable = { which = PG_new_cap which = PG_com_cap } change_variable = { which = PG_new_cap which = PG_upp_cap }
		if = {
			limit = { NOT = { check_variable = { PG_new_cap = 1 } } NOT = { base_tax = 1 } NOT = { base_production = 1 } }
			set_province_flag = PG_move_all 
		}
		else_if = { 
			limit = { NOT = { check_variable = { PG_upp_cap = 1 } } check_variable = { PG_new_cap = 1 } NOT = { base_tax = 1 } }
			set_province_flag = PG_move_upp_com
		}
		
		if = {
			limit = { has_province_flag = PG_move_all }
			set_variable = { which = PG_trb_old which = PG_trb_cap } 	set_variable = { which = PG_com_old which = PG_com_cap }
			set_variable = { which = PG_upp_old which = PG_upp_cap }
			change_variable = { which = PG_trb_cap which = PG_com_cap } change_variable = { which = PG_trb_cap which = PG_upp_cap }
			set_variable = { which = PG_com_cap value = 0 } 			set_variable = { which = PG_upp_cap value = 0 } 
		}
		else_if = {
			limit = { has_province_flag = PG_move_upp_com }
			set_variable = { which = PG_com_old which = PG_com_cap }	set_variable = { which = PG_upp_old which = PG_upp_cap }
			change_variable = { which = PG_com_cap which = PG_upp_cap } set_variable = { which = PG_upp_cap value = 0 }
		}
		
		######################
		# GROWTH RATIOS
		######################
		
		# Now that we have all the capacities allocated in tribal/commoner/upper, it's time to check against the current population values. It is a simple division, being the neutral value 1.00. Anything over 1 will trigger the (hidden) events to grow and promote; anything under 1 will trigger the ones to starve, migrate, demote, etc. 
		
		# Current
		export_to_variable = { which = PG_trb_now value = base_manpower }
		export_to_variable = { which = PG_com_now value = base_production }
		export_to_variable = { which = PG_upp_now value = base_tax }
		set_variable = { which = PG_tot_now which = PG_trb_now } 	change_variable = { which = PG_tot_now which = PG_com_now }	# tot = total
		change_variable = { which = PG_tot_now which = PG_upp_now } set_variable = { which = PG_tot_cap which = PG_trb_cap }
		change_variable = { which = PG_tot_cap which = PG_com_cap } change_variable = { which = PG_tot_cap which = PG_upp_cap } 
		
		# Growths
		if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0.2 } }
		if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0.2 } }
		
		set_variable = { which = PG_trb_grow which = PG_trb_cap } 		 divide_variable = { which = PG_trb_grow which = PG_trb_now }
		set_variable = { which = PG_com_grow which = PG_com_cap } 		 divide_variable = { which = PG_com_grow which = PG_com_now }
		set_variable = { which = PG_upp_grow which = PG_upp_cap } 		 divide_variable = { which = PG_upp_grow which = PG_upp_now }
		
		if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0 } }	# reset
		if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0 } }	# reset
		
		
		# MODIFIERS, province level
		# Now using the local modifiers local_development_cost. It works in a MULTIPLICATIVELY way and affects growth the more extreme it is
			# I'm leaving devastation / prosperity and monsoons separate, because the growth effect is different depending on the pop type. 
		trigger_switch = {
			on_trigger = devastation
			75 = { PG_growth_modify_all = { trb = 0.20 com = 0.10 upp = 0.10 } }
			60 = { PG_growth_modify_all = { trb = 0.35 com = 0.25 upp = 0.25 } }
			40 = { PG_growth_modify_all = { trb = 0.60 com = 0.50 upp = 0.40 } }
			15 = { PG_growth_modify_all = { trb = 0.75 com = 0.70 upp = 0.60 } }
			5 = {  multiply_variable = { PG_upp_grow = 0.80 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { PG_growth_modify_all = { trb = 1.10 com = 1.15 upp = 1.20 } }
			50 = { PG_growth_modify_all = { trb = 1.10 com = 1.10 upp = 1.10 } }
			25 = { PG_growth_modify_all = { trb = 1.05 com = 1.05 upp = 1.05 } }
		}
		# Monsoons reduces capacity but increases growth
		trigger_switch = {
			on_trigger = has_province_flag
			flag_severe_monsoon = { multiply_variable = { PG_trb_grow = 1.20 } }
			flag_normal_monsoon = { multiply_variable = { PG_trb_grow = 1.15 } }
			flag_mild_monsoon = {   multiply_variable = { PG_trb_grow = 1.10 } }
		}
		
		export_to_variable = { which = PG_grow_extra value = modifier:local_development_cost }		# as 0.2 for +20%
		change_variable = { PG_grow_extra = 1 }														# now 1.2, will modify things
		multiply_variable = { which = PG_trb_grow which = PG_grow_extra }						
		multiply_variable = { which = PG_com_grow which = PG_grow_extra }						
		multiply_variable = { which = PG_upp_grow which = PG_grow_extra }						
		
		
		# MODIFIERS, country level
		# Country modifiers affect ADDITIVELY
		export_to_variable = { which = PG_grow_country value = modifier:development_cost who = owner } 
		
		change_variable = { which = PG_trb_grow which = PG_grow_country }
		change_variable = { which = PG_com_grow which = PG_grow_country }
		change_variable = { which = PG_upp_grow which = PG_grow_country }
		
		
		
		
		######################
		#	OTHER EFFECTS
		######################
		# check whether max capacity has increased and no further need for the "Pause" modifier (added at startup event, to avoid losing the initial population)
		if = { limit = { check_variable = { which = PG_trb_cap which = initial_rural } remove_province_modifier = rural_pause } }
		if = { limit = { check_variable = { which = PG_com_cap which = initial_urban } remove_province_modifier = urban_pause } }
		
		# Find how much information is flowing to this province. Will allow for long-range migration
		PG_update_inforange = yes		
		
		# If there was not enough capacity for upper or commoner, change the modifier. Otherwise, return to the old one
		if = {
			limit = { OR = { has_province_flag = PG_move_all has_province_flag = PG_move_upp_com } }
			remove_province_modifier  = popgrowth_viewer
			add_permanent_province_modifier = { name = popgrowth_viewer2 duration = -1 }
		}
		else_if = {
			limit = { has_province_modifier = popgrowth_viewer2 }
			remove_province_modifier  = popgrowth_viewer2 
			add_permanent_province_modifier = { name = popgrowth_viewer duration = -1 }
		}
		
		# Clean variables to be good-looking (/100 for rounding; x100 for percentages)
			# Caps
		divide_variable = { PG_trb_cap = 100 }  multiply_variable = { PG_trb_cap = 100 }	# 4.567 / 100 = 0.045 x 100 = 4.5. 
		divide_variable = { PG_com_cap = 100 }  multiply_variable = { PG_com_cap = 100 }
		divide_variable = { PG_upp_cap = 100 }  multiply_variable = { PG_upp_cap = 100 }
		divide_variable = { PG_tot_cap = 100 }  multiply_variable = { PG_tot_cap = 100 }
		divide_variable = { rural_capacity = 100 }  multiply_variable = { rural_capacity = 100 }
		divide_variable = { urban_capacity = 100 }  multiply_variable = { urban_capacity = 100 }
		
		divide_variable = { PG_urbtransfer = 10 }  multiply_variable = { PG_urbtransfer = 1000 }
		divide_variable = { PG_trb_grow = 10 } multiply_variable = { PG_trb_grow = 1000 }
		divide_variable = { PG_com_grow = 10 } multiply_variable = { PG_com_grow = 1000 }
		divide_variable = { PG_upp_grow = 10 } multiply_variable = { PG_upp_grow = 1000 }
		
		
	}
	
	
	option = {
		name = "population_capacity.23.a"
			# ok, all done inside the immediate
	}
	
}

province_event = {
	id = population_capacity.24			# Population capacity v4; detailed view
	title = "population_capacity.24.t"
	desc = "population_capacity.24.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	# will fire after what may have changed the rural population, every two years
	
	
	immediate = {
		# This is the DETAILED version. Every one in a while a new variable will pop up (like "PS_rur_1" and so) detailing each step. 
		
		######################
		# RURAL CAPACITY
		######################
		
		# First calculate and "track" everything separate, then the variables will subtract between them, to have only variations. 
		# 0: Province size (no separate value, but will show size as rural capacity)
		set_variable = { which = rural_capacity which = prov_size }
		
		# 1:Winters
		trigger_switch = {
			on_trigger = has_winter
			mild_winter = { 	PG_winter_rurcap = { tier3 = 1.00 tier2 = 0.90 tier1 = 0.60 } }	# tiers 1-2-3 are institutions
			normal_winter = { 	PG_winter_rurcap = { tier3 = 1.00 tier2 = 0.75 tier1 = 0.35 } }
			severe_winter = { 	PG_winter_rurcap = { tier3 = 0.75 tier2 = 0.50 tier1 = 0.35 } } # severe = normal, if no tech
		}
		set_variable = { which = PS_rur1 which = rural_capacity }
		
		# 2: Arid/Tropical/Monsoons
		if = { limit = { has_climate = arid } 		multiply_variable = { rural_capacity = 0.8 } }
		if = { limit = { has_climate = tropical } 	multiply_variable = { rural_capacity = 0.8 } }
		trigger_switch = {
			on_trigger = has_province_flag
			PG_mild_monsoon = { 	multiply_variable = { rural_capacity = 0.80 } }	# but +10% growth
			PG_normal_monsoon = { 	multiply_variable = { rural_capacity = 0.60 } }	# 15% growth
			PG_severe_monsoon = { 	multiply_variable = { rural_capacity = 0.40 } }	# 20% growth
		}
		set_variable = { which = PS_rur2 which = rural_capacity }
		
		# 3: Terrains
		trigger_switch = {
			on_trigger = has_terrain		# Here tiers = buildings present
			# Farmlands
			farmlands = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			rome_t = { 			PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			carthage_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			athen_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			neapel_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			byzantion_t = { 	PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			syracuse_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			milet_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			ephesus_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			corinth_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			sardis_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			tyros_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			halicarnassus_t = { PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			argos_t = { 		PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			# Grasslands
			grasslands = { 		PG_terrain_rurcap = { tier4 = 1.25 tier3 = 1.20 tier2 = 1.10 tier1 = 1.00 }	PS_terr_max = { max = 1.25 } }
			steppe = { 			PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	PS_terr_max = { max = 0.95 } }
			savannah = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	PS_terr_max = { max = 0.95 } }
			# Drier lands
			mediterranean = { 	PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.95 tier1 = 0.80 }	PS_terr_max = { max = 1.10 } }
			drylands = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	PS_terr_max = { max = 1.10 } }
			ninive_t = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	PS_terr_max = { max = 1.10 } }
			# Coastals
			coastline = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 }	PS_terr_max = { max = 0.95 } }
			naxos_t = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.80 tier2 = 0.60 tier1 = 0.50 }	PS_terr_max = { max = 0.95 } }
			steep_coast = { 	PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 }	PS_terr_max = { max = 0.80 } }
			patara_t = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.50 tier1 = 0.40 }	PS_terr_max = { max = 0.80 } }
			coastal_desert = { 	PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.65 tier2 = 0.40 tier1 = 0.35 }	PS_terr_max = { max = 0.80 } }
			# Forests
			woods = { 			PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.65 tier1 = 0.50 }	PS_terr_max = { max = 0.90 } }
			forest = { 			PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.55 tier1 = 0.40 }	PS_terr_max = { max = 0.90 } }
			forest_steppe = { 	PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.60 tier2 = 0.40 tier1 = 0.35 }	PS_terr_max = { max = 0.90 } }
			mangrove = { 		PG_terrain_rurcap = { tier4 = 0.90 tier3 = 0.85 tier2 = 0.50 tier1 = 0.40 }	PS_terr_max = { max = 0.90 } }
			jungle = { 			PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.50 tier2 = 0.45 tier1 = 0.40 }	PS_terr_max = { max = 0.80 } }
			# Mountains
			hills = { 			PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	PS_terr_max = { max = 1.10 } }
			jerusalem_t = { 	PG_terrain_rurcap = { tier4 = 1.25 tier3 = 1.15 tier2 = 0.90 tier1 = 0.75 }	PS_terr_max = { max = 1.25 } }
			mountain = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.55 tier1 = 0.50 }	PS_terr_max = { max = 0.80 } }
			glacier = { 		PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.55 tier1 = 0.50 }	PS_terr_max = { max = 0.80 } }
			highlands = { 		PG_terrain_rurcap = { tier4 = 1.10 tier3 = 1.05 tier2 = 0.80 tier1 = 0.60 }	PS_terr_max = { max = 1.10 } }
			fertile_highlands = { PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 } PS_terr_max = { max = 1.40 } }
			parsa_t = { 		PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.05 tier1 = 0.80 }	PS_terr_max = { max = 1.40 } }
			# Rivers and oasis
			oasis = { 			PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 }	PS_terr_max = { max = 1.40 } }
			siwa_t = { 			PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.30 tier2 = 0.95 tier1 = 0.80 }	PS_terr_max = { max = 1.40 } }
			susa_t = { 			PG_terrain_rurcap = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 }	PS_terr_max = { max = 1.60 } }
			mesopotamian_plain = { PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 } PS_terr_max = { max = 1.80 } }
			babil_t = { 		PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 }	PS_terr_max = { max = 1.80 } }
			uruk_t = { 			PG_terrain_rurcap = { tier4 = 1.80 tier3 = 1.70 tier2 = 1.40 tier1 = 1.20 }	PS_terr_max = { max = 1.80 } }
			nile_plain = { 		PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	PS_terr_max = { max = 2.00 } }
			memphis_t = { 		PG_terrain_rurcap = { tier4 = 2.40 tier3 = 2.10 tier2 = 1.80 tier1 = 1.50 }	PS_terr_max = { max = 2.40 } }
			waset_t = { 		PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	PS_terr_max = { max = 2.00 } }
			elephantine_t = { 	PG_terrain_rurcap = { tier4 = 2.00 tier3 = 1.90 tier2 = 1.50 tier1 = 1.20 }	PS_terr_max = { max = 2.00 } }
			desert_river = { 	PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 }	PS_terr_max = { max = 1.40 } }
			assur_t = { 		PG_terrain_rurcap = { tier4 = 1.40 tier3 = 1.35 tier2 = 1.20 tier1 = 1.00 }	PS_terr_max = { max = 1.40 } }
			# 7/10 too much water
			wetlands = { 		PG_terrain_rurcap = { tier4 = 0.95 tier3 = 0.90 tier2 = 0.60 tier1 = 0.50 }	PS_terr_max = { max = 0.95 } }
			marsh = { 			PG_terrain_rurcap = { tier4 = 1.05 tier3 = 0.80 tier2 = 0.45 tier1 = 0.35 }	PS_terr_max = { max = 1.05 } }
			floodplains = { 	PG_terrain_rurcap = { tier4 = 1.50 tier3 = 1.40 tier2 = 1.20 tier1 = 1.10 }	PS_terr_max = { max = 1.50 } }
			alluvial_plain = { 	PG_terrain_rurcap = { tier4 = 1.60 tier3 = 1.50 tier2 = 1.30 tier1 = 1.10 }	PS_terr_max = { max = 1.60 } }
			# Deserts
			desert = { 			PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	PS_terr_max = { max = 0.60 } }
			salt_desert = { 	PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	PS_terr_max = { max = 0.60 } }
			desert_mountain = { PG_terrain_rurcap = { tier4 = 0.80 tier3 = 0.70 tier2 = 0.60 tier1 = 0.40 }	PS_terr_max = { max = 0.80 } }
			arctic = { 			PG_terrain_rurcap = { tier4 = 0.60 tier3 = 0.45 tier2 = 0.30 tier1 = 0.25 }	PS_terr_max = { max = 0.60 } }
			
			
		}
		set_variable = { which = PS_rur3 which = rural_capacity } 
		set_variable = { which = PS_terr_left which = PS_terrmax } subtract_variable = { which = PS_terr_left which = PS_rur3 }
		
		
		# 4. BUILDINGS
		if = {		limit = { has_province_modifier = land_reclamation_5 } change_variable = { rural_capacity = 5.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_4 } change_variable = { rural_capacity = 4.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_3 } change_variable = { rural_capacity = 3.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_2 } change_variable = { rural_capacity = 2.00 } }
		else_if = { limit = { has_province_modifier = land_reclamation_1 } change_variable = { rural_capacity = 1.00 } }
		set_variable = { which = PS_rur4 which = rural_capacity }
		
		
		# 5. FISHING BLOCK - depending on province size (and coastal), and coastal buildings
		# Fishing done after land reclamation, as land reclamation should affect only agricultural activities, not fishing
		if = {
			limit = { has_port = yes check_variable = { prov_size = 7 } } 
			set_variable = { which = PG_fishercap value = 2.5 } 
		}
		else_if = {
			limit = { has_port = yes check_variable = { prov_size = 4 } } 
			set_variable = { which = PG_fishercap value = 1.5 } 
		}
		else_if = {
			limit = { has_port = yes check_variable = { prov_size = 1 } } 
			set_variable = { which = PG_fishercap value = 0.5 } 
		}
		if = {
			limit = { OR = { has_terrain = coastline has_terrain = naxos_t 
				has_terrain = steep_coast has_terrain = patara_t has_terrain = coastal_desert } } 
			change_variable = { PG_fishercap = 1.0 }
		}
		set_variable = { which = PG_fisher1 which = PG_fishercap }
		trigger_switch = {
			on_trigger = has_building
			harbor_district = { change_variable = { PG_fishercap = 1.25 } multiply_variable = { PG_fishercap = 1.15 } }
			big_harbor = { 		change_variable = { PG_fishercap = 1.00 } }
			small_harbor = { 	change_variable = { PG_fishercap = 0.50 } }
		}
		set_variable = { which = PG_fisher2 which = PG_fishercap }
		
		if = { limit = { has_province_flag = PG_river_port } multiply_variable = { PG_fishercap = 0.50 }	} # River ports, -50%
		set_variable = { which = PG_fisher3 which = PG_fishercap }
		
		change_variable = { which = rural_capacity which = PG_fishercap }
		set_variable = { which = PG_fishercap value = 0 }
		set_variable = { which = PS_rur5 which = rural_capacity }
		
		# 6. MODIFIER %
		export_to_variable = { which = PG_dev_extra value = modifier:local_colonist_placement_chance } # as 0.2 for +20%
		change_variable = { PG_dev_extra = 1 }														# now 1.2, will modify things
		multiply_variable = { which = rural_capacity which = PG_dev_extra }							# rural cap raised. Also used in urban cap
		set_variable = { which = PS_rur6 which = rural_capacity }
		
		# EFFECT OF INSTITUTIONS
		
		# Percentage of rural people living like their peers at the cities (exporting goods, trade, conscripts to regular army, etc)
		# Each institution will raise the base limit, which can also be upped with production buildings, among others. 
		
				#	writing_system (100) -> upper % (the first 10%)
				#	coin_usage (150) -> urban %
				#	elephant_domestication (0)-> nothing
				#	siege_engineering_institution (200) -> military
				#	bureaucracy_institution (250) -> urban %
				#	cast_iron_institution (300) -> mitigate winters + (china, urban %)
				#	classical_philosophy_institution (350) -> upper class %
				#	civil_law_institution (400) -> politics, no effect to province level
				#	axiomatic_maths_institution (450) -> urban %
				#	blast_furnace_institution (500) -> (china, urban %)
				#	advanced_hydraulics_institution	(550) -> mitigate winters
				#	astronomy_institution (600) -> upper class %
				#	engineering_architecture_institution (650) -> urban %
				#	tactics_strategy_institution -> military
				#	monotheism_institution -> nope
				
		set_variable = { which = PG_urbtransfer value = 0.0 }
		if = { 		limit = { engineering_architecture_institution = 100 } 	change_variable = { PG_urbtransfer = 0.30 } }
		else_if = { limit = { axiomatic_maths_institution = 100 } 			change_variable = { PG_urbtransfer = 0.25 } }
		else_if = { limit = { blast_furnace_institution = 100 } 			change_variable = { PG_urbtransfer = 0.25 } }
		else_if = { limit = { bureaucracy_institution = 100 } 				change_variable = { PG_urbtransfer = 0.20 } }
		else_if = { limit = { cast_iron_institution = 100 } 				change_variable = { PG_urbtransfer = 0.20 } }
		else_if = { limit = { coin_usage = 100 } 							change_variable = { PG_urbtransfer = 0.10 } }
		set_variable = { which = PS_urbtransfer1 which = PG_urbtransfer }
		
		set_variable = { which = PG_upptransfer value = 0.0 }
		if = { 		limit = { astronomy_institution = 100 } 			change_variable = { PG_upptransfer = 0.20 } }
		else_if = { limit = { classical_philosophy_institution = 100 } 	change_variable = { PG_upptransfer = 0.15 } }
		else_if = { limit = { writing_system = 100 } 					change_variable = { PG_upptransfer = 0.10 } }
		set_variable = { which = PG_upptransfer1 which = PG_upptransfer }
		
		
		trigger_switch = {	
			on_trigger = has_building
			gravel_road = { 	change_variable = { which = PG_urbtransfer value = 0.10 } }
			paved_road = { 		change_variable = { which = PG_urbtransfer value = 0.20 } }	# re-made values
			imperial_road = { 	change_variable = { which = PG_urbtransfer value = 0.20 } }	# same as road lv2, no further benefits
		}
		set_variable = { which = PS_urbtransfer2 which = PG_urbtransfer }
		
		trigger_switch = {
			on_trigger = has_building		
			small_water_irrigation = { 	change_variable = { PG_urbtransfer = 0.15 } }
			big_water_irrigation = { 	change_variable = { PG_urbtransfer = 0.25 } }	# re-made values
			big_estate = { 		change_variable = { PG_urbtransfer = 0.40 } }
			
			craftsman = { 		change_variable = { PG_urbtransfer = 0.15 } }
			small_workshop = { 	change_variable = { PG_urbtransfer = 0.25 } }
			artisan_district = { change_variable = { PG_urbtransfer = 0.40 } }
			
			quarry = { 			change_variable = { PG_urbtransfer = 0.15 } }
			small_mine = { 		change_variable = { PG_urbtransfer = 0.25 } }
			big_mine = { 		change_variable = { PG_urbtransfer = 0.40 } }
		}
		set_variable = { which = PS_urbtransfer3 which = PG_urbtransfer }
		
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	change_variable = { PG_upptransfer = 0.10 } }
			big_bath = { 	change_variable = { PG_upptransfer = 0.20 } }	# possible upper %: instits 20% + 20% here, FORTY % OF URBAN
		}
		set_variable = { which = PG_upptransfer2 which = PG_upptransfer }
		
		
		# Special province modifiers
			# Nothing added so far, although any modifier can affect rural/urban population, with the local_development_cost modifier. 
		
		
		
		######################
		## URBAN CAPACITY; those living in the cities. Will then be assigned to Commoners and Upper pops
		######################
		
			set_variable = { which = urban_capacity value = 0 }	# Cleanup
		
		# 1. BUILDINGS: A "basic" flat bonus is granted. Added in a scripted effect, to not take too much space
		PG_urban_buildings_details = yes
		set_variable = { which = PS_urb1 which = urban_capacity }
		
		
		# 2. THE TRADE POWER MULTIPLIER
		export_to_variable = { which = urban_trade_power value = province_trade_power }
		set_variable = { which = PS_trade_power which = urban_trade_power }
			if = {
				limit = { check_variable = { urban_trade_power = 60 } }	subtract_variable = { urban_trade_power = 60 } 
				change_variable = { urban_capacity = 13 } 				divide_variable = { urban_trade_power = 10 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 42 } } subtract_variable = { urban_trade_power = 42 } 
				change_variable = { urban_capacity = 10 } 				divide_variable = { urban_trade_power = 6 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 22 } } subtract_variable = { urban_trade_power = 22 } 
				change_variable = { urban_capacity = 6 } 				divide_variable = { urban_trade_power = 5 } 
			}
			else_if = {
				limit = { check_variable = { urban_trade_power = 10 } } subtract_variable = { urban_trade_power = 10 } 
				change_variable = { urban_capacity = 3 } 				divide_variable = { urban_trade_power = 4 } 
			}
			else = { divide_variable = { urban_trade_power = 3.3 } }
			change_variable = { which = urban_capacity which = urban_trade_power }	# add the remaining trade power (applies to all)
			set_variable = { which = urban_trade_power value = 0 }
		set_variable = { which = PS_urb2 which = urban_capacity }
		
		
		# 3. Maluses from primitive governments: Natives (HORDES, migrating ones) can't effectively use commoners, and HALF will be converted to tribals. The other half will not count, due to inefficiencies of this govenrment. TRIBALS will count 50% to tribal and 50% remains as commoners. 
		if = {
			limit = { owner = { has_reform = steppe_horde_reform } }	# Careful, conquered places's commoners will flee quickly!
			set_variable = { which = PG_urb_to_trib which = urban_capacity } multiply_variable = { PG_urb_to_trib = 0.5 }
			set_variable = { which = urban_capacity value = 0 }				 set_variable = { which = PG_urbtransfer value = 0 }
		}
		else_if = {
			limit = { owner = { government = tribal } } 
			set_variable = { which = PG_urb_to_trib which = urban_capacity } 	multiply_variable = { PG_urb_to_trib = 0.5 }
			subtract_variable = { which = urban_capacity which = PG_urb_to_trib }
		}
		set_variable = { which = PS_urb3 which = urban_capacity }
		
		
		# 4. CAPITAL PALACE. +1 urban and +1 upper, for all capitals (shows +2 due to later being cut into upper. Now urban =/= commoner)
		if = { limit = { is_capital = yes } change_variable = { urban_capacity = 2 } }
		set_variable = { which = PS_urb4 which = urban_capacity }
		
		
		# 5. RELATIVE % MODIFIERS. The same modifier used in rural, as it will affect both. 
		multiply_variable = { which = urban_capacity which = PG_dev_extra }	
		set_variable = { which = PS_urb5 which = urban_capacity }
		
		
		
		######################
		# 	UPPER CAPACITY, coming from both rural and urban sources. It is roughly 10% of the above
		######################
		
		# Rural capacity to upper: always 10% of those. // Urban to upper: dependent on institutions, starting with writing systems 10%). 
		set_variable = { which = PG_ruralupper which = rural_capacity } multiply_variable = { PG_ruralupper = 0.1 }
		set_variable = { which = PS_ruralupper1 which = PG_ruralupper }
		
		set_variable = { which = PG_urbanupper which = urban_capacity } multiply_variable = { which = PG_urbanupper which = PG_upptransfer }
		set_variable = { which = PS_urbanupper1 which = PG_urbanupper }
		
		# What else: capital city (from urban), and buildings which take from rural if tribal or native (otherwise take from urban)
		if = { 	limit = { is_capital = yes } change_variable = { PG_urbanupper = 1 } }
		if = { 
			limit = { owner = { NOT = { government = tribal } NOT = { government = native } } }
			PG_urbanupper_capital = yes			# extra uppers for high total development only in non-tribals
		}
		set_variable = { which = PS_urbanupper2 which = PG_urbanupper }
		
		if = { 
			limit = { owner = { OR = { government = tribal government = native } } }
			PG_ruralupper_buildings_detail = yes
		}
		else = { PG_urbanupper_buildings_detail = yes }
		set_variable = { which = PS_urbanupper3 which = PG_urbanupper }
		
		######################
		# 	ASSIGN CAPACITIES to Tribal, Commoner and Upper pops
		######################
		
		# Tribal population capacity: Rural - transfer to urban - rural transfer to upper. Always minimum 1.00
		# Commoner population capacity: Urban + transfer to urban - urban transfer to upper
		# Upper population capacity: Rural to upper + Urban to upper
		
		set_variable = { which = PG_trb_cap which = rural_capacity } 
		change_variable = { which = PG_trb_cap which = PG_urb_to_trib }		# Commoners that count as tribal (tribal gov type)
		
		set_variable = { which = PG_com_cap which = PG_urbtransfer }		# Commoner cap will start being used to subtract rural transfer
		multiply_variable = { which = PG_com_cap which = rural_capacity }
		
		set_variable = { which = PS_rur_to_com which = PG_com_cap }
		set_variable = { which = PS_com_cap1 which = PG_com_cap }
		
		subtract_variable = { which = PG_trb_cap which = PG_com_cap }
		subtract_variable = { which = PG_trb_cap which = PG_ruralupper }
		set_variable = { which = PS_trb_cap1 which = PG_trb_cap } subtract_variable = { which = PS_trb_cap1 which = PG_urb_to_trib }
		
		if = { limit = { NOT = { check_variable = { PG_trb_cap = 1 } } } set_variable = { which = PG_trb_cap value = 1 } }	# at least 1 tribal
		
		change_variable = { which = PG_com_cap which = urban_capacity }		# Now commoner cap (was only % rur to urban) adds urban itself
		subtract_variable = { which = PG_com_cap which = PG_urbanupper }
		set_variable = { which = PS_com_cap2 which = PG_urbanupper }
		set_variable = { which = PS_com_cap3 which = urban_capacity } subtract_variable = { which = PS_com_cap3 which = PG_urbanupper }
		
		set_variable = { which = PG_upp_cap which = PG_ruralupper }
		change_variable = { which = PG_upp_cap which = PG_urbanupper }
		
		# Conditions: if there is not enough upper cap to get one (not 1), or not enough commoner cap, these are given back to rurals. 
		#if = { 
		#	limit = { NOT = { check_variable = { PG_upp_cap = 1 } } 	check_variable = { PG_upp_cap = 0.01 } NOT = { base_tax = 1 } }
		#	set_variable = { which = PG_com_old which = PG_com_cap }	change_variable = { which = PG_com_cap which = PG_upp_cap }
		#}
		#if = {		
		#	# Still even with the uppers it doesn't reach 1. Move them all back to tribals, and restore old comm cap variable
		#	limit = { NOT = { check_variable = { PG_com_cap = 1 } } 	check_variable = { PG_com_cap = 0.01 } NOT = { base_production = 1 } }
		#	change_variable = { which = PG_trb_cap which = PG_com_cap } set_variable = { which = PG_com_cap which = PG_com_old }
		#}
		#if = {
		#	limit = { check_variable = { which = PG_com_cap which = PG_com_old } } 
		#	set_variable = { which = PG_com_cap which = PG_com_old }	set_variable = { which = PG_com_old value = 0 }
		#}
		
		
		
		######################
		# GROWTH RATIOS
		######################
		
		# Now that we have all the capacities allocated in tribal/commoner/upper, it's time to check against the current population values. It is a simple division, being the neutral value 1.00. Anything over 1 will trigger the (hidden) events to grow and promote; anything under 1 will trigger the ones to starve, migrate, demote, etc. 
		
		# Current
		export_to_variable = { which = PG_trb_now value = base_manpower }
		export_to_variable = { which = PG_com_now value = base_production }
		export_to_variable = { which = PG_upp_now value = base_tax }
		set_variable = { which = PG_tot_now which = PG_trb_now } 	change_variable = { which = PG_tot_now which = PG_com_now }	# tot = total
		change_variable = { which = PG_tot_now which = PG_upp_now } set_variable = { which = PG_tot_cap which = PG_trb_cap }
		change_variable = { which = PG_tot_cap which = PG_com_cap } change_variable = { which = PG_tot_cap which = PG_upp_cap } 
		
		# Growths
		if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0.2 } }
		if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0.2 } }
		
		set_variable = { which = PG_trb_grow which = PG_trb_cap } 		 divide_variable = { which = PG_trb_grow which = PG_trb_now }
		set_variable = { which = PG_com_grow which = PG_com_cap } 		 divide_variable = { which = PG_com_grow which = PG_com_now }
		set_variable = { which = PG_upp_grow which = PG_upp_cap } 		 divide_variable = { which = PG_upp_grow which = PG_upp_now }
		
		if = { limit = { NOT = { check_variable = { PG_com_now = 1 } } } set_variable = { which = PG_com_now value = 0 } }	# reset
		if = { limit = { NOT = { check_variable = { PG_upp_now = 1 } } } set_variable = { which = PG_upp_now value = 0 } }	# reset
		
		
		# MODIFIERS, province level
		# Now using the local modifiers local_development_cost. It works in a MULTIPLICATIVELY way and affects growth the more extreme it is
			# I'm leaving devastation / prosperity and monsoons separate, because the growth effect is different depending on the pop type. 
			# If it is left inside the modifier, it will be linear. It is better having it non-linear (very bad at first, not so after)
			
			# Let's track growth components
			set_variable = { which = PS_trbgrw_0 which = PG_trb_grow }
			set_variable = { which = PS_comgrw_0 which = PG_com_grow }
			set_variable = { which = PS_uppgrw_0 which = PG_upp_grow }
		
		trigger_switch = {
			on_trigger = devastation
			75 = { PG_growth_modify_all = { trb = 0.20 com = 0.10 upp = 0.10 } }
			60 = { PG_growth_modify_all = { trb = 0.35 com = 0.25 upp = 0.25 } }
			40 = { PG_growth_modify_all = { trb = 0.60 com = 0.50 upp = 0.40 } }
			15 = { PG_growth_modify_all = { trb = 0.75 com = 0.70 upp = 0.60 } }
			5 = {  multiply_variable = { PG_upp_grow = 0.80 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { PG_growth_modify_all = { trb = 1.10 com = 1.15 upp = 1.20 } }
			50 = { PG_growth_modify_all = { trb = 1.10 com = 1.10 upp = 1.10 } }
			25 = { PG_growth_modify_all = { trb = 1.10 com = 1.05 upp = 1.05 } }
		}
			set_variable = { which = PS_trbgrw_1 which = PG_trb_grow }
			set_variable = { which = PS_comgrw_1 which = PG_com_grow }
			set_variable = { which = PS_uppgrw_1 which = PG_upp_grow }
			
		# Monsoons reduces capacity but increases growth
		trigger_switch = {
			on_trigger = has_province_flag
			flag_severe_monsoon = { multiply_variable = { PG_trb_grow = 1.20 } }
			flag_normal_monsoon = { multiply_variable = { PG_trb_grow = 1.15 } }
			flag_mild_monsoon = {   multiply_variable = { PG_trb_grow = 1.10 } }
		}
			set_variable = { which = PS_trbgrw_2 which = PG_trb_grow }
			
		export_to_variable = { which = PG_grow_extra value = modifier:local_development_cost }		# as 0.2 for +20%
		change_variable = { PG_grow_extra = 1 }														# now 1.2, will modify things
		multiply_variable = { which = PG_trb_grow which = PG_grow_extra }						
		multiply_variable = { which = PG_com_grow which = PG_grow_extra }						
		multiply_variable = { which = PG_upp_grow which = PG_grow_extra }						
			set_variable = { which = PS_trbgrw_3 which = PG_trb_grow }
			set_variable = { which = PS_comgrw_3 which = PG_com_grow }
			set_variable = { which = PS_uppgrw_3 which = PG_upp_grow }
		
		# MODIFIERS, country level
		# Country modifiers affect ADDITIVELY
		export_to_variable = { which = PG_grow_country value = modifier:development_cost who = owner } 
		
		change_variable = { which = PG_trb_grow which = PG_grow_country }
		change_variable = { which = PG_com_grow which = PG_grow_country }
		change_variable = { which = PG_upp_grow which = PG_grow_country }
			set_variable = { which = PS_trbgrw_4 which = PG_trb_grow }
			set_variable = { which = PS_comgrw_4 which = PG_com_grow }
			set_variable = { which = PS_uppgrw_4 which = PG_upp_grow }
		
		
		######################
		#	OTHER EFFECTS
		######################
		# check whether max capacity has increased and no further need for the "Pause" modifier (added at startup event, to avoid losing the initial population)
		if = { limit = { check_variable = { which = PG_trb_cap which = initial_rural } remove_province_modifier = rural_pause } }
		if = { limit = { check_variable = { which = PG_com_cap which = initial_urban } remove_province_modifier = urban_pause } }
		
		# Find how much information is flowing to this province. Will allow for long-range migration
		PG_update_inforange = yes		
		
		# If there was not enough capacity for upper or commoner, change the modifier. Otherwise, return to the old one
		if = {
			limit = { OR = { has_province_flag = PG_move_all has_province_flag = PG_move_upp_com } }
			remove_province_modifier  = popgrowth_viewer
			add_permanent_province_modifier = { name = popgrowth_viewer2 duration = -1 }
		}
		else_if = {
			limit = { has_province_modifier = popgrowth_viewer2 }
			remove_province_modifier  = popgrowth_viewer2 
			add_permanent_province_modifier = { name = popgrowth_viewer duration = -1 }
		}
		
		# Clean variables to be good-looking (/100 for rounding; x100 for percentages)
			# Caps
		divide_variable = { PG_trb_cap = 100 }  multiply_variable = { PG_trb_cap = 100 }	# 4.567 / 100 = 0.045 x 100 = 4.5. 
		divide_variable = { PG_com_cap = 100 }  multiply_variable = { PG_com_cap = 100 }
		divide_variable = { PG_upp_cap = 100 }  multiply_variable = { PG_upp_cap = 100 }
		divide_variable = { PG_tot_cap = 100 }  multiply_variable = { PG_tot_cap = 100 }
		divide_variable = { rural_capacity = 100 }  multiply_variable = { rural_capacity = 100 }
		divide_variable = { urban_capacity = 100 }  multiply_variable = { urban_capacity = 100 }
		
		divide_variable = { PG_urbtransfer = 10 }  multiply_variable = { PG_urbtransfer = 1000 }
		divide_variable = { PG_upptransfer = 10 }  multiply_variable = { PG_upptransfer = 1000 }
		divide_variable = { PG_trb_grow = 10 } multiply_variable = { PG_trb_grow = 1000 }
		divide_variable = { PG_com_grow = 10 } multiply_variable = { PG_com_grow = 1000 }
		divide_variable = { PG_upp_grow = 10 } multiply_variable = { PG_upp_grow = 1000 }
		
		
		##
		# DETAILED: SHOW EACH VARIATION
		## Must be from higherst to lowest, or they will not be there for the next one
		subtract_variable = { which = PS_rur6 which = PS_rur5 }
		subtract_variable = { which = PS_rur5 which = PS_rur4 }
		subtract_variable = { which = PS_rur4 which = PS_rur3 }
		subtract_variable = { which = PS_rur3 which = PS_rur2 }
		subtract_variable = { which = PS_terrmax which = PS_rur2 }
		subtract_variable = { which = PS_rur2 which = PS_rur1 }
		subtract_variable = { which = PS_rur1 which = prov_size }
		
		subtract_variable = { which = PG_fisher3 which = PG_fisher2 }
		subtract_variable = { which = PG_fisher2 which = PG_fisher1 }
		
		subtract_variable = { which = PS_urb5 which = PS_urb4 }
		subtract_variable = { which = PS_urb4 which = PS_urb3 }
		subtract_variable = { which = PS_urb3 which = PS_urb2 }
		subtract_variable = { which = PS_urb2 which = PS_urb1 }
		divide_variable = { PS_urb2 = 100 } 		multiply_variable = { PS_urb2 = 100 }
		divide_variable = { PS_trade_power = 100 } 	multiply_variable = { PS_trade_power = 100 }
		
		subtract_variable = { which = PS_urbanupper3 which = PS_urbanupper2 }
		subtract_variable = { which = PS_urbanupper2 which = PS_urbanupper1 }
		
		subtract_variable = { which = PS_urbtransfer3 which = PS_urbtransfer2 } multiply_variable = { PS_urbtransfer3 = 100 }
		subtract_variable = { which = PS_urbtransfer2 which = PS_urbtransfer1 } multiply_variable = { PS_urbtransfer2 = 100 }
		subtract_variable = { which = PG_upptransfer2 which = PG_upptransfer1 } multiply_variable = { PG_upptransfer2 = 100 }
		multiply_variable = { PG_upptransfer1 = 100 }	multiply_variable = { PS_urbtransfer1 = 100 }
		
		subtract_variable = { which = PS_trbgrw_4 which = PS_trbgrw_3 }
		subtract_variable = { which = PS_trbgrw_3 which = PS_trbgrw_2 }
		subtract_variable = { which = PS_trbgrw_2 which = PS_trbgrw_1 }
		subtract_variable = { which = PS_trbgrw_1 which = PS_trbgrw_0 } 
		
		subtract_variable = { which = PS_comgrw_4 which = PS_comgrw_3 }
		subtract_variable = { which = PS_comgrw_3 which = PS_comgrw_1 }
		subtract_variable = { which = PS_comgrw_1 which = PS_comgrw_0 }
		
		subtract_variable = { which = PS_uppgrw_4 which = PS_uppgrw_3 }
		subtract_variable = { which = PS_uppgrw_3 which = PS_uppgrw_1 }
		subtract_variable = { which = PS_uppgrw_1 which = PS_uppgrw_0 }
		
		multiply_variable = { PS_trbgrw_0 = 100 } multiply_variable = { PS_trbgrw_1 = 100 } multiply_variable = { PS_trbgrw_2 = 100 }
		multiply_variable = { PS_trbgrw_3 = 100 } multiply_variable = { PS_trbgrw_4 = 100 } 
		multiply_variable = { PS_comgrw_0 = 100 } multiply_variable = { PS_comgrw_1 = 100 } 
		multiply_variable = { PS_comgrw_3 = 100 } multiply_variable = { PS_comgrw_4 = 100 }
		multiply_variable = { PS_uppgrw_0 = 100 } multiply_variable = { PS_uppgrw_1 = 100 }
		multiply_variable = { PS_uppgrw_3 = 100 } multiply_variable = { PS_uppgrw_4 = 100 }
		
		set_variable = { which = PS_devextra which = PG_dev_extra } 
		subtract_variable = { PS_devextra = 1 } multiply_variable = { PS_devextra = 100 }
		set_variable = { which = PS_growextra which = PG_grow_extra } 
		subtract_variable = { PS_growextra = 1 } multiply_variable = { PS_growextra = 100 }
		set_variable = { which = PS_growctry which = PG_grow_country } 
		subtract_variable = { PS_growctry = 1 } multiply_variable = { PS_growctry = 100 }
		
		
		
	}
	
	
	option = {
		name = "population_capacity.24.a"
		add_province_modifier = { name = PGD_debug_viewer duration = 30 }
		add_province_modifier = { name = PGD_growth_viewer duration = 30 }
	}
	
}



