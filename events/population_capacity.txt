namespace = population_capacity

########################################################################################
# PROVINCE CAPACITY - Rural, Urban and Upper
########################################################################################
province_event = {
	id = population_capacity.1
	title = "population_capacity.1.t"
	desc = "population_capacity.1.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	# will fire after what may have changed the rural population, every two years
	
	
	immediate = { 
		# HARD BASE, province size. Basically the natural limit to sustain people in this province
		set_variable = { which = rural_capacity which = prov_size }
		multiply_variable = { which = rural_capacity value = 2 } # aprox will be 20.000 farmers for a plot of 1.500 sqkm (40x40km, two days travel by foot)
		
		##### MODIFIERS
		## Weather, winters, etc. Winters will have the option to be "avoidable" if enough Institutions / technology is used in this province. The targets are farming 3 (farming by the time of Greek Classical golden age) and farming 5 (late roman republic; major architectural feats, etc)
		
		# Institutions: 
		# 	- writing_system: without, penalty to total capacity
		# 	- siege_engineering_jnstitution / cast_iron_institution: mitigates Mild Winter, and gives +15% food surplus
		# 	- blast_furnace_institution / advanced_hydraulics_institution: mitigates Normal Winter, and +40% food surplus
		#	- engineering_architecture_institution: mitigates most of Several, and +65% food surplus
		
		# Monsoons 
		#trigger_switch = {
		#	on_trigger = has_monsoon
		#	mild_monsoon = { multiply_variable = { which = rural_capacity value = 0.40 } }
		#	normal_monsoon = { multiply_variable = { which = rural_capacity value = 0.35 } }
		#	severe_monsoon = { multiply_variable = { which = rural_capacity value = 0.30 } }
		#}
		# Winters
		trigger_switch = {
			on_trigger = has_winter
			mild_winter = {
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_jnstitution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.9 } 
				}
				else = { multiply_variable = { which = rural_capacity value = 0.6 } }
			}
			normal_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					# nothing, mitigated
				}
				else_if = { 
					limit = { OR = { siege_engineering_jnstitution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.7 }
				}
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			severe_winter = { 
				if = { 
					limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.8 }
				}
				else_if = { 
					limit = { OR = { siege_engineering_jnstitution = 100 cast_iron_institution = 100 } }
					multiply_variable = { which = rural_capacity value = 0.5 } 
				}
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
		}
		
		
		# arid
		if = { limit = { is_arid_terrain = yes } multiply_variable = { which = rural_capacity value = 0.6 } }
		
		## TERRAINS
		# As in climates, there will be an "improvement" be it either with buildings, or technology. This way some province that may not be fully exploited until an initial investment has been done to it
		
		trigger_switch = {
			on_trigger = has_terrain
			# Farmlands
			farmlands = {
				if = { limit = { has_building = hospital } 	multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			rome_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			carthage_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			athen_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			neapel_t = {
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			byzantion_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			syracuse_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			milet_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			ephesus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			corinth_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			sardis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			susa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			tyros_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			halicarnassus_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			argos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			# Grasslands
			grasslands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.20 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.10 } }
				# else, 1.00
			}
			steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			savannah = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			# Drier lands
			mediterranean = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			drylands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			ninive_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.1 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			# Coastals
			coastline = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			naxos_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			steep_coast = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			patara_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			coastal_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.65 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			
			# Forests
			woods = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.65 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			forest = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			forest_steppe = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.40 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			mangrove = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.85 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.50 } }
				else = { multiply_variable = { which = rural_capacity value = 0.40 } }
			}
			
			# Mountains
			hills = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			jerusalem_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.25 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.15 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.90 } }
				else = { multiply_variable = { which = rural_capacity value = 0.75 } }
			}
			mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.70 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.55 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.10 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.80 } }
				else = { multiply_variable = { which = rural_capacity value = 0.60 } }
			}
			fertile_highlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			parsa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.05 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			
			# Rivers and oasis
			oasis = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			siwa_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.30 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.95 } }
				else = { multiply_variable = { which = rural_capacity value = 0.80 } }
			}
			wetlands = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.95 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.90 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.60 } }
				else = { multiply_variable = { which = rural_capacity value = 0.50 } }
			}
			marsh = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.05 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.80 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.45 } }
				else = { multiply_variable = { which = rural_capacity value = 0.35 } }
			}
			floodplains = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.4 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.2 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			alluvial_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.6 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.5 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.3 } }
				else = { multiply_variable = { which = rural_capacity value = 1.1 } }
			}
			mesopotamian_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			babil_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			uruk_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.8 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.7 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.4 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			nile_plain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			memphis_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			waset_t = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 2.0 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.9 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.5 } }
				else = { multiply_variable = { which = rural_capacity value = 1.2 } }
			}
			desert_river = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 1.40 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 1.35 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 1.20 } }
				# else 1.00
			}
			# Deserts
			desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			salt_desert = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			desert_mountain = { 
				if = { limit = { has_building = hospital } multiply_variable = { which = rural_capacity value = 0.60 } }
				else_if = { limit = { has_building = medicus } multiply_variable = { which = rural_capacity value = 0.45 } }
				else_if = { limit = { has_building = herbalist } multiply_variable = { which = rural_capacity value = 0.30 } }
				else = { multiply_variable = { which = rural_capacity value = 0.25 } }
			}
			
			
		}
		
		# Not having starting institution (minimum), causes 40% decrease. Will affect all places outside Greek influence, Egypt, Fertile Crescent
		#if = {
		#	limit = { NOT = { OR = { has_terrain = steppe has_terrain = forest_steppe } } NOT = { writing_system = 100 } }
		#	multiply_variable = { which = rural_capacity value = 0.60 }
		#}
		# Removed, as writing systems would affect Gaul and other "not so uncivilized" places. Winters will work good as well. 
		
		
		# FISHING BLOCK - depending on province size (and coastal), and coastal buildings
		if = {		limit = { has_port = yes check_variable = { prov_size = 7 } } set_variable = { which = rural_fishermen value = 3 } }
		else_if = {	limit = { has_port = yes check_variable = { prov_size = 4 } } set_variable = { which = rural_fishermen value = 2 } }
		else_if = {	limit = { has_port = yes check_variable = { prov_size = 1 } } set_variable = { which = rural_fishermen value = 1 } }
		
		if = {		
			limit = { 
				has_port = yes 
				OR = { 	has_building = big_harbor	 	has_building = harbor_district	}	# port lv 2 or 3
			}
			change_variable = { which = rural_fishermen value = 2 } 
			multiply_variable = { which = rural_fishermen value = 1.35 } 
		}
		else_if = {		
			limit = { 
				has_port = yes 
				OR = { 	has_building = small_harbor 	 has_building = big_harbor	 	has_building = harbor_district	}	# any port
			}
			change_variable = { which = rural_fishermen value = 1 } 
		}
		change_variable = { which = rural_capacity which = rural_fishermen }
		set_variable = { which = rural_fishermen value = 0 } 
		
		# BUILDINGS - now the only buildings that can increase "by itself" is agri infastructure (terrain) and land development
		trigger_switch = {
			on_trigger = has_province_modifier
			land_reclamtion_1 = { change_variable = { rural_capacity = 1 } multiply_variable = { rural_capacity = 1.05 } }
			land_reclamtion_2 = { change_variable = { rural_capacity = 2 } multiply_variable = { rural_capacity = 1.10 } }
			land_reclamtion_3 = { change_variable = { rural_capacity = 3 } multiply_variable = { rural_capacity = 1.15 } }
			land_reclamtion_4 = { change_variable = { rural_capacity = 4 } multiply_variable = { rural_capacity = 1.20 } }
			land_reclamtion_5 = { change_variable = { rural_capacity = 5 } multiply_variable = { rural_capacity = 1.25 } }
		}
		
		# TRANSFER TO "URBAN" POPULATION - where Urban means "connected" enough to the normal markets, like exports, cash-crops, etc
		set_variable = { which = rural_transfer value = 0 }	# reset, in case no buildings available
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	set_variable = { which = rural_transfer value = 0.1 } }
			big_bath = { 	set_variable = { which = rural_transfer value = 0.3 } }
		}
		trigger_switch = {
			on_trigger = has_building		
			small_water_irrigation = { 	change_variable = { rural_transfer = 0.1 } }
			big_water_irrigation = { 	change_variable = { rural_transfer = 0.2 } }
			big_estate = { 		change_variable = { rural_transfer = 0.5 } }
			
			craftsman = { 		change_variable = { rural_transfer = 0.1 } }
			small_workshop = { 	change_variable = { rural_transfer = 0.2 } }
			artisan_district = { change_variable = { rural_transfer = 0.5 } }
			
			quarry = { 			change_variable = { rural_transfer = 0.1 } }
			small_mine = { 		change_variable = { rural_transfer = 0.2 } }
			big_mine = { 		change_variable = { rural_transfer = 0.5 } }
		}
		# Transfer rural population to "urbanized" pops
		set_variable = { which = urban_capacity which = rural_capacity }
		multiply_variable = { which = urban_capacity which = rural_transfer }	# moved initial population to urban
		set_variable = { which = rural_transfer which = rural_capacity }		# rural transfer will be used later, based on the pre-transfer rural pop
		subtract_variable = { which = rural_capacity which = urban_capacity }	# aaand they are gone from the fields
		
		
		# Devastation, will reduce as a simple scale 1 to 99% malus. Prosperity increases up to 10%
		#trigger_switch = {
		#	on_trigger = devastation
		#	75 = { multiply_variable = { which = rural_capacity value = 0.50 } }	# much less devastation, but urban life will be over
		#	60 = { multiply_variable = { which = rural_capacity value = 0.60 } }	# it will actually affect rural growth ratio, so, no growth at all
		#	40 = { multiply_variable = { which = rural_capacity value = 0.75 } }
		#	15 = { multiply_variable = { which = rural_capacity value = 0.90 } }
		#}
		
		# Special province modifiers
		# To be implemented, it will be any kind of modifer that increases rural cap
		#trigger_switch = {
		#	on_trigger = has_province_modifier
		#	migration_wave_1 = { multiply_variable = { which = rural_capacity value = 0.80 } }
		#	migration_wave_2 = { multiply_variable = { which = rural_capacity value = 0.70 } }
		#	migration_wave_3 = { multiply_variable = { which = rural_capacity value = 0.60 } }
		#}
		#trigger_switch = {					
		#	on_trigger = has_province_modifier
		#	rural_cap1 = { change_variable = { which = rural_capacity value = 1 } }
		#	rural_cap2 = { change_variable = { which = rural_capacity value = 2 } }
		#	rural_cap3 = { change_variable = { which = rural_capacity value = 3 } }
		#}
		
		
		# In case a province does not count at least 1; usually deserts and such
		if = { limit = { NOT = { check_variable = { rural_capacity = 1 } } } 		set_variable = { which = rural_capacity value = 1 } }
		
		######
		# 	RURAL GROWTH RATIO
		######
		export_to_variable = { which = rural_pop value = base_manpower }
		set_variable = { which = rural_growth which = rural_capacity }
		divide_variable = { which = rural_growth which = rural_pop }		
		
		# MODIFIERS that apply at the end
		
		# Blessings. Could affect both (general % increase) or only in 
		#if = {
		#	limit = { owner = { has_country_modifier = blessing_artemis_good } check_variable = { rural_growth = 1.00 } }
		#	multiply_variable = { which = rural_growth value = 1.20 }
		#}
		#else_if = {
		#	limit = { owner = { has_country_modifier = blessing_artemis_bad } check_variable = { rural_growth = 1.00 } }
		#	multiply_variable = { which = rural_growth value = 1.40 }
		#}
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = rural_growth value = 0.20 } }	# this will (probably) offset the growth ++ due to pop loss
			60 = { multiply_variable = { which = rural_growth value = 0.35 } }
			40 = { multiply_variable = { which = rural_growth value = 0.50 } }
			15 = { multiply_variable = { which = rural_growth value = 0.75 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = rural_growth value = 1.15 } }
			50 = { multiply_variable = { which = rural_growth value = 1.10 } }
			25 = { multiply_variable = { which = rural_growth value = 1.05 } }
		}
		# Added to the mod as a mitigating option: Stability increased total growth
		if = { 		limit = { owner = { stability = 3 } } multiply_variable = { which = rural_growth value = 1.3 } }
		else_if = { limit = { owner = { stability = 2 } } multiply_variable = { which = rural_growth value = 1.2 } }
		else_if = { limit = { owner = { stability = 1 } } multiply_variable = { which = rural_growth value = 1.1 } }
		
		
		######################
		## URBAN CAPACITY
		######################
		
		# Remember: we already have the urban capacity from the transferred ones, before
		
		# The formula that will link BASE rural population (prior to the transfer to urban. So, everyone living off the fields). Basically a proportion of rural to urban, depending of the available farming technology. The more food the rural population create, the more "surplus" population that can dedicate to do anything else and is less dragged to the land - the mod definition of commoner or urban population. 
			# Lv0: /20	Lv1: /10	Lv2: /6		Lv3: /5		Lv4: /4		Lv5: /3.50	Lv6: /3
		
		if = { 	
			limit = { engineering_architecture_institution = 100 }
			divide_variable = { which = rural_transfer 	value = 1.35 } 	# 75% food surplus
		}
		else_if = { 	
			limit = { OR = { blast_furnace_institution = 100 advanced_hydraulics_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 2.5 } 	# 40% food surplus
		}
		else_if = {
			limit = { OR = { siege_engineering_jnstitution = 100 cast_iron_institution = 100 } }
			divide_variable = { which = rural_transfer 	value = 5 } 	# 20% food surplus
		}
		else = { divide_variable = { which = rural_transfer 	value = 10 } }	# 10% food surplus (nothing...)
		change_variable = { which = urban_capacity which = rural_transfer } set_variable = { which = rural_transfer value = 0 }
				
		## PRODUCTION BUILDINGS
		# Production buildings provice mostly % increase to production, and a quite good flat bonus. Usually this building will be one of the firsts to be built in a good prospective place. 
		# A "basic" flat bonus is granted, and then certain prov_types are better (productive agriculture, latifundiae, mining) and will provide a bigger flat bonus. Also these prov_types have got less powerful trade-to-urban multiplier (4 or 3.5 instead of 3)
		
		
		trigger_switch = {
			on_trigger = has_building
			small_harbor = { 	change_variable = { which = urban_capacity value = 0.1 } }
			big_harbor = { 		change_variable = { which = urban_capacity value = 0.3 } }
			harbor_district = { change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_shipyard = { change_variable = { which = urban_capacity value = 0.3 } }
			big_shipyard = { change_variable = { which = urban_capacity value = 0.7 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_market = { 	change_variable = { which = urban_capacity value = 0.1 } }
			medium_market = { 	change_variable = { which = urban_capacity value = 0.3 } }
			great_market = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			small_army_camp = { 			change_variable = { which = urban_capacity value = 0.2 } }
			small_military_settlement = { 	change_variable = { which = urban_capacity value = 0.5 } }
			big_military_settlement = { 	change_variable = { which = urban_capacity value = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			gravel_road = { 	change_variable = { which = urban_capacity value = 0.1 } }
			paved_road = { 		change_variable = { which = urban_capacity value = 0.3 } }
			imperial_road = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			shrine = { 			change_variable = { which = urban_capacity value = 0.2 } }
			small_temple = { 	change_variable = { which = urban_capacity value = 0.5 } }
			great_temple = { 	change_variable = { which = urban_capacity value = 1.2 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_theater = { 	change_variable = { which = urban_capacity value = 0.3 } }
			great_theater = { 	change_variable = { which = urban_capacity value = 0.6 } }
			huge_theater = { 	change_variable = { which = urban_capacity value = 1.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			taxman = { 			change_variable = { which = urban_capacity value = 0.2 } }
			tax_collector = { 	change_variable = { which = urban_capacity value = 0.5 } }
		}
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = urban_capacity value = 0.2 } }
			government_palace = { 	change_variable = { which = urban_capacity value = 0.4 } }
			government_district = { change_variable = { which = urban_capacity value = 0.6 } }
		}
		trigger_switch = {						# Soldiers live somewhere, don't you think?
			on_trigger = has_building
			small_city_walls = { change_variable = { which = urban_capacity value = 0.4 } }
			large_city_walls = { change_variable = { which = urban_capacity value = 1.0 } }
			border_garrison = { change_variable = { which = urban_capacity value = 0.2 } }
		}
		
		trigger_switch = {
			on_trigger = has_building
			library = { 			change_variable = { which = urban_capacity value = 0.3 } }
			great_library = { 		change_variable = { which = urban_capacity value = 1.5 } }
			mathematician_academy = { change_variable = { which = urban_capacity value = 1.0 } }
			philosophers_academy = { change_variable = { which = urban_capacity value = 1.0 } }
			military_academy = { 	change_variable = { which = urban_capacity value = 1.0 } }
			palace_garden = { 		change_variable = { which = urban_capacity value = 0.5 } }
			imperial_palace = { 	change_variable = { which = urban_capacity value = 1.0 } }
		}
		
		# TEMPLES and BURIAL GROUNDS
		# Temples mean the basic temple, as well as all the festivities, preparations, and auxiliary industry that it needs to sustain itself. It will be a fraction of temple and burial power. Burial power only for upper class in "good" province types. 
		#set_variable = { which = temple_urban which = temple_power } multiply_variable = { which = temple_urban value = 0.5 }
		#change_variable = { which = urban_capacity which = temple_urban }	set_variable = { which = temple_urban value = 0 }
		
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = urban_capacity value = 1 } # +1 urban and +1 upper, for all capitals
		}
		
		
		# END OF BUILDINGS and other "flat" capacity increases
		
		################################
		## THE TRADE POWER MULTIPLIER ##
		################################
		
		# We will have a multiplier depending on how profitable trade is, depending the prov_type
		export_to_variable = { which = urban_trade_power value = province_trade_power }
		
		if = {
			limit = { check_variable = { urban_trade_power = 42 } } 		# more than 42 power, 10 pops already and /6 afterwards
			change_variable = { urban_capacity = 10 } subtract_variable = { urban_trade_power = 42 } divide_variable = { urban_trade_power = 6 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 22 } } 		# more than 22 power, 6 pops already and /5 afterwards
			change_variable = { urban_capacity = 6 } subtract_variable = { urban_trade_power = 22 } divide_variable = { urban_trade_power = 5 } 
		}
		else_if = {
			limit = { check_variable = { urban_trade_power = 10 } } 		# more than 10 power, 3 pops already and /4 afterwards
			change_variable = { urban_capacity = 3 } subtract_variable = { urban_trade_power = 10 } divide_variable = { urban_trade_power = 4 } 
		}
		else_if = { limit = { NOT = { check_variable = { urban_trade_power = 0.1 } } } set_variable = { which = urban_trade_power value = 0.1 } }
		else = { divide_variable = { urban_trade_power = 3.3 } }
		
		change_variable = { which = urban_capacity which = urban_trade_power }	# add the remaining trade power (applies to all)
		set_variable = { which = urban_trade_power value = 0 }
		
		#####
		#	RELATIVE % MODIFIERS
		#####
		
		trigger_switch = {
			on_trigger = has_province_modifier
			land_reclamtion_1 = { multiply_variable = { urban_capacity = 1.05 } }
			land_reclamtion_2 = { multiply_variable = { urban_capacity = 1.10 } }
			land_reclamtion_3 = { multiply_variable = { urban_capacity = 1.15 } }
			land_reclamtion_4 = { multiply_variable = { urban_capacity = 1.20 } }
			land_reclamtion_5 = { multiply_variable = { urban_capacity = 1.25 } }
		}
		
		
		# Devastation, will reduce as a simple scale 1 to 99% malus. Prosperity increases up to 10%
		#trigger_switch = {
		#	on_trigger = devastation
		#	65 = { multiply_variable = { which = urban_capacity value = 0.10 } }	# completely destroyed
		#	40 = { multiply_variable = { which = urban_capacity value = 0.25 } }
		#	30 = { multiply_variable = { which = urban_capacity value = 0.50 } }
		#	15 = { multiply_variable = { which = urban_capacity value = 0.70 } }
		#	5 = {  multiply_variable = { which = urban_capacity value = 0.80 } }
		#}
		
		# Special province modifiers
		# To be implemented, it will be any kind of modifer that increases rural cap
		#trigger_switch = {
		#	on_trigger = has_province_modifier
		#	migration_wave_1 = { multiply_variable = { which = urban_capacity value = 0.70 } }
		#	migration_wave_2 = { multiply_variable = { which = urban_capacity value = 0.60 } }
		#	migration_wave_3 = { multiply_variable = { which = urban_capacity value = 0.50 } }
		#}
		#trigger_switch = {					
		#	on_trigger = has_province_modifier
		#	rural_cap1 = { change_variable = { which = urban_capacity value = 1 } }
		#	rural_cap2 = { change_variable = { which = urban_capacity value = 2 } }
		#	rural_cap3 = { change_variable = { which = urban_capacity value = 3 } }
		#}
		
		# 	URBAN GROWTH RATIO
		export_to_variable = { which = urban_pop value = base_production }
		if = {
			limit = { NOT = { check_variable = { which = urban_pop value = 1 } } }
			set_variable = { which = urban_pop value = 0.5 }
		}
		set_variable = { which = urban_growth which = urban_capacity } divide_variable = { which = urban_growth which = urban_pop }
		
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = urban_growth value = 0.10 } }
			60 = { multiply_variable = { which = urban_growth value = 0.25 } }
			40 = { multiply_variable = { which = urban_growth value = 0.50 } }
			15 = { multiply_variable = { which = urban_growth value = 0.70 } }
			
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = urban_growth value = 1.15 } }
			50 = { multiply_variable = { which = urban_growth value = 1.10 } }
			25 = { multiply_variable = { which = urban_growth value = 1.05 } }
		}
		
		# Added to the mod as a mitigating option: Stability increased total growth
		if = { 		limit = { owner = { stability = 3 } } multiply_variable = { which = urban_growth value = 1.5 } }
		else_if = { limit = { owner = { stability = 2 } } multiply_variable = { which = urban_growth value = 1.3 } }
		else_if = { limit = { owner = { stability = 1 } } multiply_variable = { which = urban_growth value = 1.15 } }
		
		#########
		# 	UPPER CAPACITY
		#########
		
		# Add the 10% of previous population. Basically the exported rural and urban pops. 
		
		set_variable = { which = upper_capacity which = rural_pop } change_variable = { which = upper_capacity which = urban_pop }
		set_variable = { which = rural_pop value = 0 } 				set_variable = { which = urban_pop value = 0 }
		divide_variable = { which = upper_capacity value = 10 }
			# This block will create at least a 10% uppers out of the total CURRENT population (so that it never gets much higher than the underlying population). Remember that high amount of upper pops without commoners will not sustain by itself, as uppers consume trade power generated by commoners, and the same for rural populations. Without enough support, they may hinder a province severily, despite the increased trade %. 
		
		trigger_switch = {
			on_trigger = has_building
			big_townhall = { 		change_variable = { which = upper_capacity value = 0.2 } }
			government_palace = { 	change_variable = { which = upper_capacity value = 0.4 } }
			government_district = { change_variable = { which = upper_capacity value = 1.0 } }
		}
		trigger_switch = {
			on_trigger = has_building
			library = { 				change_variable = { which = upper_capacity value = 0.2 } }
			great_library = { 			change_variable = { which = upper_capacity value = 1.0 } }
			mathematician_academy = { 	change_variable = { which = upper_capacity value = 1.0 } }
			philosophers_academy = { 	change_variable = { which = upper_capacity value = 1.0 } }
			military_academy = { 		change_variable = { which = upper_capacity value = 1.0 } }
			palace_garden = { 			change_variable = { which = upper_capacity value = 0.5 } }
			imperial_palace = { 		change_variable = { which = upper_capacity value = 1.5 } }
		}
		
		# TEMPLES AND BURIAL GROUNDS
		#if = {
		#	limit = { OR = { has_province_modifier = pt_holy_site has_province_modifier = pt_temple_city } }
		#	set_variable = { which = temple_upper which = temple_power } multiply_variable = { which = temple_upper value = 0.25 }
		#	change_variable = { which = upper_capacity which = temple_upper }	set_variable = { which = temple_upper value = 0 }
		#	set_variable = { which = burial_upper which = burial_power } multiply_variable = { which = burial_upper value = 0.25 }
		#	change_variable = { which = upper_capacity which = burial_upper }	set_variable = { which = burial_upper value = 0 }
		#}
		#else = {
		#	set_variable = { which = temple_upper which = temple_power } multiply_variable = { which = temple_upper value = 0.10 }
		#	change_variable = { which = upper_capacity which = temple_upper }	set_variable = { which = temple_upper value = 0 }
		#}
		
		# IMPERIAL CAPITAL
		# CAPITAL PALACE (small city, capital of the country)
		if = { 
			limit = { is_capital = yes } 
			change_variable = { which = upper_capacity value = 1 } # +1 urban and +1 upper, for all capitals
		}
		
		# IMPERIAL CAPITAL
		# Will be affected by 1) rank, 2) total development
		# % by rank are added here as well, as they are needed to be done AFTER the other flat bonuses. May be too high, could be changed in the future
		if = { limit = { 	  is_capital = yes owner = { total_development = 5000 } } change_variable = { upper_capacity = 5 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 2500 } } change_variable = { upper_capacity = 4 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 1500 } } change_variable = { upper_capacity = 3 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 1000 } } change_variable = { upper_capacity = 2 } }
		else_if = { limit = { is_capital = yes owner = { total_development = 500 } }  change_variable = { upper_capacity = 1.5 } }
		
		
		#########################
		#	MODIFIERS			#
		#########################
		# The effect that affect ALL capacity, added at the bottom
		
		# Urban amenities (small flat bonus to urban, but quite big effect on upper population)
		trigger_switch = {
			on_trigger = has_building
			small_bath = { 	multiply_variable = { which = upper_capacity value = 1.10 } }
			big_bath = { 	multiply_variable = { which = upper_capacity value = 1.25 } }
		}
		
		# Devastation, will reduce as a simple scale 1 to 99% malus. Prosperity increases up to 15%
		
		# 	UPPER GROWTH RATIO
		export_to_variable = { which = upper_pop value = base_tax }
		if = { 
			limit = { NOT = { check_variable = { which = upper_pop value = 1 } } }
			set_variable = { which = upper_pop value = 0.2 } 
			# bigger maximum ratio than urban pop. Also notice that most events of employment or upper promotion will need a modifier of 5, which means at least a 1 "healthy" upper pop capacity is needed to have a place here
		}
		set_variable = { which = upper_growth which = upper_capacity } divide_variable = { which = upper_growth which = upper_pop }
		set_variable = { which = upper_pop value = 0 }
		
		trigger_switch = {
			on_trigger = devastation
			75 = { multiply_variable = { which = upper_growth value = 0.10 } }
			60 = { multiply_variable = { which = upper_growth value = 0.25 } }
			40 = { multiply_variable = { which = upper_growth value = 0.50 } }
			15 = { multiply_variable = { which = upper_growth value = 0.70 } }
			5 = {  multiply_variable = { which = upper_growth value = 0.80 } }
		}
		trigger_switch = {
			on_trigger = prosperity
			99 = { multiply_variable = { which = upper_growth value = 1.15 } }
			50 = { multiply_variable = { which = upper_growth value = 1.10 } }
			25 = { multiply_variable = { which = upper_growth value = 1.05 } }
		}
		
		# Added to the mod as a mitigating option: Stability increased total growth
		if = { 		limit = { owner = { stability = 3 } } multiply_variable = { which = upper_growth value = 2.0 } }
		else_if = { limit = { owner = { stability = 2 } } multiply_variable = { which = upper_growth value = 1.5 } }
		else_if = { limit = { owner = { stability = 1 } } multiply_variable = { which = upper_growth value = 1.2 } }
		
	}
	
	
	option = {
		name = "population_capacity.1.a"
			# ok, all done inside the immediate
	}
	
}
country_event = {
	id = population_capacity.2
	title = "population_capacity.2.t"
	desc = "population_capacity.2.d"
	picture = peasant_woman
	hidden = yes
	
	is_triggered_only = yes
	
	option = {
		name = "population_capacity.2.a"
		hidden_effect = {
			every_owned_province = {
				# Pop capacities
				province_event = { id = population_capacity.1 }	# Pop capacities for rural, urban, upper
				if = { 
					limit = { NOT = { has_province_modifier = popgrowth_viewer } }
					add_permanent_province_modifier = { name = popgrowth_viewer duration = -1 }
				}
			}
		}
	}
	
}
####
# DISPLAY EACH SUPER-REGION ECONOMIC CAPABILITIES
####
country_event = {
	id = population_capacity.3
	title = "population_capacity.3.t"
	desc = "population_capacity.3.d"
	picture = peasant_woman
	
	is_triggered_only = yes
	
	immediate = {
		popgrowth_cleanup_world = yes
		every_province = {
			# 1 Hispania, 2 Celtica, 3 Germania, 4 Britannica, 5 Italia
			if = {
				limit = { superregion = hispania_superregion }
				export_to_variable = { which = rural_now_01 value = base_manpower } set_variable = { which = total_cap_01 which = rural_capacity }
				export_to_variable = { which = urban_now_01 value = base_production } change_variable = { which = total_cap_01 which = urban_capacity }
				export_to_variable = { which = upper_now_01 value = base_tax } 		change_variable = { which = total_cap_01 which = upper_capacity }
				export_to_variable = { which = devel_now_01 value = development }
				set_variable = { which = rural_cap_01 which = rural_capacity } set_variable = { which = urban_cap_01 which = urban_capacity }
				set_variable = { which = upper_cap_01 which = upper_capacity } set_variable = { which = prov_size_01 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_01 which = PREV } change_variable = { which = urban_now_01 which = PREV } 
					change_variable = { which = upper_now_01 which = PREV } change_variable = { which = devel_now_01 which = PREV } 
					change_variable = { which = prov_size_01 which = PREV } 	change_variable = { which = total_cap_01 which = PREV } 
					change_variable = { which = rural_cap_01 which = PREV } change_variable = { which = urban_cap_01 which = PREV } 
					change_variable = { which = upper_cap_01 which = PREV } 
				}
			}
			if = {
				limit = { superregion = celtica_superregion }
				export_to_variable = { which = rural_now_02 value = base_manpower } set_variable = { which = total_cap_02 which = rural_capacity }
				export_to_variable = { which = urban_now_02 value = base_production } change_variable = { which = total_cap_02 which = urban_capacity }
				export_to_variable = { which = upper_now_02 value = base_tax } 		change_variable = { which = total_cap_02 which = upper_capacity }
				export_to_variable = { which = devel_now_02 value = development }
				set_variable = { which = rural_cap_02 which = rural_capacity } set_variable = { which = urban_cap_02 which = urban_capacity }
				set_variable = { which = upper_cap_02 which = upper_capacity } set_variable = { which = prov_size_02 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_02 which = PREV } change_variable = { which = urban_now_02 which = PREV } 
					change_variable = { which = upper_now_02 which = PREV } change_variable = { which = devel_now_02 which = PREV } 
					change_variable = { which = prov_size_02 which = PREV } 	change_variable = { which = total_cap_02 which = PREV } 
					change_variable = { which = rural_cap_02 which = PREV } change_variable = { which = urban_cap_02 which = PREV } 
					change_variable = { which = upper_cap_02 which = PREV } 
				}
			}
			if = {
				limit = { superregion = germania_superregion }
				export_to_variable = { which = rural_now_03 value = base_manpower } set_variable = { which = total_cap_03 which = rural_capacity }
				export_to_variable = { which = urban_now_03 value = base_production } change_variable = { which = total_cap_03 which = urban_capacity }
				export_to_variable = { which = upper_now_03 value = base_tax } 		change_variable = { which = total_cap_03 which = upper_capacity }
				export_to_variable = { which = devel_now_03 value = development }
				set_variable = { which = rural_cap_03 which = rural_capacity } set_variable = { which = urban_cap_03 which = urban_capacity }
				set_variable = { which = upper_cap_03 which = upper_capacity } set_variable = { which = prov_size_03 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_03 which = PREV } change_variable = { which = urban_now_03 which = PREV } 
					change_variable = { which = upper_now_03 which = PREV } change_variable = { which = devel_now_03 which = PREV } 
					change_variable = { which = prov_size_03 which = PREV } 	change_variable = { which = total_cap_03 which = PREV } 
					change_variable = { which = rural_cap_03 which = PREV } change_variable = { which = urban_cap_03 which = PREV } 
					change_variable = { which = upper_cap_03 which = PREV } 
				}
			}
			if = {
				limit = { superregion = britannia_superregion }
				export_to_variable = { which = rural_now_04 value = base_manpower } set_variable = { which = total_cap_04 which = rural_capacity }
				export_to_variable = { which = urban_now_04 value = base_production } change_variable = { which = total_cap_04 which = urban_capacity }
				export_to_variable = { which = upper_now_04 value = base_tax } 		change_variable = { which = total_cap_04 which = upper_capacity }
				export_to_variable = { which = devel_now_04 value = development }
				set_variable = { which = rural_cap_04 which = rural_capacity } set_variable = { which = urban_cap_04 which = urban_capacity }
				set_variable = { which = upper_cap_04 which = upper_capacity } set_variable = { which = prov_size_04 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_04 which = PREV } change_variable = { which = urban_now_04 which = PREV } 
					change_variable = { which = upper_now_04 which = PREV } change_variable = { which = devel_now_04 which = PREV } 
					change_variable = { which = prov_size_04 which = PREV } 	change_variable = { which = total_cap_04 which = PREV } 
					change_variable = { which = rural_cap_04 which = PREV } change_variable = { which = urban_cap_04 which = PREV } 
					change_variable = { which = upper_cap_04 which = PREV } 
				}
			}
			if = {
				limit = { superregion = italia_superregion }
				export_to_variable = { which = rural_now_05 value = base_manpower } set_variable = { which = total_cap_05 which = rural_capacity }
				export_to_variable = { which = urban_now_05 value = base_production } change_variable = { which = total_cap_05 which = urban_capacity }
				export_to_variable = { which = upper_now_05 value = base_tax } 		change_variable = { which = total_cap_05 which = upper_capacity }
				export_to_variable = { which = devel_now_05 value = development }
				set_variable = { which = rural_cap_05 which = rural_capacity } set_variable = { which = urban_cap_05 which = urban_capacity }
				set_variable = { which = upper_cap_05 which = upper_capacity } set_variable = { which = prov_size_05 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_05 which = PREV } change_variable = { which = urban_now_05 which = PREV } 
					change_variable = { which = upper_now_05 which = PREV } change_variable = { which = devel_now_05 which = PREV } 
					change_variable = { which = prov_size_05 which = PREV } 	change_variable = { which = total_cap_05 which = PREV } 
					change_variable = { which = rural_cap_05 which = PREV } change_variable = { which = urban_cap_05 which = PREV } 
					change_variable = { which = upper_cap_05 which = PREV } 
				}
			}
			
			# 6 Macedonia, 7 Haemusia, 8 Asia, 9 Mesopotamia, 10 Syria
			if = {
				limit = { superregion = macedonia_superregion }
				export_to_variable = { which = rural_now_06 value = base_manpower } set_variable = { which = total_cap_06 which = rural_capacity }
				export_to_variable = { which = urban_now_06 value = base_production } change_variable = { which = total_cap_06 which = urban_capacity }
				export_to_variable = { which = upper_now_06 value = base_tax } 		change_variable = { which = total_cap_06 which = upper_capacity }
				export_to_variable = { which = devel_now_06 value = development }
				set_variable = { which = rural_cap_06 which = rural_capacity } set_variable = { which = urban_cap_06 which = urban_capacity }
				set_variable = { which = upper_cap_06 which = upper_capacity } set_variable = { which = prov_size_06 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_06 which = PREV } change_variable = { which = urban_now_06 which = PREV } 
					change_variable = { which = upper_now_06 which = PREV } change_variable = { which = devel_now_06 which = PREV } 
					change_variable = { which = prov_size_06 which = PREV } 	change_variable = { which = total_cap_06 which = PREV } 
					change_variable = { which = rural_cap_06 which = PREV } change_variable = { which = urban_cap_06 which = PREV } 
					change_variable = { which = upper_cap_06 which = PREV } 
				}
			}
			if = {
				limit = { superregion = haemusia_superregion }
				export_to_variable = { which = rural_now_07 value = base_manpower } set_variable = { which = total_cap_07 which = rural_capacity }
				export_to_variable = { which = urban_now_07 value = base_production } change_variable = { which = total_cap_07 which = urban_capacity }
				export_to_variable = { which = upper_now_07 value = base_tax } 		change_variable = { which = total_cap_07 which = upper_capacity }
				export_to_variable = { which = devel_now_07 value = development }
				set_variable = { which = rural_cap_07 which = rural_capacity } set_variable = { which = urban_cap_07 which = urban_capacity }
				set_variable = { which = upper_cap_07 which = upper_capacity } set_variable = { which = prov_size_07 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_07 which = PREV } change_variable = { which = urban_now_07 which = PREV } 
					change_variable = { which = upper_now_07 which = PREV } change_variable = { which = devel_now_07 which = PREV } 
					change_variable = { which = prov_size_07 which = PREV } 	change_variable = { which = total_cap_07 which = PREV } 
					change_variable = { which = rural_cap_07 which = PREV } change_variable = { which = urban_cap_07 which = PREV } 
					change_variable = { which = upper_cap_07 which = PREV } 
				}
			}
			if = {
				limit = { superregion = asia_superregion }
				export_to_variable = { which = rural_now_08 value = base_manpower } set_variable = { which = total_cap_08 which = rural_capacity }
				export_to_variable = { which = urban_now_08 value = base_production } change_variable = { which = total_cap_08 which = urban_capacity }
				export_to_variable = { which = upper_now_08 value = base_tax } 		change_variable = { which = total_cap_08 which = upper_capacity }
				export_to_variable = { which = devel_now_08 value = development }
				set_variable = { which = rural_cap_08 which = rural_capacity } set_variable = { which = urban_cap_08 which = urban_capacity }
				set_variable = { which = upper_cap_08 which = upper_capacity } set_variable = { which = prov_size_08 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_08 which = PREV } change_variable = { which = urban_now_08 which = PREV } 
					change_variable = { which = upper_now_08 which = PREV } change_variable = { which = devel_now_08 which = PREV } 
					change_variable = { which = prov_size_08 which = PREV } 	change_variable = { which = total_cap_08 which = PREV } 
					change_variable = { which = rural_cap_08 which = PREV } change_variable = { which = urban_cap_08 which = PREV } 
					change_variable = { which = upper_cap_08 which = PREV } 
				}
			}
			if = {
				limit = { superregion = mesopotamia_superregion }
				export_to_variable = { which = rural_now_09 value = base_manpower } set_variable = { which = total_cap_09 which = rural_capacity }
				export_to_variable = { which = urban_now_09 value = base_production } change_variable = { which = total_cap_09 which = urban_capacity }
				export_to_variable = { which = upper_now_09 value = base_tax } 		change_variable = { which = total_cap_09 which = upper_capacity }
				export_to_variable = { which = devel_now_09 value = development }
				set_variable = { which = rural_cap_09 which = rural_capacity } set_variable = { which = urban_cap_09 which = urban_capacity }
				set_variable = { which = upper_cap_09 which = upper_capacity } set_variable = { which = prov_size_09 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_09 which = PREV } change_variable = { which = urban_now_09 which = PREV } 
					change_variable = { which = upper_now_09 which = PREV } change_variable = { which = devel_now_09 which = PREV } 
					change_variable = { which = prov_size_09 which = PREV } 	change_variable = { which = total_cap_09 which = PREV } 
					change_variable = { which = rural_cap_09 which = PREV } change_variable = { which = urban_cap_09 which = PREV } 
					change_variable = { which = upper_cap_09 which = PREV } 
				}
			}
			if = {
				limit = { superregion = syria_superregion }
				export_to_variable = { which = rural_now_10 value = base_manpower } set_variable = { which = total_cap_10 which = rural_capacity }
				export_to_variable = { which = urban_now_10 value = base_production } change_variable = { which = total_cap_10 which = urban_capacity }
				export_to_variable = { which = upper_now_10 value = base_tax } 		change_variable = { which = total_cap_10 which = upper_capacity }
				export_to_variable = { which = devel_now_10 value = development }
				set_variable = { which = rural_cap_10 which = rural_capacity } set_variable = { which = urban_cap_10 which = urban_capacity }
				set_variable = { which = upper_cap_10 which = upper_capacity } set_variable = { which = prov_size_10 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_10 which = PREV } change_variable = { which = urban_now_10 which = PREV } 
					change_variable = { which = upper_now_10 which = PREV } change_variable = { which = devel_now_10 which = PREV } 
					change_variable = { which = prov_size_10 which = PREV } 	change_variable = { which = total_cap_10 which = PREV } 
					change_variable = { which = rural_cap_10 which = PREV } change_variable = { which = urban_cap_10 which = PREV } 
					change_variable = { which = upper_cap_10 which = PREV } 
				}
			}
			
			
			# 11 Parthia, 12 Scythia, 13 Aethiopia, 14 Eastern Africa, 15 Western Africa
			if = {
				limit = { superregion = parthia_superregion }
				export_to_variable = { which = rural_now_11 value = base_manpower } set_variable = { which = total_cap_11 which = rural_capacity }
				export_to_variable = { which = urban_now_11 value = base_production } change_variable = { which = total_cap_11 which = urban_capacity }
				export_to_variable = { which = upper_now_11 value = base_tax } 		change_variable = { which = total_cap_11 which = upper_capacity }
				export_to_variable = { which = devel_now_11 value = development }
				set_variable = { which = rural_cap_11 which = rural_capacity } set_variable = { which = urban_cap_11 which = urban_capacity }
				set_variable = { which = upper_cap_11 which = upper_capacity } set_variable = { which = prov_size_11 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_11 which = PREV } change_variable = { which = urban_now_11 which = PREV } 
					change_variable = { which = upper_now_11 which = PREV } change_variable = { which = devel_now_11 which = PREV } 
					change_variable = { which = prov_size_11 which = PREV } 	change_variable = { which = total_cap_11 which = PREV } 
					change_variable = { which = rural_cap_11 which = PREV } change_variable = { which = urban_cap_11 which = PREV } 
					change_variable = { which = upper_cap_11 which = PREV } 
				}
			}
			if = {
				limit = { superregion = scythia_superregion }
				export_to_variable = { which = rural_now_12 value = base_manpower } set_variable = { which = total_cap_12 which = rural_capacity }
				export_to_variable = { which = urban_now_12 value = base_production } change_variable = { which = total_cap_12 which = urban_capacity }
				export_to_variable = { which = upper_now_12 value = base_tax } 		change_variable = { which = total_cap_12 which = upper_capacity }
				export_to_variable = { which = devel_now_12 value = development }
				set_variable = { which = rural_cap_12 which = rural_capacity } set_variable = { which = urban_cap_12 which = urban_capacity }
				set_variable = { which = upper_cap_12 which = upper_capacity } set_variable = { which = prov_size_12 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_12 which = PREV } change_variable = { which = urban_now_12 which = PREV } 
					change_variable = { which = upper_now_12 which = PREV } change_variable = { which = devel_now_12 which = PREV } 
					change_variable = { which = prov_size_12 which = PREV } 	change_variable = { which = total_cap_12 which = PREV } 
					change_variable = { which = rural_cap_12 which = PREV } change_variable = { which = urban_cap_12 which = PREV } 
					change_variable = { which = upper_cap_12 which = PREV } 
				}
			}
			if = {
				limit = { superregion = aethiopia_superregion }
				export_to_variable = { which = rural_now_13 value = base_manpower } set_variable = { which = total_cap_13 which = rural_capacity }
				export_to_variable = { which = urban_now_13 value = base_production } change_variable = { which = total_cap_13 which = urban_capacity }
				export_to_variable = { which = upper_now_13 value = base_tax } 		change_variable = { which = total_cap_13 which = upper_capacity }
				export_to_variable = { which = devel_now_13 value = development }
				set_variable = { which = rural_cap_13 which = rural_capacity } set_variable = { which = urban_cap_13 which = urban_capacity }
				set_variable = { which = upper_cap_13 which = upper_capacity } set_variable = { which = prov_size_13 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_13 which = PREV } change_variable = { which = urban_now_13 which = PREV } 
					change_variable = { which = upper_now_13 which = PREV } change_variable = { which = devel_now_13 which = PREV } 
					change_variable = { which = prov_size_13 which = PREV } 	change_variable = { which = total_cap_13 which = PREV } 
					change_variable = { which = rural_cap_13 which = PREV } change_variable = { which = urban_cap_13 which = PREV } 
					change_variable = { which = upper_cap_13 which = PREV } 
				}
			}
			if = {
				limit = { superregion = eastern_africa_superregion }
				export_to_variable = { which = rural_now_14 value = base_manpower } set_variable = { which = total_cap_14 which = rural_capacity }
				export_to_variable = { which = urban_now_14 value = base_production } change_variable = { which = total_cap_14 which = urban_capacity }
				export_to_variable = { which = upper_now_14 value = base_tax } 		change_variable = { which = total_cap_14 which = upper_capacity }
				export_to_variable = { which = devel_now_14 value = development }
				set_variable = { which = rural_cap_14 which = rural_capacity } set_variable = { which = urban_cap_14 which = urban_capacity }
				set_variable = { which = upper_cap_14 which = upper_capacity } set_variable = { which = prov_size_14 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_14 which = PREV } change_variable = { which = urban_now_14 which = PREV } 
					change_variable = { which = upper_now_14 which = PREV } change_variable = { which = devel_now_14 which = PREV } 
					change_variable = { which = prov_size_14 which = PREV } 	change_variable = { which = total_cap_14 which = PREV } 
					change_variable = { which = rural_cap_14 which = PREV } change_variable = { which = urban_cap_14 which = PREV } 
					change_variable = { which = upper_cap_14 which = PREV } 
				}
			}
			if = {
				limit = { superregion = western_africa_superregion }
				export_to_variable = { which = rural_now_15 value = base_manpower } set_variable = { which = total_cap_15 which = rural_capacity }
				export_to_variable = { which = urban_now_15 value = base_production } change_variable = { which = total_cap_15 which = urban_capacity }
				export_to_variable = { which = upper_now_15 value = base_tax } 		change_variable = { which = total_cap_15 which = upper_capacity }
				export_to_variable = { which = devel_now_15 value = development }
				set_variable = { which = rural_cap_15 which = rural_capacity } set_variable = { which = urban_cap_15 which = urban_capacity }
				set_variable = { which = upper_cap_15 which = upper_capacity } set_variable = { which = prov_size_15 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_15 which = PREV } change_variable = { which = urban_now_15 which = PREV } 
					change_variable = { which = upper_now_15 which = PREV } change_variable = { which = devel_now_15 which = PREV } 
					change_variable = { which = prov_size_15 which = PREV } 	change_variable = { which = total_cap_15 which = PREV } 
					change_variable = { which = rural_cap_15 which = PREV } change_variable = { which = urban_cap_15 which = PREV } 
					change_variable = { which = upper_cap_15 which = PREV } 
				}
			}
			
			
			# 16 Arabia, 17 Armenia, 18 Iran, 19 Uttarapatha, 20 Dakshinapatha
			if = {
				limit = { superregion = arabia_superregion }
				export_to_variable = { which = rural_now_16 value = base_manpower } set_variable = { which = total_cap_16 which = rural_capacity }
				export_to_variable = { which = urban_now_16 value = base_production } change_variable = { which = total_cap_16 which = urban_capacity }
				export_to_variable = { which = upper_now_16 value = base_tax } 		change_variable = { which = total_cap_16 which = upper_capacity }
				export_to_variable = { which = devel_now_16 value = development }
				set_variable = { which = rural_cap_16 which = rural_capacity } set_variable = { which = urban_cap_16 which = urban_capacity }
				set_variable = { which = upper_cap_16 which = upper_capacity } set_variable = { which = prov_size_16 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_16 which = PREV } change_variable = { which = urban_now_16 which = PREV } 
					change_variable = { which = upper_now_16 which = PREV } change_variable = { which = devel_now_16 which = PREV } 
					change_variable = { which = prov_size_16 which = PREV } 	change_variable = { which = total_cap_16 which = PREV } 
					change_variable = { which = rural_cap_16 which = PREV } change_variable = { which = urban_cap_16 which = PREV } 
					change_variable = { which = upper_cap_16 which = PREV } 
				}
			}
			if = {
				limit = { superregion = armenia_superregion }
				export_to_variable = { which = rural_now_17 value = base_manpower } set_variable = { which = total_cap_17 which = rural_capacity }
				export_to_variable = { which = urban_now_17 value = base_production } change_variable = { which = total_cap_17 which = urban_capacity }
				export_to_variable = { which = upper_now_17 value = base_tax } 		change_variable = { which = total_cap_17 which = upper_capacity }
				export_to_variable = { which = devel_now_17 value = development }
				set_variable = { which = rural_cap_17 which = rural_capacity } set_variable = { which = urban_cap_17 which = urban_capacity }
				set_variable = { which = upper_cap_17 which = upper_capacity } set_variable = { which = prov_size_17 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_17 which = PREV } change_variable = { which = urban_now_17 which = PREV } 
					change_variable = { which = upper_now_17 which = PREV } change_variable = { which = devel_now_17 which = PREV } 
					change_variable = { which = prov_size_17 which = PREV } 	change_variable = { which = total_cap_17 which = PREV } 
					change_variable = { which = rural_cap_17 which = PREV } change_variable = { which = urban_cap_17 which = PREV } 
					change_variable = { which = upper_cap_17 which = PREV } 
				}
			}
			if = {
				limit = { superregion = iran_superregion }
				export_to_variable = { which = rural_now_18 value = base_manpower } set_variable = { which = total_cap_18 which = rural_capacity }
				export_to_variable = { which = urban_now_18 value = base_production } change_variable = { which = total_cap_18 which = urban_capacity }
				export_to_variable = { which = upper_now_18 value = base_tax } 		change_variable = { which = total_cap_18 which = upper_capacity }
				export_to_variable = { which = devel_now_18 value = development }
				set_variable = { which = rural_cap_18 which = rural_capacity } set_variable = { which = urban_cap_18 which = urban_capacity }
				set_variable = { which = upper_cap_18 which = upper_capacity } set_variable = { which = prov_size_18 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_18 which = PREV } change_variable = { which = urban_now_18 which = PREV } 
					change_variable = { which = upper_now_18 which = PREV } change_variable = { which = devel_now_18 which = PREV } 
					change_variable = { which = prov_size_18 which = PREV } 	change_variable = { which = total_cap_18 which = PREV } 
					change_variable = { which = rural_cap_18 which = PREV } change_variable = { which = urban_cap_18 which = PREV } 
					change_variable = { which = upper_cap_18 which = PREV } 
				}
			}
			if = {
				limit = { superregion = uttarapatha_superregion }	# north india
				export_to_variable = { which = rural_now_19 value = base_manpower } set_variable = { which = total_cap_19 which = rural_capacity }
				export_to_variable = { which = urban_now_19 value = base_production } change_variable = { which = total_cap_19 which = urban_capacity }
				export_to_variable = { which = upper_now_19 value = base_tax } 		change_variable = { which = total_cap_19 which = upper_capacity }
				export_to_variable = { which = devel_now_19 value = development }
				set_variable = { which = rural_cap_19 which = rural_capacity } set_variable = { which = urban_cap_19 which = urban_capacity }
				set_variable = { which = upper_cap_19 which = upper_capacity } set_variable = { which = prov_size_19 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_19 which = PREV } change_variable = { which = urban_now_19 which = PREV } 
					change_variable = { which = upper_now_19 which = PREV } change_variable = { which = devel_now_19 which = PREV } 
					change_variable = { which = prov_size_19 which = PREV } 	change_variable = { which = total_cap_19 which = PREV } 
					change_variable = { which = rural_cap_19 which = PREV } change_variable = { which = urban_cap_19 which = PREV } 
					change_variable = { which = upper_cap_19 which = PREV } 
				}
			}
			if = {
				limit = { superregion = dakshinapatha_superregion }	# south india
				export_to_variable = { which = rural_now_20 value = base_manpower } set_variable = { which = total_cap_20 which = rural_capacity }
				export_to_variable = { which = urban_now_20 value = base_production } change_variable = { which = total_cap_20 which = urban_capacity }
				export_to_variable = { which = upper_now_20 value = base_tax } 		change_variable = { which = total_cap_20 which = upper_capacity }
				export_to_variable = { which = devel_now_20 value = development }
				set_variable = { which = rural_cap_20 which = rural_capacity } set_variable = { which = urban_cap_20 which = urban_capacity }
				set_variable = { which = upper_cap_20 which = upper_capacity } set_variable = { which = prov_size_20 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_20 which = PREV } change_variable = { which = urban_now_20 which = PREV } 
					change_variable = { which = upper_now_20 which = PREV } change_variable = { which = devel_now_20 which = PREV } 
					change_variable = { which = prov_size_20 which = PREV } 	change_variable = { which = total_cap_20 which = PREV } 
					change_variable = { which = rural_cap_20 which = PREV } change_variable = { which = urban_cap_20 which = PREV } 
					change_variable = { which = upper_cap_20 which = PREV } 
				}
			}
			
			
			# 21 China, 22 Turan, 23 Tibet, 24 Sakastan, 25 Korea
			if = {
				limit = { superregion = china_superregion }
				export_to_variable = { which = rural_now_21 value = base_manpower } set_variable = { which = total_cap_21 which = rural_capacity }
				export_to_variable = { which = urban_now_21 value = base_production } change_variable = { which = total_cap_21 which = urban_capacity }
				export_to_variable = { which = upper_now_21 value = base_tax } 		change_variable = { which = total_cap_21 which = upper_capacity }
				export_to_variable = { which = devel_now_21 value = development }
				set_variable = { which = rural_cap_21 which = rural_capacity } set_variable = { which = urban_cap_21 which = urban_capacity }
				set_variable = { which = upper_cap_21 which = upper_capacity } set_variable = { which = prov_size_21 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_21 which = PREV } change_variable = { which = urban_now_21 which = PREV } 
					change_variable = { which = upper_now_21 which = PREV } change_variable = { which = devel_now_21 which = PREV } 
					change_variable = { which = prov_size_21 which = PREV } 	change_variable = { which = total_cap_21 which = PREV } 
					change_variable = { which = rural_cap_21 which = PREV } change_variable = { which = urban_cap_21 which = PREV } 
					change_variable = { which = upper_cap_21 which = PREV } 
				}
			}
			if = {
				limit = { superregion = turan_superregion }
				export_to_variable = { which = rural_now_22 value = base_manpower } set_variable = { which = total_cap_22 which = rural_capacity }
				export_to_variable = { which = urban_now_22 value = base_production } change_variable = { which = total_cap_22 which = urban_capacity }
				export_to_variable = { which = upper_now_22 value = base_tax } 		change_variable = { which = total_cap_22 which = upper_capacity }
				export_to_variable = { which = devel_now_22 value = development }
				set_variable = { which = rural_cap_22 which = rural_capacity } set_variable = { which = urban_cap_22 which = urban_capacity }
				set_variable = { which = upper_cap_22 which = upper_capacity } set_variable = { which = prov_size_22 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_22 which = PREV } change_variable = { which = urban_now_22 which = PREV } 
					change_variable = { which = upper_now_22 which = PREV } change_variable = { which = devel_now_22 which = PREV } 
					change_variable = { which = prov_size_22 which = PREV } 	change_variable = { which = total_cap_22 which = PREV } 
					change_variable = { which = rural_cap_22 which = PREV } change_variable = { which = urban_cap_22 which = PREV } 
					change_variable = { which = upper_cap_22 which = PREV } 
				}
			}
			if = {
				limit = { superregion = tibet_superregion }
				export_to_variable = { which = rural_now_23 value = base_manpower } set_variable = { which = total_cap_23 which = rural_capacity }
				export_to_variable = { which = urban_now_23 value = base_production } change_variable = { which = total_cap_23 which = urban_capacity }
				export_to_variable = { which = upper_now_23 value = base_tax } 		change_variable = { which = total_cap_23 which = upper_capacity }
				export_to_variable = { which = devel_now_23 value = development }
				set_variable = { which = rural_cap_23 which = rural_capacity } set_variable = { which = urban_cap_23 which = urban_capacity }
				set_variable = { which = upper_cap_23 which = upper_capacity } set_variable = { which = prov_size_23 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_23 which = PREV } change_variable = { which = urban_now_23 which = PREV } 
					change_variable = { which = upper_now_23 which = PREV } change_variable = { which = devel_now_23 which = PREV } 
					change_variable = { which = prov_size_23 which = PREV } 	change_variable = { which = total_cap_23 which = PREV } 
					change_variable = { which = rural_cap_23 which = PREV } change_variable = { which = urban_cap_23 which = PREV } 
					change_variable = { which = upper_cap_23 which = PREV } 
				}
			}
			if = {
				limit = { superregion = sakastan_superregion }
				export_to_variable = { which = rural_now_24 value = base_manpower } set_variable = { which = total_cap_24 which = rural_capacity }
				export_to_variable = { which = urban_now_24 value = base_production } change_variable = { which = total_cap_24 which = urban_capacity }
				export_to_variable = { which = upper_now_24 value = base_tax } 		change_variable = { which = total_cap_24 which = upper_capacity }
				export_to_variable = { which = devel_now_24 value = development }
				set_variable = { which = rural_cap_24 which = rural_capacity } set_variable = { which = urban_cap_24 which = urban_capacity }
				set_variable = { which = upper_cap_24 which = upper_capacity } set_variable = { which = prov_size_24 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_24 which = PREV } change_variable = { which = urban_now_24 which = PREV } 
					change_variable = { which = upper_now_24 which = PREV } change_variable = { which = devel_now_24 which = PREV } 
					change_variable = { which = prov_size_24 which = PREV } 	change_variable = { which = total_cap_24 which = PREV } 
					change_variable = { which = rural_cap_24 which = PREV } change_variable = { which = urban_cap_24 which = PREV } 
					change_variable = { which = upper_cap_24 which = PREV } 
				}
			}
			if = {
				limit = { superregion = korea_superregion }
				export_to_variable = { which = rural_now_25 value = base_manpower } set_variable = { which = total_cap_25 which = rural_capacity }
				export_to_variable = { which = urban_now_25 value = base_production } change_variable = { which = total_cap_25 which = urban_capacity }
				export_to_variable = { which = upper_now_25 value = base_tax } 		change_variable = { which = total_cap_25 which = upper_capacity }
				export_to_variable = { which = devel_now_25 value = development }
				set_variable = { which = rural_cap_25 which = rural_capacity } set_variable = { which = urban_cap_25 which = urban_capacity }
				set_variable = { which = upper_cap_25 which = upper_capacity } set_variable = { which = prov_size_25 which = prov_size } 
				ROOT = { 
					change_variable = { which = rural_now_25 which = PREV } change_variable = { which = urban_now_25 which = PREV } 
					change_variable = { which = upper_now_25 which = PREV } change_variable = { which = devel_now_25 which = PREV } 
					change_variable = { which = prov_size_25 which = PREV } 	change_variable = { which = total_cap_25 which = PREV } 
					change_variable = { which = rural_cap_25 which = PREV } change_variable = { which = urban_cap_25 which = PREV } 
					change_variable = { which = upper_cap_25 which = PREV } 
				}
			}
			
			
		
		}
	}
	# One option for each super-region, added through 1 to X in variables. 
	option = {								
		name = "population_capacity.3.a"
		
	}
	
}

# SUBMOD Menu
country_event = {
	id = population_capacity.4
	title = "population_capacity.4.t"
	desc = "population_capacity.4.d"
	picture = celebration_priestess
	
	is_triggered_only = yes

	option = {								
		name = "population_capacity.4.1"	# Initiate for first time. Adds flag "initiated", startup.2 sets flag "running". Init + running
		trigger = { NOT = { has_global_flag = popgrowth_initiated } }
		country_event = { id = startup.2 }
	}
	option = {								
		name = "population_capacity.4.2"	# Apply the submod again
		trigger = { has_global_flag = popgrowth_initiated NOT = { has_global_flag = popgrowth_running } }
		set_global_flag = popgrowth_running
	}
	option = {								
		name = "population_capacity.4.3"	# Disable the submod
		trigger = {  has_global_flag = popgrowth_initiated has_global_flag = popgrowth_running }
		clr_global_flag = popgrowth_running
	}
	option = {
		name = "population_capacity.4.4"	# Update all pop capacity values for my country
		trigger = { has_global_flag = popgrowth_running }
		country_event = { id = population_capacity.2 }
	}
	option = {
		name = "population_capacity.4.5"	# Statistics: calculate all world variables
		trigger = { has_global_flag = popgrowth_running }
		country_event = { id = population_capacity.3 }
	}
	option = {
		name = "population_capacity.4.6"	# Statistics: show province sizes (trade map)
		trigger = { has_global_flag = popgrowth_running }
		hidden_effect = {
			every_province = {
				if = { 		limit = { check_variable = { prov_size = 10 } } add_province_modifier = { name = popgrowth_size10 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 9 } }  add_province_modifier = { name = popgrowth_size09 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 8 } }  add_province_modifier = { name = popgrowth_size08 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 7 } }  add_province_modifier = { name = popgrowth_size07 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 6 } }  add_province_modifier = { name = popgrowth_size06 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 5 } }  add_province_modifier = { name = popgrowth_size05 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 4 } }  add_province_modifier = { name = popgrowth_size04 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 3 } }  add_province_modifier = { name = popgrowth_size03 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 2 } }  add_province_modifier = { name = popgrowth_size02 duration = 30 } }
				else_if = { limit = { check_variable = { prov_size = 1 } }  add_province_modifier = { name = popgrowth_size01 duration = 30 } }
			}
		}
		
	}
	
	option = {								
		name = "population_capacity.4.7"	# Nothing, go back
		
	}
	# DEV OPTIONS - disabled by default
	#option = {								
	#	name = "population_capacity.4.8"	# Give modifier to build fast
	#	add_country_modifier = { name = popgrowth_debug_build duration = 7300 }
	#}
	#option = {								
	#	name = "population_capacity.4.8"	# Set rural infrastructure to the max
	#	hidden_effect = {
	#		every_country = {
	#			every_owned_province = { add_building = hospital }
	#		}
	#	}
	#}
	
}

######
#	MIGRATION event, rural to X
######
province_event = {
	id = population_capacity.5
	title = "population_capacity.5.t"
	desc = "population_capacity.5.d"
	picture = peasant_woman
	hidden = no
	
	trigger = {
		base_manpower = 2 												# does not let the last rural pop to leave, obviously
		check_variable = { which = prov_size value = 1 }				# to only affect if the popgrowth files are active
		NOT = { check_variable = { which = rural_growth value = 1 } }	# "poverty", or at least no more growth
		#has_global_flag = popgrowth_future		# to toggle on/off easily
	}
	
	
	mean_time_to_happen = {
		months = 240 	# twenty years to move for a stabilized population, will be affected by modifiers
		
		
		# PUSH - reasons to leave. Basically affected by current rural growth, means of moving (institutions of construction and trade). Devastation will NOT appear here, since it already influences rural_growth through lowering total rural capacity. 
		modifier = {
			factor = 3.0
			check_variable = { which = urban_growth which = rural_growth }	# is not supposed to fire if there is still work in the city, same province
		}
		modifier = {
			factor = 0.75
			check_variable = { which = rural_growth value = 0.60 }
			NOT = { check_variable = { which = rural_growth value = 0.80 } }
		}
		modifier = {
			factor = 0.5
			check_variable = { which = rural_growth value = 0.50 }
			NOT = { check_variable = { which = rural_growth value = 0.60 } }
		}
		modifier = {
			factor = 0.4
			check_variable = { which = rural_growth value = 0.40 }
			NOT = { check_variable = { which = rural_growth value = 0.50 } }
		}
		modifier = {
			factor = 0.1 				# one year
			check_variable = { which = rural_growth value = 0.30 } # they must be really miserable...
			NOT = { check_variable = { which = rural_growth value = 0.40 } }
		}
		modifier = {
			factor = 0.05 				# mere months, to get <0.3 must be a very devastated province
			NOT = { check_variable = { which = rural_growth value = 0.30 } }
		}
		
	}
	
	immediate = {
		
		# BLOCK 1: define migration size. 
		# Roughly 20% of rural pops, enough to change the rural_capacity. 1 if under 5, 2 up to 10, 3 after 10. 
		if = { 		limit = { base_manpower = 10 }	set_variable = { which = mig_size value = 3 } }
		else_if = { limit = { base_manpower = 5 } 	set_variable = { which = mig_size value = 2 } }
		else = {									set_variable = { which = mig_size value = 1 } }
		
		# BLOCK 2: Discover which provinces it may go
		
		# Neighboring provinces: (will stay as rural)
		random_neighbor_province = {
			limit = { check_variable = { rural_growth = 1.2 } NOT = { has_province_modifier = pg_new_pop } NOT = { has_province_flag = pg_mig_taken } }
			save_event_target_as = rural_1 	set_province_flag = pg_mig_taken
		}
			# peasants will move en masse, without distributing among three rural provinces. May cause trouble (over capacity) due to this migration. 
		
		# Second improvement: cities within 1000 distance, as long as the institution is present (around 300bc, hellenistic era)
		if = {
			limit = { OR = { axiomatic_maths_institution = 100 blast_furnace_institution = 100 } }
			random_province = {
				limit = {
					NOT = { province_distance = { who = PREV distance = 1000 } } 	check_variable = { urban_growth = 1.2 }
					NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
				}
				save_event_target_as = urban_1 	set_province_flag = pg_mig_taken
			}
			if = {
				limit = { check_variable = { mig_size = 2 } }
				random_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = 1000 } } 	check_variable = { urban_growth = 1.2 }
						NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
					}
					save_event_target_as = urban_2 	set_province_flag = pg_mig_taken
				}
			}
			if = {
				limit = { check_variable = { mig_size = 3 } }
				random_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = 1000 } } 	check_variable = { urban_growth = 1.2 }
						NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
					}
					save_event_target_as = urban_3 	set_province_flag = pg_mig_taken
				}
			}
			
		}
		# First improvement: cities within 200 distance, as long as the institution is present (around 500bc)
		else_if = {
			limit = { OR = { bureaucracy_institution = 100 cast_iron_institution = 100 } }
			random_province = {
				limit = {
					NOT = { province_distance = { who = PREV distance = 200 } } 	check_variable = { urban_growth = 1.2 }
					NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
				}
				save_event_target_as = urban_1 	set_province_flag = pg_mig_taken
			}
			if = {
				limit = { check_variable = { mig_size = 2 } }
				random_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = 200 } } 	check_variable = { urban_growth = 1.2 }
						NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
					}
					save_event_target_as = urban_2 	set_province_flag = pg_mig_taken
				}
			}
			if = {
				limit = { check_variable = { mig_size = 3 } }
				random_province = {
					limit = {
						NOT = { province_distance = { who = PREV distance = 200 } } 	check_variable = { urban_growth = 1.2 }
						NOT = { has_province_modifier = pg_new_pop } 					NOT = { has_province_flag = pg_mig_taken }
					}
					save_event_target_as = urban_3 	set_province_flag = pg_mig_taken
				}
			}
			
		}
		# own city provinces, capital, rural settlement provinces
		random_province = {											# can't use a random owned province within a province scope
			limit = {
				owned_by = PREV 								check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = owncity_1 		set_province_flag = pg_mig_taken
		}
		random_province = {
			limit = {
				owned_by = PREV 								check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = owncity_2 		set_province_flag = pg_mig_taken
		}
		random_province = {
			limit = {
				owned_by = PREV 								check_variable = { urban_growth = 1.2 }
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = owncity_3 		set_province_flag = pg_mig_taken
		}
		capital_scope = { save_event_target_as = own_capital 	set_province_flag = pg_mig_taken }
		random_province = {
			limit = {
				owned_by = PREV check_variable = { rural_growth = 1.2 } has_state_edict = colonization_edict
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = colony_1 	set_province_flag = pg_mig_taken
		}
		random_province = {
			limit = {
				owned_by = PREV check_variable = { rural_growth = 1.2 } has_state_edict = colonization_edict
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = colony_2 	set_province_flag = pg_mig_taken
		}
		random_province = {
			limit = {
				owned_by = PREV check_variable = { rural_growth = 1.2 } has_state_edict = colonization_edict
				NOT = { has_province_modifier = pg_new_pop } 	NOT = { has_province_flag = pg_mig_taken }
			}
			save_event_target_as = colony_3 	set_province_flag = pg_mig_taken
		}
		
		
		# If there is no possible escape (careful!) they will starve and revolt, unless you pay for more food
		if = {
			limit = { NOT = { has_saved_event_target = rural_1 } NOT = { has_saved_event_target = urban_1 } }
			set_province_flag = pg_mig_starvation
		}
	
	}
	
	#####
	#	OPTIONS - BY DEFAULT (with no consequence for the player's economy. AI will choose them)
	#####
	
	option = {
		name = "population_capacity.5.1"		# Voluntarily leave, will spread to whatever province is eligible (rural, urban, etc)
		trigger = { NOT = { has_province_flag = pg_mig_starvation } }
		ai_chance = { 
			factor = 50 
			modifier = { factor = 1.2 owner = { check_variable = { which = var_slaves_pop_ratio value = 20 } } }
			modifier = { factor = 1.3 owner = { NOT = { adm_power = 300 } } }
		}
		
		if = {
			limit = { has_saved_event_target = urban_1 }	# to differenciate between migration to city, or migration to neighboring province
			while = {
				limit = { check_variable = { mig_size = 1 } } # if no urban 1/2/3, nothing will happen, but variable won't decrease either
				random_list = {
					33 = { event_target:urban_3 = { mig_rural_to_urban = yes 	province_event = { id = population_capacity.1 }	} }
					33 = { event_target:urban_2 = { mig_rural_to_urban = yes 	province_event = { id = population_capacity.1 }	} }
					33 = { event_target:urban_1 = { mig_rural_to_urban = yes 	province_event = { id = population_capacity.1 }	} }
				}
			}
		}
		else = {	# rural migration, all at once
			while = { 
				limit = { check_variable = { mig_size = 1 } }
				event_target:rural_1 = { mig_rural_to_rural = yes province_event = { id = population_capacity.1 } }
			}
		}
		province_event = { id = population_capacity.1 }			# recalculate in the origin province
		
	}
	option = {
		name = "population_capacity.5.2" # Let them starve (bad)
		trigger = { has_province_flag = pg_mig_starvation }
		ai_chance = {  factor = 30 	modifier = { factor = 2.0	owner = { NOT = { treasury = 30 } } } }
		if = { 		limit = { check_variable = { which = mig_size value = 3 } } add_base_manpower = -3 }
		else_if = { limit = { check_variable = { which = mig_size value = 2 } } add_base_manpower = -2 }
		else_if = { limit = { check_variable = { which = mig_size value = 1 } } add_base_manpower = -1 }
		clr_province_flag = pg_mig_starvation
		
	}
	option = {
		name = "population_capacity.5.3" # convince them to stay, adm loss due to issuing of new laws. 
		trigger = { NOT = { has_province_flag = pg_mig_starvation } }
		ai_chance = { 
			factor = 30 
			modifier = { factor = 0.5	owner = { check_variable = { which = var_slaves_pop_ratio value = 20 } } }
			modifier = { factor = 2.0	owner = { adm_power = 300 } }
		}
		if = { 		limit = { check_variable = { which = mig_size value = 3 } } owner = { add_adm_power = -15 } }
		else_if = { limit = { check_variable = { which = mig_size value = 2 } } owner = { add_adm_power = -10 } }
		else_if = { limit = { check_variable = { which = mig_size value = 1 } } owner = { add_adm_power = -5 } }
		
		
	}
	option = {
		name = "population_capacity.5.4" # pay for more food (if starvation)
		trigger = { has_province_flag = pg_mig_starvation }
		ai_chance = {  factor = 50 	modifier = { factor = 2.0	owner = { treasury = 30 } } }
		if = { 		limit = { check_variable = { which = mig_size value = 3 } } owner = { treasury = -30 } }
		else_if = { limit = { check_variable = { which = mig_size value = 2 } } owner = { treasury = -20 } }
		else_if = { limit = { check_variable = { which = mig_size value = 1 } } owner = { treasury = -10 } }
		clr_province_flag = pg_mig_starvation
	}
	
	option = {
		name = "population_capacity.5.5" # enslave them. Expect much unrest, but may be necessary in money-hungry countries
		ai_chance = { 
			factor = 20 
			modifier = { factor = 0		owner = { NOT = { mil_power = 100 } } }
			modifier = { factor = 0 	devastation = 10 }
		}
		add_province_modifier = { name = pg_pop_enslaved duration = 730 } 	# +4 unrest
		add_nationalism = 5
		if = {
			limit = { check_variable = { mig_size = 3 } } 
			add_base_manpower = -3 owner = { add_mil_power = -15 change_variable = { slaves = 30 } }
		}
		else_if = { 
			limit = { check_variable = { mig_size = 2 } }	
			add_base_manpower = -2 owner = { add_mil_power = -10 change_variable = { slaves = 20 } } 
		}
		else_if = { 
			limit = { check_variable = { mig_size = 1 } }	
			add_base_manpower = -1 owner = { add_mil_power = -5 change_variable = { slaves = 10 } } 
		}
		province_event = { id = population_capacity.1 }
		clr_province_flag = pg_mig_starvation
	}
	
	####
	#	PLAYER-DIRECTED OPTIONS (resettle, to capital, etc)
	####
	option = {
		name = "population_capacity.5.6"		# Move them to our capital (if there is space)
		trigger = { capital_scope = { check_variable = { urban_growth = 1.2 } } }
		ai_chance = { factor = 0 }
		while = { 
			limit = { check_variable = { mig_size = 1 } }
			capital_scope = { mig_rural_to_urban = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } }
		}
		province_event = { id = population_capacity.1 }
		clr_province_flag = pg_mig_starvation			# to be added to all player-driven options, as this is also a possibility
	}
	
	option = {
		name = "population_capacity.5.7"		# Move them to other prosperous cities. Must not be one of the random city provinces
		trigger = { has_saved_event_target = owncity_1 }
		ai_chance = { factor = 0 }
		while = {
			limit = { check_variable = { mig_size = 1 } }
			random_list = {
				33 = { event_target:owncity_3 = { mig_rural_to_urban = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
				33 = { event_target:owncity_2 = { mig_rural_to_urban = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
				33 = { event_target:owncity_1 = { mig_rural_to_urban = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
			}
		}
		province_event = { id = population_capacity.1 }
		clr_province_flag = pg_mig_starvation
	}
	
	option = {
		name = "population_capacity.5.8"		# Move them to new settled lands
		trigger = { has_saved_event_target = colony_1 }
		ai_chance = { factor = 0 }
		while = {
			limit = { check_variable = { mig_size = 1 } }
			random_list = {
				33 = { event_target:colony_3 = { mig_rural_to_rural = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
				33 = { event_target:colony_2 = { mig_rural_to_rural = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
				33 = { event_target:colony_1 = { mig_rural_to_rural = yes mig_dist_cost = yes province_event = { id = population_capacity.1 } } }
			}
		}
		province_event = { id = population_capacity.1 }
		clr_province_flag = pg_mig_starvation
	}
	
	
	after = {
		# clean up
		#set_variable = { which = ratio_weight value = 0 }
		clr_province_flag = pg_mig_starvation
		every_province = {
			limit = { has_province_flag = pg_mig_taken }
			clr_province_flag = pg_mig_taken
		}
		
	}
	
}

