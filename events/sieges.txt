namespace = sieges

##########
#	SACK OF CITIES events
#	Flowchart is as follows
#		if: >X dev -> this event. Starting development can be chosen through a decision, it's 6, 8, 10, 15 or unrestricted
#		else_if: >6 to X -> a hidden, automatic event (to be done)
#		dev 1 to 5: nothing
#
#########

country_event = {
	id = sieges.1
	title = "sieges.1.t"
	desc = "sieges.1.d"
	picture = looting
	is_triggered_only = yes
	
	trigger = {
		# Province
		FROM = {
			development = 3		# for unrestricted, at least dev 3
			NOT = { OR = {  has_province_modifier = SS_was_raided 	 has_province_modifier = SS_was_delenda has_province_modifier = SS_was_enslaved
							has_province_modifier = SS_was_destroyed has_province_modifier = SS_was_sacked 	has_province_modifier = SS_was_tributed } 
			}
			NOT = { owned_by = ROOT }		# Avoids sacking previously occupied owned provinces
			OR = {
				owner = { is_in_war = { attackers = ROOT } }	# checks the owner is at war with the besieger. 
				owner = { is_in_war = { defenders = ROOT } }	# this way it only works for wars, not for rebels
			}
		}
		# Siege rules
		OR = {
			has_global_flag = siege_unrestricted 
			AND = { has_global_flag = siege_cities_15 FROM = { development = 15 } }
			AND = { has_global_flag = siege_cities_12 FROM = { development = 12 } }
			AND = { has_global_flag = siege_cities_10 FROM = { development = 10 } }
			AND = { has_global_flag = siege_cities_8 FROM = { development = 8 } }
			AND = { has_global_flag = siege_cities_6 FROM = { development = 6 } }
		}
		
		
	}
	
	
	immediate = {
		# Both raid and sack will have the same structure:
		#	A) Calculate lootable amount (fixed value for each building) and "available" population to be taken away
		#	B) Define the attacking force: number of soldiers and "ferocity" (base value + several national ideas)
		# 	C) Show division of People / Sack power. Several options won't be present unless enough attackers are present
		
		#	Depending on the option, there will be collateral damage; always tied to the size of the attacking force. This means that sometime you will have won the siege, but the sacking force is too small to destroy anything significant
		
		hidden_effect = {
			FROM = {
				# Initial cleanup, to remove variables stored in the province modifiers
				set_variable = { which = SS_looted_value value = 0 } set_variable = { which = SS_devastation_done value = 0 } 
				set_variable = { which = SS_blds value = 0 } set_variable = { which = SS_blds value = 0 } 
				set_variable = { which = SS_blds value = 0 } set_variable = { which = SS_blds value = 0 } 
				
				# define the owner of the province (the country being besieged)
				owner = { save_event_target_as = SS_prov_owner }
				if = { limit = { has_province_modifier = SS_enslv_there_hostile } remove_province_modifier = SS_enslv_there_hostile }
				
				# Sack efficiency (army, ferocity, ratio)
				export_to_variable = { which = prov_inf value = trigger_value:infantry_in_province }
				export_to_variable = { which = prov_cav value = trigger_value:cavalry_in_province }
				export_to_variable = { which = prov_arc value = trigger_value:artillery_in_province }
				
				set_variable = { which = sack_size which = prov_inf }
				change_variable = { which = sack_size which = prov_cav } change_variable = { which = sack_size which = prov_arc }
				
				set_variable = { which = sack_power value = 5 }
				# and other modifiers that affect ferocity
				
				set_variable = { which = sack_ratio which = sack_size } multiply_variable = { which = sack_ratio which = sack_power }
				
				export_to_variable = { which = pop_total value = development } 	multiply_variable = { pop_total = 10 }	# pops in thousands
				divide_variable = { which = sack_ratio which = pop_total } 	
				set_variable = { which = sack_display which = sack_ratio }	multiply_variable = { sack_display = 100 }
				if = { limit = { check_variable = { sack_ratio = 1 } } 		set_variable = { which = sack_ratio value = 1 } }		# max 100%
					
					# The main two variables to have in mind in a siege / sack are: 1) efficiency, 2) ferocity, and 3) total sack value
					# Efficiency: the ratio of attacking forces compared to population. 
					# Ferocity: how strong or how vicious the attackers will be. Base is 5 and can be increased by ideas, ruler/general traits, etc
					# Loot value: value that can be taken out, it will be a % of total value of buildings. Depends on the type of attack done
				
					# At base values, imagine city of 12 dev, army of 8 thousand: 8 x 5 / 12 x 10 = 40/120 = 0.33. 1 regiment = 5.000 civilians
					# As you can see, it will be difficult to have a 100% efficiency without overwhelming a certain city, so you won't be able to carpet-siege fast and expect to earn much. It should, at least for the human player, slow down a bit their wartime expansion.
				
				
				# Calculate lootable amount (buildings). Always 75% of build cost
				set_variable = { which = loot_value value = 0 }
				find_total_loot_value = yes
				
				# ENSLAVEMENT
					# Find suitable population to be enslaved/killed (explanation)
				
				export_to_variable = { which = SS_t_base value = base_manpower }	set_variable = { which = SS_t_lost which = SS_t_base } 
				export_to_variable = { which = SS_c_base value = base_production }	set_variable = { which = SS_c_lost which = SS_c_base } 
				export_to_variable = { which = SS_u_base value = base_tax }			set_variable = { which = SS_u_lost which = SS_u_base } 
				
					# Sack Ratio applied, as always, up to 100%
					
				multiply_variable = { which = SS_t_lost which = sack_ratio }		multiply_variable = { which = SS_c_lost which = sack_ratio }
				multiply_variable = { which = SS_u_lost which = sack_ratio }
				
					# Find minimum values
				if = {
					limit = { has_global_flag = popgrowth_vanilla }		# "Vanilla" events: no Popgrowth Mechanics. Loss of 20%/40%/75% pops. 
					multiply_variable = { SS_t_lost = 0.2 } multiply_variable = { SS_c_lost = 0.4 } multiply_variable = { SS_u_lost = 0.75 }
				}
				else = {
					set_variable = { which = SS_t_min which = rural_capacity } multiply_variable = { SS_t_min = 0.6 }	# min 60% rural cap
					set_variable = { which = SS_c_min which = urban_capacity } multiply_variable = { SS_c_min = 0.4 }	# min 40% urban cap
					set_variable = { which = SS_u_min which = upper_capacity } multiply_variable = { SS_u_min = 0.2 }	# min 20% upper cap
					
					if = { 	limit = { check_variable = { which = SS_t_lost which = SS_t_min } } 
							subtract_variable = { which = SS_t_lost which = SS_t_min } 			}
					if = { 	limit = { check_variable = { which = SS_c_lost which = SS_c_min } } 
							subtract_variable = { which = SS_c_lost which = SS_c_min } 			}
					if = { 	limit = { check_variable = { which = SS_u_lost which = SS_u_min } } 
							subtract_variable = { which = SS_u_lost which = SS_u_min } 			}
				
				}
					# Avoid losing last pop. The total lost is reduced so no pop is killed (it would be an exploit), but some slaves are gained.
				if = { limit = { NOT = { base_manpower = 2 } } 	multiply_variable = { SS_t_lost = 0.25 } }
				if = { limit = { NOT = { base_production = 3 } } multiply_variable = { SS_t_lost = 0.33 } }
				if = { limit = { NOT = { base_tax = 4 } } 	multiply_variable = { SS_t_lost = 0.50 } }	# 75% x 3 uppers = 2,25, too much otherwise
				
				
					# Prepare the variable to be used in each option (Whiles to lose pops and slaves). Done here so they're seen in the event desc
				set_variable = { which = SS_rs_slave which = SS_t_lost } multiply_variable = { SS_rs_slave = 4 }	# 40% x 10, to thousands
				set_variable = { which = SS_rh_slave which = SS_t_lost } multiply_variable = { SS_rh_slave = 8 }
				set_variable = { which = SS_cs_slave which = SS_c_lost } multiply_variable = { SS_cs_slave = 4 }
				set_variable = { which = SS_ch_slave which = SS_c_lost } multiply_variable = { SS_ch_slave = 8 }
				set_variable = { which = SS_us_slave which = SS_u_lost } multiply_variable = { SS_us_slave = 4 }
				set_variable = { which = SS_uh_slave which = SS_u_lost } multiply_variable = { SS_uh_slave = 8 }
				
				set_variable = { which = SS_soft_total which = SS_rs_slave } 	change_variable = { which = SS_soft_total which = SS_cs_slave }
				change_variable = { which = SS_soft_total which = SS_us_slave } set_variable = { which = SS_hard_total which = SS_rh_slave } 
				change_variable = { which = SS_hard_total which = SS_ch_slave } change_variable = { which = SS_hard_total which = SS_uh_slave }
					# All done! 
			}
		}
		# Basically this is what will be explained in the DD
		
		### Enslavement
			# The army, during their sacking / raid, has been instructed to "prioritize" leaving the population alive. Still, it will not always be possible. Also, it is documented in primary sources that many enslavements in Antiquity had first the adult male population slain, and then most women and children were sold to slavery. Therefore, even if the goal of the besieging army is to take as many people alive as possible, many will resist and perish in the process. That's why we have separated Enslave into two options, whether the besieging army will be more "efficient" executing this task. 
			# The maximum amount of population to be enslaved is determined by maximum capacity of the province (or, if the Popgrowth mechanics are not toggled, by a simple % of current population). Rural/tribal populations will be the most spared, and upper pops the most affected. Remember, this is all the population RELATIVE TO THE CAPACITY LIMIT, so if a province has 5 rural pops but a rural capacity of 15, it is already under
				# Values for each pop type. It's always 40% enslaved / 60% killed in Soft, and 80% s / 20% k in Hard. If less than 1 pop, won't be taken out. Remember that there will be simplified, automatic and hidden version of this event if the province has low development
					# Rural/tribal pops:	min 60% capacity, or max 20% if no Popgrowth mechanics enabled
					# Urban/common pops: 	min 40% capacity, or max 40% ....
					# Upper pops:			min 20% capacity, or max 75% .... (it's higher, as it gets promoted faster)
				
				# An example for this: a city with 15 commoners and 5 tribals, with capacities of 15 and 10. Minimums of 15x0.4 & 10x0.6 = 6 & 6. Current pops and minimums are 15 / 6, 5 / 6 -> possible 9 commoners and 0 tribals will be enslaved. If soft enslave, 9 x 0.4 = 36 thousand slaves, and 9 x 0.25 = 2.25 killed. Total population lost: 9 x (0.4 + 0.25) = 5.85 -> 5 pops lost. 
				
			# To end this section, remember that enslavement is a process that takes A LOT of time and therefore some province modifiers will appear in every neighbor province that is either yours or the enemy's, and your army will be almost inmobile, and susceptible to attacks by the enemy. This is 2 months for light enslavement and 3 months for hard enslavement. So you better avoid doing this unless you have a complete control of the possible enemy's armies... 
				# By the way, it is needed to add this modifier in both the current province and those nearby, because if done only in the current province, it just impedes armies to ENTER the province, but they can LEAVE it. Not fair, really
		
		### Colateral damage
			# value depending on how much money is being taken out. You take 1000, you may destroy up to 1000 in value. Devastation is the impact over things other than in buildings, and it will take some time to go away. Also, notice that as long as there is some value to be taken, ANY building is eligible to be hit. So don't think that because you won't cause 500 of value you can't hit a building valued 500 or higher. 
			# Its formula is Devastation % = sack ratio x type of damage done. 
			
		# Remember that the two Enslaves (light/hard) and sack/destroy/delenda, are dependent on several conditions:
			# When to use Enslave Hard: any of the following: A) Casus Belli: Insult, Dishonored Call, Vassal Independence, Overthrow, Badboy, Tribal Raid, Shatter Country. B) Rivalry. C) Normal / National Ideas
			# Enslave light: all other cases.
			# When to use Delenda Est: only if 1) Is Rival, 2) Is the capital. Any CB type
			# When to use Destroy: A) More than -100 relations, or B) Is Rival
			# Sack in all other cases. Sack and Destroy are unabled if the option to Delenda Est is active
	
		
	}
	#############
	# Options: table of content, for quick reference
	#############
	# 	Name			MIl power  % ratio min		% value   % devst 	% pops lost, of which % enslaved
		# Ask Tribute		  -5   |	0%			|	20%	|	 5%	 	|	0%				 |	 0%
		# Sack city			 -20   |	50%			|	60%	|	30%	 	|	0%				 |	 0%	# Devastation, will migrate away
		# Light enslave 	 -20   |	20%			|	 5%	|	10%	 	|	min cap 40/60/80 |	40%
		# Hard enslave		 -20   |	50%			|	10%	|	25%	 	|	min cap 40/60/80 |	80%
		# Destroy city		 -60   |	90%			|	40% |	60%	 	|	min cap 40/60/80 |	40%
		# Delenda Est	    -100   |	90%, rival	|	60%	|  100% 	|	all but 1 pop	 |	20%
		# nothing			   0
		# Liberate (TBD)
	
	option = {
		name = "sieges.1.1"		# TRIBUTE (20% value, 5% devastation, no pops lost or enslaved)
		
		ai_chance = {			# AI chance: will do if lacks military power
			factor = 30
			modifier = {	factor = 2.0	NOT = { mil_power = 50 } }
			modifier = {	factor = 1.5	NOT = { mil_power = 500 } }
		}
		trigger = {
			NOT = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }	# in case Delenda Est is active
		}
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 20	devst = 5 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 05 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_tributed duration = 365 }	# this modifier allows us to see that happened in the siege
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
		}
		
	}
	option = {
		name = "sieges.1.2"		# SACK (60% value, 30% devastation, no pops lost or enslaved)
		
		ai_chance = {			# AI chance: will do if needs money but not slaves. Main AI option if it has a low sack ratio, to economize mil power
			factor = 30
			modifier = { factor = 0.5 mil_power = 50 }
			modifier = { factor = 2.0 FROM = { NOT = { check_variable = { sack_ratio = 0.6 } } } }
			modifier = { factor = 2.0 check_variable = { var_slaves_pop_ratio = 50 } }
		}
		trigger = { 
			NOT = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }	# in case Delenda Est is active, then it is compulsory
		}
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 60	devst = 30 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 30 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_sacked duration = 720 }	# this modifier allows us to see that happened in the siege
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
		}
		add_mil_power = -20
	}
	option = {
		name = "sieges.1.3"		# DESTROY (40% value, 60% devastation, slaves: same as Soft Enslave)
		
		ai_chance = {			# AI chance: will do if has enough power, and the sack ratio is high. It will "aim to kill"
			factor = 30
			modifier = { factor = 2.5 mil_power = 75 }
			modifier = { factor = 2.5 FROM = { check_variable = { sack_ratio = 0.6 } } }
		}
		trigger = { 
			NOT = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }	# in case Delenda Est is active
			OR = {
				NOT = {	FROM = { owner = { reverse_has_opinion = { who = ROOT value = -100 } } } }	# less than -100 opinion, or rival
				FROM = { owner = { is_rival = ROOT } }
			}
		}
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 40	devst = 60 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 60 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_destroyed duration = 1825 }	# this modifier allows us to see that happened in the siege
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
			if = { 
				limit = { NOT = { has_country_modifier = slavery_abolished } }
				enslave_effect_soft = { days = 40 }
			}
		}
		add_mil_power = -60
	}
	
	option = {
		name = "sieges.1.4"		# SOFT ENSLAVEMENT (5% value, 10% devastation, pops above 60/40/20% capacity will be lost or enslaved)
		
		ai_chance = {			# AI chance: will do if needs money but not slaves. Main AI option if it has a low sack ratio, to economize mil power
			factor = 40
			modifier = { factor = 0.5 mil_power = 50 }
			modifier = { factor = 0.7 FROM = { NOT = { check_variable = { sack_ratio = 0.6 } } } }
			modifier = { factor = 4.0 NOT = { check_variable = { var_slaves_pop_ratio = 40 } } }	# priority to enslave, unless it can destroy
		}
		trigger = { 
			NOT = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }	# in case Delenda Est is active, then it is compulsory
			NOT = {
				OR = {
					# for now, just 3 ideas for each adm/dip/mil group
					has_idea  = special_taxation_idea	has_idea  = building_monuments_idea		has_idea  = balance_court_ideas
					has_idea  = oratory_barbarians_idea	has_idea  = justification_rhetoric_idea	has_idea  = hard_suppression_idea
					has_idea  = focus_manuever_idea		has_idea  = own_forces_reserves_idea	has_idea  = military_infrastructure_idea
					tag = ASY	# as always
					
					# remember to copy the same conditions in the hard enslave, but without the NOT
				}
			}
			NOT = { has_country_modifier = slavery_abolished }
		}
		
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 05	devst = 10 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 10 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_enslaved duration = 1825 }	# this modifier allows us to see that happened in the siege
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
			enslave_effect_soft = { days = 60 }
			
		}
		add_mil_power = -20
	}
	option = {
		name = "sieges.1.5"		# HARD ENSLAVEMENT (10% value, 25% devastation, pops above 60/40/20% capacity will be lost or enslaved)
		
		ai_chance = {			# AI chance: same as soft enslave, but higher. 
			factor = 40
			modifier = { factor = 1.5 FROM = { NOT = { check_variable = { sack_ratio = 0.6 } } } }
			modifier = { factor = 4.0 NOT = { check_variable = { var_slaves_pop_ratio = 75 } } }	# 75% instead of 40, will go to higher ratio
		}
		trigger = {
			NOT = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }	# in case Delenda Est is active, then it is compulsory
			OR = {
				# for now, just 3 ideas for each adm/dip/mil group
				has_idea  = special_taxation_idea	has_idea  = building_monuments_idea		has_idea  = balance_court_ideas
				has_idea  = oratory_barbarians_idea	has_idea  = justification_rhetoric_idea	has_idea  = hard_suppression_idea
				has_idea  = focus_manuever_idea		has_idea  = own_forces_reserves_idea	has_idea  = military_infrastructure_idea
				tag = ASY	# as always
				
			}
			NOT = { has_country_modifier = slavery_abolished }
		}
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 10	devst = 25 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 25 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_enslaved duration = 3600 }	# this modifier allows us to see that happened in the siege
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
			
			enslave_effect_hard = { days = 90 }
		}
		add_mil_power = -20
	}
	option = {
		name = "sieges.1.6"		# DELENDA EST (60% value, 100% devastation, all pops lost but one, 20% enslaved
		ai_chance = {			# AI chance: ALWAYS
			factor = 100
			modifier = { factor = 5.0 FROM = { check_variable = { sack_ratio = 0.6 } } }
		}
		trigger = { FROM = { is_capital = yes  owner = { is_rival = ROOT } } }
		hidden_effect = {
			# Province effect
			FROM = {
				define_sack_and_devastation = {	sackvalue = 60	devst = 100 }
				while = { limit = { check_variable = { prov_devst = 1 } } 	subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				# Destroy everything, delenda est
				
				set_variable = { which = col_value which = loot_value } multiply_variable = { col_value = 0.9 }	# special, 90% destroyed
				while = { limit = { check_variable = { col_value = 10 } } collateral_damage_eff = { hd = 90 } }	# See Scripted Effects, very cool
				add_province_modifier = { name = SS_was_delenda duration = 18250 }	# 50 years, devastation will START to go down in two generations
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM }		money_income = yes
			enslave_delenda_effect = yes
		}
		add_mil_power = -100	# not added to trigger, so you can go negative if the reason is good
	}
	option = {
		name = "sieges.1.7"		# Leave them be
		ai_chance = {
			factor = 0
		}
		
	}
	
	
	after = {
		FROM = {
			set_variable = { which = sack_size value = 0 } 	set_variable = { which = sack_power value = 0 } 
			set_variable = { which = sack_ratio value = 0 } set_variable = { which = sack_display value = 0 } 
			
			set_variable = { which = pop_total value = 0 } 	set_variable = { which = sack_lost value = 0 } 
			set_variable = { which = loot_value value = 0 } set_variable = { which = prov_devst value = 0 } 
			set_variable = { which = col_value value = 0 } 	set_variable = { which = cash_income value = 0 } 
			
			set_variable = { which = prov_inf value = 0 } 	set_variable = { which = prov_cav value = 0 } 
			set_variable = { which = prov_arc value = 0 } 
			
			set_variable = { which = SS_t_lost value = 0 } 	set_variable = { which = SS_c_lost value = 0 } 
			set_variable = { which = SS_u_lost value = 0 } 	
			set_variable = { which = SS_soft_total value = 0 } set_variable = { which = SS_hard_total value = 0 } 
			set_variable = { which = SS_rs_slave value = 0 } set_variable = { which = SS_rh_slave value = 0 } 
			set_variable = { which = SS_cs_slave value = 0 } set_variable = { which = SS_ch_slave value = 0 } 
			set_variable = { which = SS_us_slave value = 0 } set_variable = { which = SS_uh_slave value = 0 } 
			set_variable = { which = SS_t_base value = 0 } 	set_variable = { which = SS_t_lost value = 0 } 
			set_variable = { which = SS_t_min value = 0 } 	set_variable = { which = SS_c_base value = 0 } 
			set_variable = { which = SS_c_lost value = 0 } 	set_variable = { which = SS_c_min value = 0 } 
			set_variable = { which = SS_u_base value = 0 } 	set_variable = { which = SS_u_lost value = 0 } 
			set_variable = { which = SS_u_min value = 0 } 
			
			change_variable = { which = PS_bldv_lost which = SS_blds }	# to track total value lost, in history
			
			if = {
				limit = { OR = {
				has_province_flag = small_bath_lost				has_province_flag = big_bath_lost			has_province_flag = mathematician_academy_lost
				has_province_flag = philosophers_academy_lost	has_province_flag = military_academy_lost	has_province_flag = great_library_lost			
				has_province_flag = library_lost 				has_province_flag = embassy_lost			has_province_flag = diplomats_quarter_lost
				has_province_flag = small_townhall_lost			has_province_flag = big_townhall_lost		has_province_flag = government_palace_lost
				has_province_flag = government_district_lost	has_province_flag = small_grain_depot_lost	has_province_flag = big_grain_depot_lost
				has_province_flag = small_market_lost			has_province_flag = medium_market_lost		has_province_flag = great_market_lost
				has_province_flag = small_harbor_lost			has_province_flag = big_harbor_lost			has_province_flag = harbor_district_lost
				has_province_flag = small_army_camp_lost			has_province_flag = small_military_settlement_lost
				has_province_flag = big_military_settlement_lost	has_province_flag = small_conscription_center_lost
				has_province_flag = small_water_irrigation_lost has_province_flag = big_water_irrigation_lost has_province_flag = big_estate_lost
				has_province_flag = craftsman_lost 				has_province_flag = small_workshop_lost 	has_province_flag = artisan_district_lost
				has_province_flag = quarry_lost					has_province_flag = small_mine_lost			has_province_flag = big_mine_lost
				has_province_flag = small_shipyard_lost			has_province_flag = big_shipyard_lost
				has_province_flag = military_monument_lost		has_province_flag = naval_monument_lost		has_province_flag = imperial_palace_lost
				has_province_flag = palace_garden_lost			has_province_flag = taxman_lost				has_province_flag = tax_collector_lost
				has_province_flag = shrine_lost					has_province_flag = small_temple_lost		has_province_flag = great_temple_lost
				has_province_flag = small_theater_lost			has_province_flag = big_theater_lost		has_province_flag = great_theater_lost
				has_province_flag = huge_theater_lost			has_province_flag = gravel_road_lost		has_province_flag = paved_road_lost
				has_province_flag = imperial_road_lost			has_province_flag = herbalist_lost			has_province_flag = medicus_lost
				has_province_flag = hospital_lost
				} }
				add_building = building_ruins
			}
		}
		
	}
	
}

country_event = {		
	id = sieges.2
	title = "sieges.2.t"
	desc = "sieges.2.d"
	picture = looting
	hidden = yes				# Hidden! only one option
	is_triggered_only = yes		
								# Automatic event, for low-development provinces. Will have very small effects: (only 5% population enslaved, 5% value of buildings, no destruction, and 10% devastation). It will be seen as "Has been raided"
	trigger = {
		FROM = { development = 6 }
		OR = {
			AND = { has_global_flag = siege_cities_15 	FROM = { NOT = { development = 15 } } }
			AND = { has_global_flag = siege_cities_12 	FROM = { NOT = { development = 12 } } }
			AND = { has_global_flag = siege_cities_10 	FROM = { NOT = { development = 10 } } }
			AND = { has_global_flag = siege_cities_8 	FROM = { NOT = { development = 8 } } }
			
		}
		NOT = {
			OR = {  has_province_modifier = SS_was_raided 	 has_province_modifier = SS_was_delenda has_province_modifier = SS_was_enslaved
					has_province_modifier = SS_was_destroyed has_province_modifier = SS_was_sacked 	has_province_modifier = SS_was_tributed } 
		}
		
	}
	
	
	immediate = {
		
		hidden_effect = {
			FROM = {
				# Initial cleanup, to remove variables stored in the province modifiers
				set_variable = { which = SS_looted_value value = 0 } set_variable = { which = SS_devastation_done value = 0 } 
				
				# Sack efficiency (army, ferocity, ratio)
				export_to_variable = { which = prov_inf value = trigger_value:infantry_in_province }
				export_to_variable = { which = prov_cav value = trigger_value:cavalry_in_province }
				export_to_variable = { which = prov_arc value = trigger_value:artillery_in_province }
				
				set_variable = { which = sack_size which = prov_inf }
				change_variable = { which = sack_size which = prov_cav } change_variable = { which = sack_size which = prov_arc }
				
				set_variable = { which = sack_power value = 5 }
				# and other modifiers that affect ferocity
				
				set_variable = { which = sack_ratio which = sack_size } 	multiply_variable = { which = sack_ratio which = sack_power }
				
				export_to_variable = { which = pop_total value = development } 	multiply_variable = { pop_total = 10 }	# pops in thousands
				divide_variable = { which = sack_ratio which = pop_total } 	set_variable = { which = sack_display which = sack_ratio }
				if = { limit = { check_variable = { sack_ratio = 1 } } 		set_variable = { which = sack_ratio value = 1 } }		# max 100%
				
				# Calculate lootable amount (buildings). Always 75% of build cost
				set_variable = { which = loot_value value = 0 }
				find_total_loot_value = yes
				
				set_variable = { which = SS_simple_total which = pop_total } 	multiply_variable = { SS_simple_total = 0.05 }
				multiply_variable = { which = SS_simple_total which = sack_ratio }
				
			}
		}
		
	}
	
	
	option = {
		name = "sieges.2.1"	# Automatic option, direct
		ai_chance = {
			factor = 100
		}
		
		hidden_effect = {
			# Province effect
			FROM = {
				set_variable = { which = sack_lost value = 0.05 }
				multiply_variable = { which = sack_lost which = loot_value } 	multiply_variable = { which = sack_lost which = sack_ratio }
				set_variable = { which = prov_devst value = 10 } 				multiply_variable = { which = prov_devst which = sack_ratio }
				
				# Show variables in the province modifier, to see what happened
				set_variable = { which = SS_looted_value which = sack_lost }	set_variable = { which = SS_devastation_done which = prov_devst }
				while = { limit = { check_variable = { prov_devst = 1 } } 		subtract_variable = { prov_devst = 1 } add_devastation = 1 }
				set_variable = { which = cash_income which = sack_lost }
				add_province_modifier = { name = SS_was_raided duration = 720 }		# to avoid being hit again in X days
				set_variable = { which = SS_slaves_taken which = SS_simple_total }	# slaves taken: to province modifier
			}
			
			# Country, besieger effect
			set_variable = { which = cash_income which = FROM } 	money_income = yes
			
			set_variable = { which = SS_simple_total which = FROM } change_variable = { which = slaves which = SS_simple_total }
			set_variable = { which = SS_simple_total value = 0 }
			
		}
	}
	
	
	after = {
		FROM = {
			set_variable = { which = prov_inf value = 0 } 	set_variable = { which = prov_cav value = 0 } 
			set_variable = { which = prov_arc value = 0 } 
			set_variable = { which = sack_size value = 0 } 	set_variable = { which = sack_power value = 0 } 
			set_variable = { which = sack_ratio value = 0 } set_variable = { which = sack_display value = 0 } 
			
			set_variable = { which = pop_total value = 0 } 	set_variable = { which = sack_lost value = 0 } 
			set_variable = { which = loot_value value = 0 } set_variable = { which = prov_devst value = 0 } 
			set_variable = { which = cash_income value = 0 } 
			
			set_variable = { which = SS_simple_total value = 0 } 
			
		}
		
	}
	
}

country_event = {		# SIEGES MENU
	id = sieges.3
	title = "sieges.3.t"
	desc = "sieges.3.d"
	picture = column_trajan_1
	is_triggered_only = yes
	
	option = {								
		name = "sieges.3.1"	# Allow siege event in ALL places, event dev 1-5. Not supposed to be done, but it's your save game, do what you want
		set_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		clr_global_flag = siege_cities_12
		clr_global_flag = siege_cities_10
		clr_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
		
	}
	option = {								
		name = "sieges.3.2"	# Limit 15 development. Low impact event in provs with at least 6
		clr_global_flag = siege_unrestricted
		set_global_flag	= siege_cities_15
		clr_global_flag = siege_cities_12
		clr_global_flag = siege_cities_10
		clr_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
	}
	option = {								
		name = "sieges.3.3"	# Limit 12 development. Low impact event in provs with at least 6
		clr_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		set_global_flag = siege_cities_12
		clr_global_flag	= siege_cities_10
		clr_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
	}
	option = {								
		name = "sieges.3.4"	# Limit 10 development. Low impact event in provs with at least 6
		ai_chance = { factor = 100 }
		clr_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		clr_global_flag	= siege_cities_12
		set_global_flag = siege_cities_10
		clr_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
	}
	option = {								
		name = "sieges.3.5"	# Limit 8 development. Low impact event in provs with at least 6
		clr_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		clr_global_flag	= siege_cities_12
		clr_global_flag = siege_cities_10
		set_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
	}
	option = {								
		name = "sieges.3.6"	# Limit 6 development. No low impact events
		clr_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		clr_global_flag	= siege_cities_12
		clr_global_flag = siege_cities_10
		clr_global_flag	= siege_cities_8
		set_global_flag	= siege_cities_6
	}
	option = {								
		name = "sieges.3.7"	# Remove everything, no events will fire. There will not be any continous source of slaves, and will decrease every year. 
		clr_global_flag = siege_unrestricted
		clr_global_flag	= siege_cities_15
		clr_global_flag	= siege_cities_12
		clr_global_flag = siege_cities_10
		clr_global_flag	= siege_cities_8
		clr_global_flag	= siege_cities_6
	}
	option = {							
		name = "sieges.3.8"	# Explain me more -> event with a quick explanation
		country_event = { id = sieges.4 }
		
	}
	
	after = { hidden_effect = { country_event = { id = startup.4 } } }
}
country_event = {
	id = sieges.4
	title = "sieges.4.t"
	desc = "sieges.4.d"
	picture = column_trajan_1
	is_triggered_only = yes
	
	option = {							
		name = "sieges.4.1"	# Explains how this mechanics work. 
		
		
	}
	
}

country_event = {	# REPAIR EVENT, happens once the "repairs planned" buildings have been used. 
	id = sieges.5
	title = "sieges.5.t"
	desc = "sieges.5.d"
	picture = wall_rebuilding
	is_triggered_only = yes
	
	# Some introduction
	# In the event of a siege, several buildings may be colaterally destroyed. These will add a province flag into that province, and, as long as there is one such flags present, it will show a "building" called "Ruins". If you click on it (so, "upgrade" the ruins), the Repairs Planned building appears. This Repairs Planned building marks every province that will be repaired through this decision. So if you want to just repair the production buildings of your richest provinces, then build that just there, and then re-do this into another building, etc. 
	# Remember that these flags and the ruins last for only FIVE years, after that the ruins are beyond repair and will be lost. 
	# The cost of repairing such buildings is 75% of the original price, without any added cost modifiers. 
	
	option = {
		name = "sieges.5.1"		# TRADE AND ROADS
		
		trigger = {		# will affect all provinces with markets and roads. ALWAYS destroys the building repairs planned; ruins are added later
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = small_market_lost	has_province_flag = medium_market_lost	has_province_flag = great_market_lost
					has_province_flag = gravel_road_lost	has_province_flag = paved_road_lost		has_province_flag = imperial_road_lost
					has_province_flag = small_harbor_lost 	has_province_flag = big_harbor_lost 	has_province_flag = harbor_district_lost 
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_trade_roads_harbor = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.2"		# TEMPLES
		
		trigger = {	
			any_owned_province = {
				has_building = repairs_planned
				OR = { has_province_flag = shrine_lost	has_province_flag = small_temple_lost	has_province_flag = great_temple_lost }
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_temples = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.3"		# HEALTH AND PRODUCTION
		
		trigger = {
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = small_grain_depot_lost	has_province_flag = big_grain_depot_lost	
					has_province_flag = small_water_irrigation_lost	has_province_flag = big_water_irrigation_lost has_province_flag = big_estate_lost
					has_province_flag = craftsman_lost 	has_province_flag = small_workshop_lost has_province_flag = artisan_district_lost 
					has_province_flag = quarry_lost 	has_province_flag = small_mine_lost 	has_province_flag = big_mine_lost 
					has_province_flag = herbalist_lost 	has_province_flag = medicus_lost 		has_province_flag = hospital_lost 
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_health_industry = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.4"		# MILITARY: army camps, conscription, and shipyards
		
		trigger = {	
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = small_conscription_center_lost	has_province_flag = small_army_camp_lost	
					has_province_flag = small_military_settlement_lost	has_province_flag = big_military_settlement_lost 
					has_province_flag = small_shipyard_lost 			has_province_flag = big_shipyard_lost 
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_military_shipyards = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.5"		# GOVERNMENT: governor offices, tax collector, embassies
		
		trigger = {	
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = small_townhall_lost		has_province_flag = big_townhall_lost	
					has_province_flag = government_palace_lost	has_province_flag = government_district_lost 
					has_province_flag = taxman_lost				has_province_flag = tax_collector_lost 
					has_province_flag = embassy_lost 			has_province_flag = diplomats_quarter_lost 
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_government = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.6"		# EDUCATION AND LESIURE
		
		trigger = {	
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = military_monument_lost		has_province_flag = naval_monument_lost	
					has_province_flag = imperial_palace_lost		has_province_flag = palace_garden_lost 
					has_province_flag = small_theater_lost			has_province_flag = big_theater_lost 
					has_province_flag = great_theater_lost 			has_province_flag = huge_theater_lost
					has_province_flag = mathematician_academy_lost 	has_province_flag = philosophers_academy_lost
					has_province_flag = military_academy_lost 	has_province_flag = great_library_lost has_province_flag = library_lost
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_leisure_education = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.7"		# EVERYTHING
		ai_chance = { factor = 100 }
		
		trigger = {	
			any_owned_province = {
				has_building = repairs_planned
				OR = { 
					has_province_flag = small_bath_lost				has_province_flag = big_bath_lost		has_province_flag = mathematician_academy_lost
					has_province_flag = philosophers_academy_lost	has_province_flag = military_academy_lost	has_province_flag = great_library_lost	
					has_province_flag = library_lost 				has_province_flag = embassy_lost			has_province_flag = diplomats_quarter_lost
					has_province_flag = small_townhall_lost			has_province_flag = big_townhall_lost		has_province_flag = government_palace_lost
					has_province_flag = government_district_lost	has_province_flag = small_grain_depot_lost	has_province_flag = big_grain_depot_lost
					has_province_flag = small_market_lost			has_province_flag = medium_market_lost		has_province_flag = great_market_lost
					has_province_flag = small_harbor_lost			has_province_flag = big_harbor_lost			has_province_flag = harbor_district_lost
					has_province_flag = small_army_camp_lost			has_province_flag = small_military_settlement_lost
					has_province_flag = big_military_settlement_lost	has_province_flag = small_conscription_center_lost
					has_province_flag = small_water_irrigation_lost has_province_flag = big_water_irrigation_lost has_province_flag = big_estate_lost
					has_province_flag = craftsman_lost 				has_province_flag = small_workshop_lost 	has_province_flag = artisan_district_lost
					has_province_flag = quarry_lost					has_province_flag = small_mine_lost			has_province_flag = big_mine_lost
					has_province_flag = small_shipyard_lost			has_province_flag = big_shipyard_lost
					has_province_flag = military_monument_lost		has_province_flag = naval_monument_lost		has_province_flag = imperial_palace_lost
					has_province_flag = palace_garden_lost			has_province_flag = taxman_lost				has_province_flag = tax_collector_lost
					has_province_flag = shrine_lost					has_province_flag = small_temple_lost		has_province_flag = great_temple_lost
					has_province_flag = small_theater_lost			has_province_flag = big_theater_lost		has_province_flag = great_theater_lost
					has_province_flag = huge_theater_lost			has_province_flag = gravel_road_lost		has_province_flag = paved_road_lost
					has_province_flag = imperial_road_lost			has_province_flag = herbalist_lost			has_province_flag = medicus_lost
					has_province_flag = hospital_lost
				}
			}
		}
		every_owned_province = {
			limit = { has_building = repairs_planned }
			SS_repair_trade_roads_harbor = yes
			SS_repair_temples = yes
			SS_repair_health_industry = yes
			SS_repair_military_shipyards = yes
			SS_repair_government = yes
			SS_repair_leisure_education = yes
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	
	option = {
		name = "sieges.5.8"		# Tear down repairs and clean lots. 5% cost of everything, and 0.5% in ADM points. 
		every_owned_province = { 
			limit = { has_building = repairs_planned }
			SS_clear_land_cost = yes
			if = { 	limit = { devastation = 50 } add_province_modifier = { name = SS_cleaning_2 duration = 2920 } }
			else = { 							 add_province_modifier = { name = SS_cleaning_1 duration = 1460 } }
			hidden_effect = { remove_building = repairs_planned }
		}
		
	}
	option = {
		name = "sieges.5.9"	# Nothing, go back
		every_owned_province = {
			limit = { has_building = repairs_planned }
			hidden_effect = { remove_building = repairs_planned }
		}
		
		
	}
	
	after = {
		# resets the ruins building, in case something is yet to be repaired. 
		# Remember that in the next pop capacity event, if they have more than 5 years, they will be gone
		every_owned_province = {
			SS_find_existing_ruins = yes
		
		}
	
	}
}

country_event = {
	id = sieges.6
	title = "sieges.6.t"
	desc = "sieges.6.d"
	picture = shambhala
	is_triggered_only = yes
	
	option = {							
		name = "sieges.6.1"	# Moves all buildings to flags. Also DESTROYS them, to prepare for the new version
		every_province = {
			SS_store_building_to_flag = yes
		}
		
	}
	option = {							
		name = "sieges.6.2"	# No, go back
		ai_chance = { factor = 100 }
		
	}
	
}

