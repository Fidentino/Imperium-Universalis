namespace = culture_minorities

########################################################################################
# CULTURAL MINORITIES, the new thing I'm writing. So far everything is experimental and won't be published for some time
########################################################################################


province_event = {
	id = culture.1
	title = "culture.1.t"
	desc = "culture.1.d"
	picture = culture
	is_triggered_only = yes
	
	immediate = {
		export_to_variable = { which = CM_provcult value = culture }
		export_to_variable = { which = CM_population value = development }
		export_to_variable = { which = CM_country_own value = primary_culture who = owner }
		owner = { export_to_variable = { which = CM_target_provcult value = culture who = PREV } }
		
		set_variable = { which = CM_1_size which = CM_population }	# Up to 9 slots
		set_variable = { which = CM_1_cult which = CM_provcult }
		
		# Identify "what is culture 1, in terms of relation to the owner". Primary culture, accepted, same group, other
			# cleanup
			set_variable = { which = CM_count_own value = 0 }	set_variable = { which = CM_count_acc value = 0 }
			set_variable = { which = CM_count_grp value = 0 }	set_variable = { which = CM_count_oth value = 0 }
		
		# p01
		if = {
			limit = { owner = { primary_culture = variable:CM_target_provcult } }
			change_variable = { which = CM_count_own which = CM_1_size }
		}
		else_if = {
			limit = { owner = { accepted_culture = variable:CM_target_provcult } }	# I know it won't work, it requires more scope-fuckery
			change_variable = { which = CM_count_acc which = CM_1_size }			# Will have to check if it is accepted + same group
		
		}
		else = {
			change_variable = { which = CM_count_oth which = CM_1_size }	# to be expanded. Will have also "Same culture group", before the Other
		}
		
		# and p02, p03, p04, etc. Create a scripted effect
		
		
		# Assign the flag on what type of province this is
		#	What type means which kind of interaction with locals it is having. 
		#	Majority own culture (A1), Barely majority (A2), Mixed own + accepted (B1), Only accepted (B2), Light control (C1), Unaccepted (D1), etc
		
		# Thresholds for each kind. 66% for large majority, 40% for low majority, 20% for light control. 
		set_variable = { which = CM_thres_66 which = CM_population } multiply_variable = { CM_thres_66 = 0.66 }
		set_variable = { which = CM_thres_40 which = CM_population } multiply_variable = { CM_thres_40 = 0.40 }
		set_variable = { which = CM_thres_20 which = CM_population } multiply_variable = { CM_thres_20 = 0.20 }
		set_variable = { which = CM_accepted which = CM_count_own }	 change_variable = { which = CM_accepted which = CM_count_acc }
		
		
		# Let's check the groups
		if = {
			limit = { check_variable = { which = CM_count_own which = CM_thres_66 } }
			set_province_flag = CM_type_A1
		}
		else_if = {	limit = { check_variable = { which = CM_count_own which = CM_thres_40 } }	set_province_flag = CM_type_A2	}
		else_if = {
			limit = { check_variable = { which = CM_accepted which = CM_thres_66 } check_variable = { which = CM_count_own which = CM_thres_20 } }
			set_province_flag = CM_type_B1
		}
		else_if = {	limit = { check_variable = { which = CM_accepted which = CM_thres_66 } }	set_province_flag = CM_type_B2	}
		else_if = {	limit = { check_variable = { which = CM_accepted which = CM_thres_40 } }	set_province_flag = CM_type_B3	}
		else_if = {	limit = { check_variable = { which = CM_accepted which = CM_thres_20 } }	set_province_flag = CM_type_B4	}
		else_if = {	limit = { check_variable = { which = CM_count_grp which = CM_thres_66 } }	set_province_flag = CM_type_C1	}
		else_if = {	limit = { check_variable = { which = CM_count_grp which = CM_thres_40 } }	set_province_flag = CM_type_C2	}
		else_if = {	limit = { check_variable = { which = CM_count_grp which = CM_thres_20 } }	set_province_flag = CM_type_C3	}
		else = { set_province_flag = CM_type_D1 }
		
		
	}
	
	option = {
		name = "culture.1.a"	# Add 1 neighboring pop
		
		
		# Tooltip, mentioning which neighbor province and which culture
		random_neighbor_province = {
			limit = { NOT = { culture = PREV } }
			save_event_target_as = CM_neighprov_target
			PREV = { export_to_variable = { which = CM_neighcult value = culture who = PREV } }
		}
		if = {
			limit = { is_variable_equal = { which = CM_provcult which = CM_1_cult } }		# the dominant culture is pos01
			subtract_variable = { CM_1_size = 1 } 
			
		}
		# else if, the same for slots 2, 3, etc etc
		# later on I will change it to a flag system, where it says "1 targeted", "2 targeted", 
		# and thus it can be used for both positive and negative things, interchangeably
		if = { 
			limit = { NOT = { check_variable = { CM_2_cult = 1 } } }	# 2's has no culture, therefore it is empty
			set_variable = { which = CM_2_cult which = CM_neighcult }
			change_variable = { CM_2_size = 1 }
		}
		# also needs a trigger switch to identify which is empty, ie 2 empty, 3 empty, etc
		# a curious thing. I may choose to leave the cultures' slots existing, but with size zero. So if in the future there is
		# a positive event, it can even go to a previously gone culture, as a comeback. And therefore the inmediate will take it
		# longer to find an empty slot, while the after effect will only delete one of the cultures if it is empty (while + counter to 1 + random 30%)
		
		
	}
	
	
	option = {
		name = "culture.1.a"	# Check if change culture
		
	}
	
	option = {
		name = "culture.1.a"	# Nothing
		
	}
	
	after = {
		# Assign which province modifier to give
	
	
	
	}
}